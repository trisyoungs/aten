# Crystallographic Information File (cif) (for v1.2+)
# Created:	 10/04/2009
# Last modified: 21/05/2009
# ChangeLog:
#	21/05/2009 - Major fixes - data in loops was not read correctly.

filter(type="importmodel", name="Crystallographic Information File", nickname="cif", extension="cif", glob="*.cif", id=8)
{
	# CIF files are dictionary-based, so we can recognise keywords as we find them.
	# Loops are a little more complicated. For these we will build up a custom format string
	# and then use it to read in the data once the loop definitions are finished.

	# Variables
	string discard,data,keywd,line,char,looptype,args[50];
	int n,arg,cellspec,id_r[3],id_e,id_gen,nread;
	double length[3],cellangle[3];

	# Blank lines are significant, so don't skip them, and recognise quoting
	removereadoption("skipblanks");
	addreadoption("usequotes");

	model m = newmodel("CifModel");
	cellspec = 0;

	# Main loop - read lines and check for important keywords
	while (!eof())
	{
		readline(keywd,data);
		#printf("Main keyword = %s\n", keywd);
		if (keywd == "_chemical_name_common") setname(data);
		else if (keywd == "_cell_length_a") { length[1] = atof(data); cellspec++; }
		else if (keywd == "_cell_length_b") { length[2] = atof(data); cellspec++; }
		else if (keywd == "_cell_length_c") { length[3] = atof(data); cellspec++; }
		else if (keywd == "_cell_angle_alpha") { cellangle[1] = atof(data); cellspec++; }
		else if (keywd == "_cell_angle_beta") { cellangle[2] = atof(data); cellspec++; }
		else if (keywd == "_cell_angle_gamma") { cellangle[3] = atof(data); cellspec++; }
		# Spacegroup name - strip spaces which are sometimes be inserted by other programs
		else if (keywd == "_symmetry_space_group_name_H-M") spacegroup(data);
		# Loops
		else if (keywd == "loop_")
		{
			# Deal with loops here
			n = 0;
			looptype = "none";
			# Loop over next lines to determine the data to expect. When we discover a data item we're interested in,
			# store the number of the column.
			while (1)
			{
				# Read and store whole line (we may need it later)
				getline(line);
				#printf("Current line is '%s'\n", line);

				# Get keyword from line (delimited read)
				readvar(line,keywd);
				#printf("Keyword is now '%s'\n", keywd);

				# Get first character and next 9 characters
				readvarf(keywd,"%1s%9s",char,data);
				if (char == "_") ++n;
				#printf("In the loop - line is %i\n", n);

				# If first character of 'keywd' is not '_' then we have entered the actual data defined by the loop.
				# If this was an empty line, we're done with the loop
				#printf("Keyword = [%s], firstchar=%s\n",keywd,char);
				if (char == "") break;
				else if (char <> "_")
				{
					# Already have first line of data stored in 'line'.
					# Read individual delimited arguments until we have 'n' of them, the number of loop data defined by _* records
					for (nread = 0; nread < n; nread++)
					{
						while (readnext(args[nread+1]) == FALSE) getline(line);
						#printf("Arg/data %i = '%s'\n", nread, args[nread+1] );
					}
					# Our next action depends on the loop type
					if (looptype == "atom")
					{
						newatom(args[id_e], atof(args[id_r[1]]), atof(args[id_r[2]]), atof(args[id_r[3]]));
						#printf("Created atom with coords %f %f %f\n", atof(args[id_r[1]]), atof(args[id_r[2]]), atof(args[id_r[3]]));
					}
					else if (looptype == "gen") addgenerator(line);
				}
				else if (data == "atom_site")
				{
					# Atom data loop
					looptype = "atom";
					if (keywd == "_atom_site_type_symbol") id_e = n;
					else if (keywd == "_atom_site_fract_x") id_r[1] = n;
					else if (keywd == "_atom_site_fract_y") id_r[2] = n;
					else if (keywd == "_atom_site_fract_z") id_r[3] = n;
				}
				else if (data == "symmetry_")
				{
					# Symmetry generator definitions - only use if spacegroup not already specified
					if (m.cell.sgid <> 0) printf("Generator data ignored - spacegroup is already set.\n");
					else
					{
						looptype = "gen";
						if (keywd == "_symmetry_equiv_pos_as_xyz") id_gen = n;
					}
				}
			}
		} # Loop loop
	} # Main loop

	# Were we given a full cell spec?
	if (cellspec == 6)
	{
		cell(length[1],length[2],length[3],cellangle[1],cellangle[2],cellangle[3]);
		fractoreal();
		# Pack according to spacegroup
		pack();
	}
	else
	{
		printf("Warning: Full cell specification was not found in file.\n");
		printf("Warning: Atom coordinates are still fractional.\n");
	}

	rebond();
	finalisemodel();
}
