<section id="commands.groups.pattern"><title>Pattern Commands</title>
	
	<para>Automatically or manually create pattern descriptions for models.</para>

	<section id="command.ref.clearpatterns"><title>clearpatterns</title>
		<indexterm><primary>commands</primary><secondary>clearpatterns</secondary></indexterm>
		
		<para><emphasis>Syntax:</emphasis></para>
		<funcsynopsis>
			<funcprototype>
				<funcdef>void <function>clearpatterns</function></funcdef>
				<void>
			</funcprototype>
		</funcsynopsis>
		<para>Delete the pattern description of the current model. It's a good idea to run this command before adding a pattern definition by hand with calls to <link linkend="command.ref.newpattern">newpattern</link>.</para>
		
		<para>For example:</para>
		<synopsis>
			clearpatterns();
		</synopsis>
	
	</section>
	
	<section id="command.ref.createpatterns"><title>createpatterns</title>
		<indexterm><primary>commands</primary><secondary>createpatterns</secondary></indexterm>
		
		<para><emphasis>Syntax:</emphasis></para>
		<funcsynopsis>
			<funcprototype>
				<funcdef>void <function>createpatterns</function></funcdef>
				<void>
			</funcprototype>
		</funcsynopsis>
		<para>Automatically detect and create the pattern description for the current model.</para>
		
		<para>For example:</para>
		<synopsis>
			createpatterns();
		</synopsis>
		
	</section>
	
	<section id="command.ref.currentpattern"><title>currentpattern</title>
		<indexterm><primary>commands</primary><secondary>currentpattern</secondary></indexterm>
		
		<para><emphasis>Syntax:</emphasis></para>
		<funcsynopsis>
			<funcprototype>
				<funcdef><link linkend="command.types.pattern">pattern</link> <function>currentpattern</function></funcdef>
				<void>
			</funcprototype>
			<funcprototype>
				<funcdef><link linkend="command.types.pattern">pattern</link> <function>currentpattern</function></funcdef>
				<paramdef>string <parameter>name</parameter></paramdef>
			</funcprototype>
			<funcprototype>
				<funcdef><link linkend="command.types.pattern">pattern</link> <function>currentpattern</function></funcdef>
				<paramdef>int <parameter>id</parameter></paramdef>
			</funcprototype>
		</funcsynopsis>
		<para>Get the named pattern or pattern with given id (if either was specified), returning its reference and setting it to be the current pattern.</para>
		
		<para>For example:</para>
		<synopsis>
			pattern p = currentpattern(&quot;liquid&quot;);
		</synopsis>
		<para>sets the pattern named 'liquid' in the current model to be the current pattern, setting its reference in the variable <emphasis>p</emphasis>.</para>
		<synopsis>
			pattern p = currentpattern();
		</synopsis>
		<para>returns a reference to the current pattern.</para>
			
	</section>
	
	<section id="command.ref.getpattern"><title>getpattern</title>
		<indexterm><primary>commands</primary><secondary>getpattern</secondary></indexterm>
		
		<para><emphasis>Syntax:</emphasis></para>
		<funcsynopsis>
			<funcprototype>
				<funcdef><link linkend="command.types.pattern">pattern</link> <function>getpattern</function></funcdef>
				<paramdef>string <parameter>name</parameter></paramdef>
			</funcprototype>
			<funcprototype>
				<funcdef><link linkend="command.types.pattern">pattern</link> <function>getpattern</function></funcdef>
				<paramdef>int <parameter>id</parameter></paramdef>
			</funcprototype>
		</funcsynopsis>
		<para>Get the named pattern, or pattern with id specified, returning its reference.</para>
		
		<para>For example:</para>
		<synopsis>
			pattern p = getpattern(&quot;solid&quot;);
		</synopsis>
		<para>gets the pattern named 'solid' in the current model, setting its reference in the variable <emphasis>p</emphasis>.</para>
		<synopsis>
			getpattern(3);
		</synopsis>
		<para>gets the third pattern in the current model.</para>
		
	</section>
	
	<section id="command.ref.listpatterns"><title>listpatterns</title>
		<indexterm><primary>commands</primary><secondary>listpatterns</secondary></indexterm>
		
		<para><emphasis>Syntax:</emphasis></para>
		<funcsynopsis>
			<funcprototype>
				<funcdef>void <function>listpatterns</function></funcdef>
				<void>
			</funcprototype>
		</funcsynopsis>
		<para>List the patterns in the current model.</para>
		
		<para>For example:</para>
		<synopsis>
			listpatterns();
		</synopsis>
	
	</section>
	
	<section id="command.ref.newpattern"><title>newpattern</title>
		<indexterm><primary>commands</primary><secondary>newpattern</secondary></indexterm>
		
		<para><emphasis>Syntax:</emphasis></para>
		<funcsynopsis>
			<funcprototype>
				<funcdef><link linkend="command.types.pattern">pattern</link> <function>newpattern</function></funcdef>
				<paramdef>string <parameter>name</parameter></paramdef>
				<paramdef>int <parameter>nmols</parameter></paramdef>
				<paramdef>int <parameter>atomspermol</parameter></paramdef>
			</funcprototype>
		</funcsynopsis>
		<para>Add a new pattern node to the current model, spanning <emphasis>nmols</emphasis> molecules of <emphasis>atomspermol</emphasis> atoms each, and called <emphasis>name</emphasis>. A reference to the new pattern is returned.</para>
		
		<para>For example:</para>
		<synopsis>
			pattern p = newpattern(&quot;water&quot;, 100, 3);
		</synopsis>
		<para>creates a new pattern description of 100 molecules of 3 atoms each named 'water' (i.e. 100 water molecules) in the current model, and returns its reference</para>
	
	</section>
	
</section>
