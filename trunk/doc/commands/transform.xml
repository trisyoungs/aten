<section id="commands.groups.transform"><title>Transform Commands</title>
	
	<para>Commands to transform the current selection of the model.</para>

	<section id="command.ref.axisrotate"><title>axisrotate</title>
		<indexterm><primary>commands</primary><secondary>axisrotate</secondary></indexterm>
		
		<para><emphasis>Syntax:</emphasis></para>
		<funcsynopsis>
			<funcprototype>
				<funcdef>void <function>axisrotate</function></funcdef>
				<paramdef>atom|int <parameter>i</parameter></paramdef>
				<paramdef>atom|int <parameter>i</parameter></paramdef>
				<paramdef>double <parameter>theta</parameter></paramdef>
			</funcprototype>
			<funcprototype>
				<funcdef>void <function>axisrotate</function></funcdef>
				<paramdef>atom|int <parameter>i</parameter></paramdef>
				<paramdef>atom|int <parameter>i</parameter></paramdef>
				<paramdef>double <parameter>theta</parameter></paramdef>
				<paramdef>double <parameter>ox</parameter></paramdef>
				<paramdef>double <parameter>oy</parameter></paramdef>
				<paramdef>double <parameter>oz</parameter></paramdef>
			</funcprototype>
			<funcprototype>
				<funcdef>void <function>axisrotate</function></funcdef>
				<paramdef>double <parameter></parameter></paramdef>
				<paramdef>double <parameter>y</parameter></paramdef>
				<paramdef>double <parameter>z</parameter></paramdef>
				<paramdef>double <parameter>theta</parameter></paramdef>
			</funcprototype>
			<funcprototype>
				<funcdef>void <function>axisrotate</function></funcdef>
				<paramdef>double <parameter></parameter></paramdef>
				<paramdef>double <parameter>y</parameter></paramdef>
				<paramdef>double <parameter>z</parameter></paramdef>
				<paramdef>double <parameter>theta</parameter></paramdef>
				<paramdef>double <parameter>ox</parameter></paramdef>
				<paramdef>double <parameter>oy</parameter></paramdef>
				<paramdef>double <parameter>oz</parameter></paramdef>
			</funcprototype>
		</funcsynopsis>
		<para>Rotate the current selection by an angle <emphasis>theta</emphasis> (in degrees) about an axis defined either by the vector between two atom IDs or the vector components provided. If supplied, the rotation is performed using the coordinate origin specified by <emphasis>ox</emphasis>, <emphasis>oy</emphasis>, and <emphasis>oz</emphasis>, otherwise {0,0,0} is assumed.</para>
		
		<para>For example:</para>
		<synopsis>
			axisrotate(4, 5, 90.0);
		</synopsis>
		<para>rotates the current selection 90 degrees about the axis formed by the vector between atom ids 4 and 5 (4-&gt;5).</para>
		<synopsis>
			axisrotate(0, 1, 0, -52.0);
		</synopsis>
		<para>rotates the current selection -52 degrees about the y-axis.</para>
		<synopsis>
			axisrotate(0, 1, 0, -52.0, 4.0, 4.0, 4.0);
		</synopsis>
		<para>rotates the current selection -52 degrees about the y-axis, but with the rotation centre at {4.0,4.0,4.0}.</para>
	
	</section>
	
	<section id="command.ref.centre"><title>centre</title>
		<indexterm><primary>commands</primary><secondary>centre</secondary></indexterm>
		
		<para><emphasis>Syntax:</emphasis></para>
		<funcsynopsis>
			<funcprototype>
				<funcdef>void <function>centre</function></funcdef>
				<paramdef>double <parameter>x</parameter></paramdef>
				<paramdef>double <parameter>y</parameter></paramdef>
				<paramdef>double <parameter>z</parameter></paramdef>
				<paramdef>bool <parameter>lockx = FALSE</parameter></paramdef>
				<paramdef>bool <parameter>locky = FALSE</parameter></paramdef>
				<paramdef>bool <parameter>lockz = FALSE</parameter></paramdef>
			</funcprototype>
		</funcsynopsis>
		<para>Centre the current atom selection at the specified coordinates. The three optional arguments <emphasis>lockx</emphasis>, <emphasis>locky</emphasis>, and <emphasis>lockz</emphasis> specify one or more atomic coordinates that are to remain unchanged during the transformation.</para>
		
		<para>For example:</para>
		<synopsis>
			centre(0.0, 0.0, 15.0);
		</synopsis>
		<para>centres the current selection at the coordinates (0 0 15).</para>
		
	</section>
	
	<section id="command.ref.matrixconvert"><title>matrixconvert</title>
		<indexterm><primary>commands</primary><secondary>matrixconvert</secondary></indexterm>
		
		<para><emphasis>Syntax:</emphasis></para>
		<funcsynopsis>
			<funcprototype>
				<funcdef>void <function>matrixconvert</function></funcdef>
				<paramdef>int <parameter>i_sx</parameter></paramdef>
				<paramdef>int <parameter>j_sx</parameter></paramdef>
				<paramdef>int <parameter>i_sy</parameter></paramdef>
				<paramdef>int <parameter>j_sy</parameter></paramdef>
				<paramdef>int <parameter>i_sz</parameter></paramdef>
				<paramdef>int <parameter>j_sz</parameter></paramdef>
				<paramdef>int <parameter>i_tx</parameter></paramdef>
				<paramdef>int <parameter>j_tx</parameter></paramdef>
				<paramdef>int <parameter>i_ty</parameter></paramdef>
				<paramdef>int <parameter>j_ty</parameter></paramdef>
				<paramdef>int <parameter>i_tz</parameter></paramdef>
				<paramdef>int <parameter>j_tz</parameter></paramdef>
			</funcprototype>
			<funcprototype>
				<funcdef>void <function>matrixconvert</function></funcdef>
				<paramdef>int <parameter>i_sx</parameter></paramdef>
				<paramdef>int <parameter>j_sx</parameter></paramdef>
				<paramdef>int <parameter>i_sy</parameter></paramdef>
				<paramdef>int <parameter>j_sy</parameter></paramdef>
				<paramdef>int <parameter>i_sz</parameter></paramdef>
				<paramdef>int <parameter>j_sz</parameter></paramdef>
				<paramdef>int <parameter>i_tx</parameter></paramdef>
				<paramdef>int <parameter>j_tx</parameter></paramdef>
				<paramdef>int <parameter>i_ty</parameter></paramdef>
				<paramdef>int <parameter>j_ty</parameter></paramdef>
				<paramdef>int <parameter>i_tz</parameter></paramdef>
				<paramdef>int <parameter>j_tz</parameter></paramdef>
				<paramdef>double <parameter>oy</parameter></paramdef>
				<paramdef>double <parameter>oz</parameter></paramdef>
				<paramdef>double <parameter>oz</parameter></paramdef>
			</funcprototype>
			<funcprototype>
				<funcdef>void <function>matrixconvert</function></funcdef>
				<paramdef>double <parameter>s_ax</parameter></paramdef>
				<paramdef>double <parameter>s_ay</parameter></paramdef>
				<paramdef>double <parameter>s_az</parameter></paramdef>
				<paramdef>double <parameter>s_bx</parameter></paramdef>
				<paramdef>double <parameter>s_by</parameter></paramdef>
				<paramdef>double <parameter>s_bz</parameter></paramdef>
				<paramdef>double <parameter>s_cx</parameter></paramdef>
				<paramdef>double <parameter>s_cy</parameter></paramdef>
				<paramdef>double <parameter>s_cz</parameter></paramdef>
				<paramdef>double <parameter>t_ax</parameter></paramdef>
				<paramdef>double <parameter>t_ay</parameter></paramdef>
				<paramdef>double <parameter>t_az</parameter></paramdef>
				<paramdef>double <parameter>t_bx</parameter></paramdef>
				<paramdef>double <parameter>t_by</parameter></paramdef>
				<paramdef>double <parameter>t_bz</parameter></paramdef>
				<paramdef>double <parameter>t_cx</parameter></paramdef>
				<paramdef>double <parameter>t_cy</parameter></paramdef>
				<paramdef>double <parameter>t_cz</parameter></paramdef>
			</funcprototype>
			<funcprototype>
				<funcdef>void <function>matrixconvert</function></funcdef>
				<paramdef>double <parameter>s_ax</parameter></paramdef>
				<paramdef>double <parameter>s_ay</parameter></paramdef>
				<paramdef>double <parameter>s_az</parameter></paramdef>
				<paramdef>double <parameter>s_bx</parameter></paramdef>
				<paramdef>double <parameter>s_by</parameter></paramdef>
				<paramdef>double <parameter>s_bz</parameter></paramdef>
				<paramdef>double <parameter>s_cx</parameter></paramdef>
				<paramdef>double <parameter>s_cy</parameter></paramdef>
				<paramdef>double <parameter>s_cz</parameter></paramdef>
				<paramdef>double <parameter>t_ax</parameter></paramdef>
				<paramdef>double <parameter>t_ay</parameter></paramdef>
				<paramdef>double <parameter>t_az</parameter></paramdef>
				<paramdef>double <parameter>t_bx</parameter></paramdef>
				<paramdef>double <parameter>t_by</parameter></paramdef>
				<paramdef>double <parameter>t_bz</parameter></paramdef>
				<paramdef>double <parameter>t_cx</parameter></paramdef>
				<paramdef>double <parameter>t_cy</parameter></paramdef>
				<paramdef>double <parameter>t_cz</parameter></paramdef>
				<paramdef>double <parameter>oy</parameter></paramdef>
				<paramdef>double <parameter>oz</parameter></paramdef>
				<paramdef>double <parameter>oz</parameter></paramdef>
			</funcprototype>
		</funcsynopsis>
		<para>From a defined frame of reference (i.e. a set of axes defining the spatial orientation), rotate the current selection from this frame into the second frame, using the coordinate origin supplied or {0,0,0} by default. In the first form six pairs of atom IDs define each matrix, with the vectors taken to be i-&gt;j in all cases (normalised to 1.0), and specifying the x, y, and z axes in turn. In the second, the matrices are given as two sets of nine numbers that define the vectors of the axes.</para>
		<para>When supplying atom IDs, the x axis is taken to be absolute, the y-axis is orthogonalised w.r.t. the x-axis, and the z-axis is taken as the cross product between the x and y axes. Note that providing the definition of the z axis is still important, however, since the vector cross product is adjusted (if necessary) to point along the same direction as this supplied z-axis. When supplying the complete matrices no orthogonalisation or normalisation of the axes is performed (permitting arbitrary scale and shear operations).</para>
		
		<para>For example:</para>
		<synopsis>
			matrixconvert(1, 2, 1, 3, 1, 4, 10, 11, 12, 13, 14, 15);
		</synopsis>
		<para>defines a the current selection's frame of reference as (in terms of atom IDs) X=(1-&gt;2), Y=(1-&gt;3), and Z=(1-&gt;4), which will be rotated such that it corresponds to the new frame of reference (again defined by atom IDs) X=(10-&gt;11), Y=(12-&gt;13), and Z=(14-&gt;15).</para>
		<synopsis>
			matrixconvert -0.7348 -0.0192 -0.678 0.4979 0.6635 -0.5584 0.4606 -0.7479 -0.47801 1 0 0 0 1 0 0 0 1 
		</synopsis>
		<para>defines a the current selection's frame of reference as the vectors X={-0.7348, -0.0192, -0.678}, Y={0.4979, 0.6635, -0.5584}, and Z={0.4606, -0.7479, -0.47801}, which will be rotated into the standard reference frame.</para>

		<note><title>See also:</title>
			<itemizedlist mark='opencircle'>
				<listitem>
					<para>The <link linkend="command.ref.reorient">reorient</link> command</para>
				</listitem>
			</itemizedlist>
		</note>

	</section>
	
	<section id="command.ref.matrixtransform"><title>matrixtransform</title>
		<indexterm><primary>commands</primary><secondary>matrixtransform</secondary></indexterm>
		
		<para><emphasis>Syntax:</emphasis></para>
		<funcsynopsis>
			<funcprototype>
				<funcdef>void <function>matrixtransform</function></funcdef>
				<paramdef>double <parameter>ax</parameter></paramdef>
				<paramdef>double <parameter>ay</parameter></paramdef>
				<paramdef>double <parameter>az</parameter></paramdef>
				<paramdef>double <parameter>bx</parameter></paramdef>
				<paramdef>double <parameter>by</parameter></paramdef>
				<paramdef>double <parameter>bz</parameter></paramdef>
				<paramdef>double <parameter>cx</parameter></paramdef>
				<paramdef>double <parameter>cy</parameter></paramdef>
				<paramdef>double <parameter>cz</parameter></paramdef>
			</funcprototype>
			<funcprototype>
				<funcdef>void <function>matrixtransform</function></funcdef>
				<paramdef>double <parameter>ax</parameter></paramdef>
				<paramdef>double <parameter>ay</parameter></paramdef>
				<paramdef>double <parameter>az</parameter></paramdef>
				<paramdef>double <parameter>bx</parameter></paramdef>
				<paramdef>double <parameter>by</parameter></paramdef>
				<paramdef>double <parameter>bz</parameter></paramdef>
				<paramdef>double <parameter>cx</parameter></paramdef>
				<paramdef>double <parameter>cy</parameter></paramdef>
				<paramdef>double <parameter>cz</parameter></paramdef>
				<paramdef>double <parameter>ox</parameter></paramdef>
				<paramdef>double <parameter>oy</parameter></paramdef>
				<paramdef>double <parameter>oz</parameter></paramdef>
			</funcprototype>
		</funcsynopsis>
		<para>Transform the current selection by applying the defined matrix to each coordinate, operating about the supplied origin (or {0,0,0} by default). No orthogonalisation or normalisation of the defined axes is performed.</para>
		
		<para>For example:</para>
		<synopsis>
			matrixtransform(1, 0, 0, 0, 1, 0, 0, 0, 1);
		</synopsis>
		<para>does absolutely nothing (multiplying by the identity matrix).</para>
		<synopsis>
			matrixtransform(1, 0, 0, 0, 1, 0, 0, 0, -1);
		</synopsis>
		<para>mirrors the current selection in the xy plane.</para>
		<synopsis>
			matrixtransform(0.5, 0, 0, 0, 0.5, 0, 0, 0, -1);
		</synopsis>
		<para>scales the x and y-coordinates of all selected atoms by 0.5, leaving the z coordinates intact.</para>
	
	</section>
	
	<section id="command.ref.reorient"><title>reorient</title>
		<indexterm><primary>commands</primary><secondary>reorient</secondary></indexterm>
		
		<para><emphasis>Syntax:</emphasis></para>
		<funcsynopsis>
			<funcprototype>
				<funcdef>void <function>reorient</function></funcdef>
				<paramdef>atom|int <parameter>i_sx</parameter></paramdef>
				<paramdef>atom|int <parameter>j_sx</parameter></paramdef>
				<paramdef>atom|int <parameter>i_sy</parameter></paramdef>
				<paramdef>atom|int <parameter>j_sy</parameter></paramdef>
				<paramdef>atom|int <parameter>i_sz</parameter></paramdef>
				<paramdef>atom|int <parameter>j_sz</parameter></paramdef>
				<paramdef>double <parameter>t_ax</parameter></paramdef>
				<paramdef>double <parameter>t_ay</parameter></paramdef>
				<paramdef>double <parameter>t_az</parameter></paramdef>
				<paramdef>double <parameter>t_bx</parameter></paramdef>
				<paramdef>double <parameter>t_by</parameter></paramdef>
				<paramdef>double <parameter>t_bz</parameter></paramdef>
				<paramdef>double <parameter>t_cx</parameter></paramdef>
				<paramdef>double <parameter>t_cy</parameter></paramdef>
				<paramdef>double <parameter>t_cz</parameter></paramdef>
			</funcprototype>
			<funcprototype>
				<funcdef>void <function>reorient</function></funcdef>
				<paramdef>atom|int <parameter>i_sx</parameter></paramdef>
				<paramdef>atom|int <parameter>j_sx</parameter></paramdef>
				<paramdef>atom|int <parameter>i_sy</parameter></paramdef>
				<paramdef>atom|int <parameter>j_sy</parameter></paramdef>
				<paramdef>atom|int <parameter>i_sz</parameter></paramdef>
				<paramdef>atom|int <parameter>j_sz</parameter></paramdef>
				<paramdef>double <parameter>t_ax</parameter></paramdef>
				<paramdef>double <parameter>t_ay</parameter></paramdef>
				<paramdef>double <parameter>t_az</parameter></paramdef>
				<paramdef>double <parameter>t_bx</parameter></paramdef>
				<paramdef>double <parameter>t_by</parameter></paramdef>
				<paramdef>double <parameter>t_bz</parameter></paramdef>
				<paramdef>double <parameter>t_cx</parameter></paramdef>
				<paramdef>double <parameter>t_cy</parameter></paramdef>
				<paramdef>double <parameter>t_cz</parameter></paramdef>
				<paramdef>double <parameter>ox</parameter></paramdef>
				<paramdef>double <parameter>oy</parameter></paramdef>
				<paramdef>double <parameter>oz</parameter></paramdef>
			</funcprototype>
		</funcsynopsis>
		<para>Operates in exactly the same manner as <link linkend="command.ref.matrixtransform">matrixtransform</link> except that the source matrix is defined from atoms (or their IDs) and the destination matrix is provided as a matrix.</para>
	
	</section>
	
	<section id="command.ref.translate"><title>translate</title>
		<indexterm><primary>commands</primary><secondary>translate</secondary></indexterm>
		
		<para><emphasis>Syntax:</emphasis></para>
		<funcsynopsis>
			<funcprototype>
				<funcdef>void <function>translate</function></funcdef>
				<paramdef>double <parameter>dx</parameter></paramdef>
				<paramdef>double <parameter>dy</parameter></paramdef>
				<paramdef>double <parameter>dz</parameter></paramdef>
			</funcprototype>
		</funcsynopsis>
		<para>Translates the current selection by the specified vector.</para>
		
		<para>For example:</para>
		<synopsis>
			translate(1, 0, 0);
		</synopsis>
		<para>moves the current selection 1 Angstrom along the x axis.</para>
	
	</section>
	
	<section id="command.ref.translateatom"><title>translateatom</title>
		
		<indexterm><primary>commands</primary><secondary>translateatom</secondary></indexterm>
		<para><emphasis>Syntax:</emphasis></para>
		<funcsynopsis>
			<funcprototype>
				<funcdef>void <function>translateatom</function></funcdef>
				<paramdef>double <parameter>dx</parameter></paramdef>
				<paramdef>double <parameter>dy</parameter></paramdef>
				<paramdef>double <parameter>dz</parameter></paramdef>
			</funcprototype>
		</funcsynopsis>
		<para>Translates the current atom by the specified vector.</para>
		
		<para>For example:</para>
		<synopsis>
			translateatom(1, 0, -1);
		</synopsis>
		<para>translates the current atom 1 Angstrom along x and -1 Angstrom along z.</para>
		
	</section>
	
	<section id="command.ref.translatecell"><title>translatecell</title>
		<indexterm><primary>commands</primary><secondary>translatecell</secondary></indexterm>
		
		<para><emphasis>Syntax:</emphasis></para>
		<funcsynopsis>
			<funcprototype>
				<funcdef>void <function>translatecell</function></funcdef>
				<paramdef>double <parameter>fracx</parameter></paramdef>
				<paramdef>double <parameter>fracy</parameter></paramdef>
				<paramdef>double <parameter>fracz</parameter></paramdef>
			</funcprototype>
		</funcsynopsis>
		<para>Translates the current selection by the fractional cell vectors specified. The model must have a unit cell for this command to work.</para>
		
		<para>For example:</para>
		<synopsis>
			translatecell(0, 0.5, 0);
		</synopsis>
		<para>translates the current selection by an amount equivalent to half of the current cell's B vector.</para>
	
	</section>
	
	<section id="command.ref.translateworld"><title>translateworld</title>
		<indexterm><primary>commands</primary><secondary>translateworld</secondary></indexterm>
		
		<para><emphasis>Syntax:</emphasis></para>
		<funcsynopsis>
			<funcprototype>
				<funcdef>void <function>translateworld</function></funcdef>
				<paramdef>double <parameter>dx</parameter></paramdef>
				<paramdef>double <parameter>dy</parameter></paramdef>
				<paramdef>double <parameter>dz</parameter></paramdef>
			</funcprototype>
		</funcsynopsis>
		<para>Translates the current selection by the Angstrom amounts specified, with the XY plane parallel to the monitor screen.</para>
		
		<para>For example:</para>
		<synopsis>
			translateworld(0, 0, 10);
		</synopsis>
		<para>translates the current selection 10 Angstroms 'into' the screen.</para>
	
	</section>
	
	<section id="command.ref.mirror"><title>mirror</title>
		<indexterm><primary>commands</primary><secondary>mirror</secondary></indexterm>
		
		<para><emphasis>Syntax:</emphasis></para>
		<funcsynopsis>
			<funcprototype>
				<funcdef>void <function>mirror</function></funcdef>
				<paramdef>string <parameter>axis</parameter></paramdef>
			</funcprototype>
		</funcsynopsis>
		<para>Mirror the current selection in the specified plane about its geometric centre.</para>
		
		<para>For example:</para>
		<synopsis>
			mirror(&quot;y&quot;);
		</synopsis>
		<para>mirrors the current selection about the y axis.</para>

	</section>
	
</section>