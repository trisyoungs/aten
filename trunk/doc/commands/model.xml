<section id="command.groups.model"><title>Model Commands</title>
	
	<para>Model creation and management.</para>

	<section id="command.ref.createatoms"><title>createatoms</title>
		<indexterm><primary>commands</primary><secondary>createatoms</secondary></indexterm>
		<para><emphasis>Syntax:</emphasis></para>
		<itemizedlist>
			<listitem>
				<para> createatoms ( )</para>
			</listitem>
		</itemizedlist>
		<para>Can be run when importing trajectory frames. Creates enough atoms in the current trajectory frame to match the parent model.</para>
		
		<para>For example:</para>
		<synopsis>
			createatoms();
		</synopsis>
	
	</section>
	
	<section id="command.ref.currentmodel"><title>currentmodel</title>
		<indexterm><primary>commands</primary><secondary>currentmodel</secondary></indexterm>
		<para><emphasis>Syntax:</emphasis></para>
		<itemizedlist>
			<listitem>
				<para> model currentmodel ( )</para>
			</listitem>
			<listitem>
				<para> model currentmodel ( int id )</para>
			</listitem>
			<listitem>
				<para> model currentmodel ( string name )</para>
			</listitem>
			<listitem>
				<para> model currentmodel ( model m )</para>
			</listitem>
		</itemizedlist>
		
		<para>Returns a reference to the current model (if no argument is given) or selects the supplied model and makes it the current model. The model may be selected either by name, by its integer position in the list of loaded models (i.e. 1 to N), or a model-type variable containing a valid model reference may be passed.</para>
		
		<para>For example:</para>
		<synopsis>
			currentmodel(4);
		</synopsis>
		<para>selects the fourth loaded model.</para>
		<synopsis>
			currentmodel(&quot;Protein coordinates&quot;)
		</synopsis>
		<para>selects the model named &quot;Protein coordinates&quot; (provided it exists)</para>
		<synopsis>
			model m1, m2;
			m1 = newmodel(&quot;Test model 1&quot;);
			m2 = newmodel(&quot;Test model 2&quot;);
			currentmodel(m1);
		</synopsis>
		<para>creates two models, storing references to each, and then re-selects the first one and makes it the current target again.</para>
		
	</section>
	
	<section id="command.ref.firstmodel"><title>firstmodel</title>
		<indexterm><primary>commands</primary><secondary>firstmodel</secondary></indexterm>
		<para><emphasis>Syntax:</emphasis></para>
		<itemizedlist>
			<listitem>
				<para> model firstmodel ( )</para>
			</listitem>
		</itemizedlist>
		<para>Makes the first loaded / created model the current model, and returns a reference to it.</para>
		
		<para>For example:</para>
		<synopsis>
			firstmodel();
		</synopsis>
		
	</section>
	
	<section id="command.ref.info"><title>info</title>
		<indexterm><primary>commands</primary><secondary>info</secondary></indexterm>
		<para><emphasis>Syntax:</emphasis></para>
		<itemizedlist>
			<listitem>
				<para> info ( )</para>
			</listitem>
		</itemizedlist>
		<para>Print out information on the current model and its atoms.</para>
		
		<para>For example:</para>
		<synopsis>
			info();
		</synopsis>
	
	</section>
	
	<section id="command.ref.finalisemodel"><title>finalisemodel</title>
		<indexterm><primary>commands</primary><secondary>finalisemodel</secondary></indexterm>
		<para><emphasis>Syntax:</emphasis></para>
		<itemizedlist>
			<listitem>
				<para> finalisemodel ( )</para>
			</listitem>
		</itemizedlist>
		<para>Performs various internal tasks after a model has been fully created within a filter. Should be called after all operations on each created model have finished.</para>
		
		<para>For example:</para>
		<synopsis>
			finalisemodel();
		</synopsis>
	
	</section>
	
	<section id="command.ref.getmodel"><title>getmodel</title>
		<indexterm><primary>commands</primary><secondary>getmodel</secondary></indexterm>
		<para><emphasis>Syntax:</emphasis></para>
		<itemizedlist>
			<listitem>
				<para> model getmodel ( string name )</para>
			</listitem>
			<listitem>
				<para> model getmodel ( int id )</para>
			</listitem>
			<listitem>
				<para> model getmodel ( model m )</para>
			</listitem>
		</itemizedlist>
		<para>Makes the named model, or the model id specified, or the referenced model the current model, returning a reference to that model. Equivalent to the ((Commands: Models|#currentmodel|currentmodel)) command, except that an argument specifying the new model <emphasis>must</emphasis> be provided.</para>
		
		<para>For example:</para>
		<synopsis>
			getmodel(&quot;alpha2&quot;);
		</synopsis>
		<para>sets the model named 'alpha2' as the current model.</para>
		
		<synopsis>
			model m = getmodel(5);
		</synopsis>
		<para>sets the fifth loaded model as the current model, and stores a reference to it in the variable <emphasis>m''.</para>
	
	</section>
	
	<section id="command.ref.lastmodel"><title>lastmodel</title>
		<indexterm><primary>commands</primary><secondary>lastmodel</secondary></indexterm>
		<para><emphasis>Syntax:</emphasis></para>
		<itemizedlist>
			<listitem>
				<para> model lastmodel ( )</para>
			</listitem>
		</itemizedlist>
		<para>Makes the last loaded / created model the current model, and returns a reference to it.</para>
		
		<para>For example:</para>
		<synopsis>
			model final = lastmodel();
		</synopsis>
	
	</section>
	
	<section id="command.ref.listmodels"><title>listmodels</title>
		<indexterm><primary>commands</primary><secondary>listmodels</secondary></indexterm>
		<para><emphasis>Syntax:</emphasis></para>
		<itemizedlist>
			<listitem>
				<para> listmodels ( )</para>
			</listitem>
		</itemizedlist>
		<para>Lists all models currently available.</para>
		
		<para>For example:</para>
		<synopsis>
			listmodels();
		</synopsis>
		
	</section>
	
	<section id="command.ref.loadmodel"><title>loadmodel</title>
		<indexterm><primary>commands</primary><secondary>loadmodel</secondary></indexterm>
		<para><emphasis>Syntax:</emphasis></para>
		<itemizedlist>
			<listitem>
				<para> int loadmodel ( string filename )</para>
			</listitem>
			<listitem>
				<para> int loadmodel ( string filename, string newname )</para>
			</listitem>
		</itemizedlist>
		<para>Load model(s) from the <emphasis>filename</emphasis> provided, changing the name of the the (last loaded) model to <emphasis>newname</emphasis> if one is specified. The last loaded model becomes the current model, and the number of models loaded is returned.</para>
		
		<para>For example:</para>
		<synopsis>
			loadmodel(&quot;/home/foo/coords/test.xyz&quot;, &quot;mymodel&quot;);
		</synopsis>
		<para>loads a model called 'test.xyz' and gives it the new name 'mymodel'.</para>
		
	</section>
	
	<section id="command.ref.modeltemplate"><title>modeltemplate</title>
		<indexterm><primary>commands</primary><secondary>modeltemplate</secondary></indexterm>
		<para><emphasis>Syntax:</emphasis></para>
		<itemizedlist>
			<listitem>
				<para> modeltemplate ( )</para>
			</listitem>
		</itemizedlist>
		<para>Can only be run when importing trajectory frames. Templates the atoms in the trajectory's parent model by creating an equal number of atoms in the target trajectory frame, and copying the element and style data. Positions, forces, and velocities are not copied from the parent model atoms.</para>
		
		<para>For example:</para>
		<synopsis>
			modeltemplate();
		</synopsis>
		
	</section>
	
	<section id="command.ref.newmodel"><title>newmodel</title>
		<indexterm><primary>commands</primary><secondary>newmodel</secondary></indexterm>
		<para><emphasis>Syntax:</emphasis></para>
		<itemizedlist>
			<listitem>
				<para> model newmodel ( string name )</para>
			</listitem>
		</itemizedlist>
		<para>Create a new model called <emphasis>name</emphasis> which becomes the current model, and return a reference to it.</para>
		
		<para>For example:</para>
		<synopsis>
			newmodel(&quot;emptymodel&quot;);
		</synopsis>
		<para>creates a new, empty model called 'emptymodel' and makes it current.</para>
		<synopsis>
			model c12 = newmodel(&quot;dodecane&quot;);
		</synopsis>
		<para>creates a new, empty model called 'dodecane', makes it current, and stores a reference to it in the variable <emphasis>c12''.</para>
		
	</section>
	
	<section id="command.ref.nextmodel"><title>nextmodel</title>
		<indexterm><primary>commands</primary><secondary>nextmodel</secondary></indexterm>
		<para><emphasis>Syntax:</emphasis></para>
		<itemizedlist>
			<listitem>
				<para> model nextmodel ( )</para>
			</listitem>
		</itemizedlist>
		<para>Skips to the next loaded model, makes it current, and returns a reference to it.</para>
		
		<para>For example:</para>
		<synopsis>
			model next = nextmodel();
		</synopsis>
		
	</section>
	
	<section id="command.ref.prevmodel"><title>prevmodel</title>
		<indexterm><primary>commands</primary><secondary>prevmodel</secondary></indexterm>
		<para><emphasis>Syntax:</emphasis></para>
		<itemizedlist>
			<listitem>
				<para> model prevmodel ( )</para>
			</listitem>
		</itemizedlist>
		<para>Skips to the previous loaded model, makes it current, and returns a reference to it.</para>
		
		<para>For example:</para>
		<synopsis>
			model prev = prevmodel();
		</synopsis>
		
	</section>
	
	<section id="command.ref.savemodel"><title>savemodel</title>
		<indexterm><primary>commands</primary><secondary>savemodel</secondary></indexterm>
		<para><emphasis>Syntax:</emphasis></para>
		<itemizedlist>
			<listitem>
				<para> int savemodel ( string format, string filename )</para>
			</listitem>
		</itemizedlist>
		<para>Save the current model in the  <emphasis>format</emphasis> given (which should correspond to a model export ((Filter)) nickname) to the <emphasis>filename</emphasis> specified. If the save was successful, an integer value of '1' is returned, otherwise '0'.</para>
		
		<para>For example:</para>
		<synopsis>
			int success = savemodel(&quot;xyz&quot;, &quot;/home/foo/newcoords/test.config&quot;);
		</synopsis>
		<para>saves the current model in xyz' format to the filename given.</para>
	
	</section>
	
	<section id="command.ref.setname"><title>setname</title>
		<indexterm><primary>commands</primary><secondary>setname</secondary></indexterm>
		<para><emphasis>Syntax:</emphasis></para>
		<itemizedlist>
			<listitem>
				<para> setname ( string name )</para>
			</listitem>
		</itemizedlist>
		<para>Sets the name of the current model.</para>
		
		<para>For example:</para>
		<synopsis>
			setname(&quot;panther)&quot;;
		</synopsis>
		<para>gives the current model the cool-sounding name of 'panther'! Ahem.</para>

	</section>
	
</section>