<section id="commands.groups.forcefield"><title>Forcefield Commands</title>
	
	<para>Forcefield management and manual term creation.</para>

	<section id="command.ref.angledef"><title>angledef</title>
		<indexterm><primary>commands</primary><secondary>angledef</secondary></indexterm>
		<para><emphasis>Syntax:</emphasis></para>
		<itemizedlist>
			<listitem>
				<para> angledef ( string form, string type_i, string type_j, string type_k, double data1, ... )</para>
			</listitem>
		</itemizedlist>
		<para>Add an angle definition to the current forcefield. <emphasis>form</emphasis> should correspond to one of the implemented ((Angle Functions)) names, while the three <emphasis>types</emphasis> refer to either type or equivalent names of defined atom types. Up to ten data parameters may be supplied.</para>
	
	</section>
	
	<section id="command.ref.bonddef"><title>bonddef</title>
		<indexterm><primary>commands</primary><secondary>bonddef</secondary></indexterm>
		<para><emphasis>Syntax:</emphasis></para>
		<itemizedlist>
			<listitem>
				<para> bonddef ( string form, string type_i, string type_j, double data1, ... )</para>
			</listitem>
		</itemizedlist>
		<para>Add a bond definition to the current forcefield. <emphasis>form</emphasis> should correspond to one of the implemented ((Bond Functions)) names, while the two <emphasis>types</emphasis> refer to either type or equivalent names of defined atom types. Up to ten data parameters may be supplied.</para>
	
	</section>
	
	<section id="command.ref.clearmap"><title>clearmap</title>
		<indexterm><primary>commands</primary><secondary>clearmap</secondary></indexterm>
		<para><emphasis>Syntax:</emphasis></para>
		<itemizedlist>
			<listitem>
				<para> clearmap ( )</para>
			</listitem>
		</itemizedlist>
		<para>Clear any manual typemap definitions.</para>
	
		<para>For example:</para>
		<synopsis>
			clearmap();
		</synopsis>
	
	</section>
	
	<section id="command.ref.clearexportmap"><title>clearexportmap</title>
		<indexterm><primary>commands</primary><secondary>clearexportmap</secondary></indexterm>
		<para><emphasis>Syntax:</emphasis></para>
		<itemizedlist>
			<listitem>
				<para> clearexportmap ( )</para>
			</listitem>
		</itemizedlist>
		<para>Clear any manual export typemap definitions.</para>
	
		<para>For example:</para>
		<synopsis>
			clearexportmap();
		</synopsis>
		
	</section>
	
	<section id="command.ref.clearexpression"><title>clearexpression</title>
		<indexterm><primary>commands</primary><secondary>clearexpression</secondary></indexterm>
		<para><emphasis>Syntax:</emphasis></para>
		<itemizedlist>
			<listitem>
				<para> clearexpression ( )</para>
			</listitem>
		</itemizedlist>
		<para>Removes any forcefield expression defined for the current model.</para>
		
		<para>For example:</para>
		<synopsis>
			clearexpression();
		</synopsis>
		
	</section>
	
	<section id="command.ref.createexpression"><title>createexpression</title>
		<indexterm><primary>commands</primary><secondary>createexpression</secondary></indexterm>
		<para><emphasis>Syntax:</emphasis></para>
		<itemizedlist>
			<listitem>
				<para> createexpression ( )</para>
			</listitem>
		</itemizedlist>
		<para>Creates a suitable energy description for the current model.</para>
		
		<para>For example:</para>
		<synopsis>
			createexpression();
		</synopsis>
		
	</section>
	
	<section id="command.ref.defaultff"><title>defaultff</title>
		<indexterm><primary>commands</primary><secondary>defaultff</secondary></indexterm>
		<para><emphasis>Syntax:</emphasis></para>
		<itemizedlist>
			<listitem>
				<para> defaultff ( string|forcefield ff )</para>
			</listitem>
		</itemizedlist>
		<para>Makes the supplied/named forcefield the default forcefield to use when none is associated.</para>
		
		<para>For example:</para>
		<synopsis>
			defaultff(&quot;oplsaa&quot;);
		</synopsis>
	
	</section>
	
	<section id="command.ref.equivalents"><title>equivalents</title>
		<indexterm><primary>commands</primary><secondary>equivalents</secondary></indexterm>
		<para><emphasis>Syntax:</emphasis></para>
		<itemizedlist>
			<listitem>
				<para> equivalents ( string name, string &quot;typenames...&quot; )</para>
			</listitem>
		</itemizedlist>
		<para>Define equivalent terms in the current forcefield. <emphasis>name</emphasis> is the new typename to which the list of quoted <emphasis>typenames</emphasis> are linked, for subsequent use in intramolecular term definitions. See ((Forcefield Files|#equivalents)) for more information.</para>
	
	</section>
	
	<section id="command.ref.exportmap"><title>exportmap</title>
		<indexterm><primary>commands</primary><secondary>exportmap</secondary></indexterm>
		<para><emphasis>Syntax:</emphasis></para>
		<itemizedlist>
			<listitem>
				<para> exportmap ( string &quot;typename=newname,...&quot; )</para>
			</listitem>
		</itemizedlist>
		<para>Set up manual mappings that convert atomtype names when expression are exported. Works in the opposite way to the 'map' command.</para>
		
		<para>For example:</para>
		<synopsis>
			map(&quot;CT=Ctet,N3=N&quot;);
		</synopsis>
		<para>converts the atomtype names 'CT' and 'N3' so that they appear as 'Ctet' and 'N' in any expression files written out.</para>
		
	</section>
	
	<section id="command.ref.finaliseff"><title>finaliseff</title>
		<indexterm><primary>commands</primary><secondary>finaliseff</secondary></indexterm>
		<para><emphasis>Syntax:</emphasis></para>
		<itemizedlist>
			<listitem>
				<para> finaliseff ( )</para>
			</listitem>
		</itemizedlist>
		<para>Perform necessary operations on the current forcefield once all data has been added. Must be called!</para>
	
	</section>
	
	<section id="command.ref.ffmodel"><title>ffmodel</title>
		<indexterm><primary>commands</primary><secondary>ffmodel</secondary></indexterm>
		<para><emphasis>Syntax:</emphasis></para>
		<itemizedlist>
			<listitem>
				<para> ffmodel ( )</para>
			</listitem>
		</itemizedlist>
		<para>Associates current forcefield to the current model.</para>
		
		<para>For example:</para>
		<synopsis>
			ffmodel();
		</synopsis>
		
	</section>
	
	<section id="command.ref.ffpattern"><title>ffpattern</title>
		<indexterm><primary>commands</primary><secondary>ffpattern</secondary></indexterm>
		<para><emphasis>Syntax:</emphasis></para>
		<itemizedlist>
			<listitem>
				<para> ffpattern ( string|int|pattern pattern )</para>
			</listitem>
		</itemizedlist>
		<para>Associates current forcefield to the current pattern, or one specified by either a reference, integer ID in the current model, or a pattern pointer.</para>
		
		<para>For example:</para>
		<synopsis>
			ffpattern();
		</synopsis>
		<para>associates the current forcefield to the current pattern.</para>
		<synopsis>
			ffpattern(&quot;bulk&quot;);
		</synopsis>
		<para>associates the current forcefield to a pattern named 'bulk' in the current model.</para>
		
	</section>
	
	<section id="command.ref.getff"><title>getff</title>
		<indexterm><primary>commands</primary><secondary>getff</secondary></indexterm>
		<para><emphasis>Syntax:</emphasis></para>
		<itemizedlist>
			<listitem>
				<para> forcefield getff ( string name )</para>
			</listitem>
			<listitem>
				<para> forcefield getff ( int id )</para>
			</listitem>
		</itemizedlist>
		<para>Select the named forcefield (or forcefield with the specified id) and make it current, returning a reference to it in the process.</para>
		
		<para>For example:</para>
		<synopsis>
			forcefield uff = getff(&quot;uff&quot;);
		</synopsis>
		<para>makes the loaded forcefield named 'uff' the current one, and stores a reference to it.</para>
		
	</section>
	
	<section id="command.ref.interdef"><title>interdef</title>
		<indexterm><primary>commands</primary><secondary>interdef</secondary></indexterm>
		<para><emphasis>Syntax:</emphasis></para>
		<itemizedlist>
			<listitem>
				<para> interdef  ( string form, int typeid, double charge, double data1, ... )</para>
			</listitem>
		</itemizedlist>
		<para>Add a new short-range data definition to a type in the current forcefield. <emphasis>form</emphasis> should correspond to one of the implemented ((VDW Functions)). Up to ten parameters for the VDW potential may be given.</para>
	
	</section>
	
	<section id="command.ref.loadff"><title>loadff</title>
		<indexterm><primary>commands</primary><secondary>loadff</secondary></indexterm>
		<para><emphasis>Syntax:</emphasis></para>
		<itemizedlist>
			<listitem>
				<para> forcefield loadff ( string file, string name )</para>
			</listitem>
		</itemizedlist>
		<para>Load a forcefield from <emphasis>file</emphasis> and reference it by <emphasis>name''. Becomes the current forcefield.</para>
		
		<para>For example:</para>
		<synopsis>
			loadff(&quot;/home/foo/complex.ff&quot;, &quot;waterff&quot;);
		</synopsis>
		<para>loads a forcefield called 'complex.ff' and names it 'waterff'.</para>
	
	</section>
	
	<section id="command.ref.map"><title>map</title>
		<indexterm><primary>commands</primary><secondary>map</secondary></indexterm>
		<para><emphasis>Syntax:</emphasis></para>
		<itemizedlist>
			<listitem>
				<para> map ( string &quot;name=element,...&quot; )</para>
			</listitem>
		</itemizedlist>
		<para>Set up manual typename mappings for atom names that do not readily correspond to element symbols, forcefield types etc. All atoms that are subsequently created using <emphasis>name</emphasis> as the element are automatically converted to the corresponding element.</para>
		
		<para>For example:</para>
		<synopsis>
			map(&quot;CT1=C,CT2=C&quot;);
		</synopsis>
		<para>converts atoms with names 'CT1' and 'CT2' to carbon.</para>
		
	</section>
	
	<section id="command.ref.newff"><title>newff</title>
		<indexterm><primary>commands</primary><secondary>newff</secondary></indexterm>
		<para><emphasis>Syntax:</emphasis></para>
		<itemizedlist>
			<listitem>
				<para> forcefield newff ( string name )</para>
			</listitem>
		</itemizedlist>
		<para>Create a new, empty forcefield with the given <emphasis>name</emphasis> and make it current. Returns a reference to the new forcefield.</para>
		
		<para>For example:</para>
		<synopsis>
			forcefield ff = newff(&quot;testff&quot;);
		</synopsis>
	
	</section>
	
	<section id="command.ref.printsetup"><title>printsetup</title>
		<indexterm><primary>commands</primary><secondary>printsetup</secondary></indexterm>
		<para><emphasis>Syntax:</emphasis></para>
		<itemizedlist>
			<listitem>
				<para> printsetup ( )</para>
			</listitem>
		</itemizedlist>
		<para>Prints the current expression setup.</para>
		
		<para>For example:</para>
		<synopsis>
			printsetup();
		</synopsis>
		
	</section>
	
	<section id="command.ref.recreateexpression"><title>recreateexpression</title>
		<indexterm><primary>commands</primary><secondary>recreateexpression</secondary></indexterm>
		<para><emphasis>Syntax:</emphasis></para>
		<itemizedlist>
			<listitem>
				<para> recreateexpression ( )</para>
			</listitem>
		</itemizedlist>
		<para>Delete and recreate a suitable energy description for the current model.</para>
		
		<para>For example:</para>
		<synopsis>
			recreateexpression();
		</synopsis>
		
	</section>
	
	<section id="command.ref.rules"><title>rules</title>
		<indexterm><primary>commands</primary><secondary>rules</secondary></indexterm>
		<para><emphasis>Syntax:</emphasis></para>
		<itemizedlist>
			<listitem>
				<para> rules ( string ruleset )</para>
			</listitem>
		</itemizedlist>
		<para>Set rules set to use for parameter generation in the current forcefield. See ((Forcefield Files|#Rule-based Forcefields)).</para>
		<para><emphasis>Note: The implementation of rule-based forcefields will change in a future release.</emphasis></para>
	
	</section>
	
	<section id="command.ref.saveexpression"><title>saveexpression</title>
		<indexterm><primary>commands</primary><secondary>saveexpression</secondary></indexterm>
		<para><emphasis>Syntax:</emphasis></para>
		<itemizedlist>
			<listitem>
				<para> int saveexpression ( string filter, string filename )</para>
			</listitem>
		</itemizedlist>
		<para>Export the forcefield expression for the current model in the format determined by the <emphasis>filter</emphasis> nickname, to the <emphasis>filename</emphasis> specified. Return value is '1' for successful write, or '0' otherwise.</para>
		
		<para>For example:</para>
		<synopsis>
			saveexpression(&quot;dlpoly&quot;, &quot;data.FIELD&quot;);
		</synopsis>
		
	</section>
	
	<section id="command.ref.torsiondef"><title>torsiondef</title>
		<indexterm><primary>commands</primary><secondary>torsiondef</secondary></indexterm>
		<para><emphasis>Syntax:</emphasis></para>
		<itemizedlist>
			<listitem>
				<para> torsiondef ( string form, string type_i, string type_j, string type_k, string type_l, double data1, ...)</para>
			</listitem>
		</itemizedlist>
		<para>Add a torsion definition to the current forcefield. <emphasis>form</emphasis> should correspond to one of the implemented ((Torsion Functions)), while the four <emphasis>types</emphasis> refer to either type or equivalent names of defined atom types. Up to ten real-valued parameter values for the function may be provided.</para>
	
	</section>
	
	<section id="command.ref.typedef"><title>typedef</title>
		<indexterm><primary>commands</primary><secondary>typedef</secondary></indexterm>
		<para><emphasis>Syntax:</emphasis></para>
		<itemizedlist>
			<listitem>
				<para> int typedef ( int typeid, string name, string element, string type )</para>
			</listitem>
			<listitem>
				<para> int typedef ( int typeid, string name, string element, string type, string description )</para>
			</listitem>
		</itemizedlist>
		<para>Add a new atom type definition to the current forcefield, with the identifying <emphasis>typeid''. Other arguments are described in more detail in ((Forcefield Files|#Keyword: types)). The command returns '1' if the model was typed successfully or '0' otherwise.</para>
		
		<para>For example:</para>
		<synopsis>
			typedef(101,&quot;CT&quot;, C, &quot;nbonds=4&quot;, &quot;Standard tetrahedral carbon&quot;);
		</synopsis>
		<para>creates a new simple type for a carbon atom with four bonds.</para>
		
	</section>
	
	<section id="command.ref.typemodel"><title>typemodel</title>
		<indexterm><primary>commands</primary><secondary>typemodel</secondary></indexterm>
		<para><emphasis>Syntax:</emphasis></para>
		<itemizedlist>
			<listitem>
				<para> typemodel ( )</para>
			</listitem>
		</itemizedlist>
		<para>Perform atom typing on the current model.</para>
		
		<para>For example:</para>
		<synopsis>
			typemodel();
		</synopsis>
	
	</section>
	
	<section id="command.ref.typetest"><title>typetest</title>
		<indexterm><primary>commands</primary><secondary>typetest</secondary></indexterm>
		<para><emphasis>Syntax:</emphasis></para>
		<itemizedlist>
			<listitem>
				<para> int typetest ( int typeid, atom|int id )</para>
			</listitem>
		</itemizedlist>
		<para>Test the forcefield atomtype <emphasis>typeid</emphasis> on the atom specified, returning the type score of the match (zero indicating no match).</para>
		
		<para>For example:</para>
		<synopsis>
			typetest(112,10);
		</synopsis>
		<para>tests typeid 112 on the tenth atom in the model.</para>
		
	</section>
	
	<section id="command.ref.units"><title>units</title>
		<indexterm><primary>commands</primary><secondary>units</secondary></indexterm>
		<para><emphasis>Syntax:</emphasis></para>
		<itemizedlist>
			<listitem>
				<para> units ( string unit )</para>
			</listitem>
		</itemizedlist>
		<para>Sets the units in which energetic parameters are given for the current forcefield. For a list of available units see ((Energy Units)).</para>
	
	</section>
	
	<section id="command.ref.vdw"><title>vdw</title>
		<indexterm><primary>commands</primary><secondary>vdw</secondary></indexterm>
		<para><emphasis>Syntax:</emphasis></para>
		<itemizedlist>
			<listitem>
				<para> vdw ( bool calculate )</para>
			</listitem>
		</itemizedlist>
		<para>Controls calculation of van der Waals terms in energy / force calculations (on by default).</para>
		
		<para>For example:</para>
		<synopsis>
			vdw(&quot;off&quot;);
		</synopsis>
		<para>turns van der Waals energy / force calculation off.</para>
		<synopsis>
			vdw(TRUE);
		</synopsis>
		<para>turns van der Waals energy / force calculation on.</para>

	</section>
	
</section>