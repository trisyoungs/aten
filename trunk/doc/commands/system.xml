<section id="commands.groups.system"><title>System Commands</title>
	
	<para>System commands for controlling debug output, instantiation of the GUI, and exiting from the program.</para>

	<section id="command.ref.debug"><title>debug</title>
		<indexterm><primary>commands</primary><secondary>debug</secondary></indexterm>
		<para><emphasis>Syntax:</emphasis></para>
		<itemizedlist>
			<listitem>
				<para> debug ( string ''type'' )</para>
			</listitem>
		</itemizedlist>
		<para>Toggles debug output from various parts of the code. A full list of valid types is given in ((Output Types)).</para>
		
		<para>For example:</para>
		<synopsis>
			debug(&quot;parse&quot;);
		</synopsis>
	
	</section>
	
	<section id="command.ref.getenv"><title>getenv</title>
		<indexterm><primary>commands</primary><secondary>getenv</secondary></indexterm>
		<para><emphasis>Syntax:</emphasis></para>
		<itemizedlist>
			<listitem>
				<para> string getenv ( string ''variable'' )</para>
			</listitem>
		</itemizedlist>
		<para>Retrieves the contents of the named environment variable so that transfer of useful quantities can be made to Aten through a shell.</para>
		
		<para>For example:</para>
		<synopsis>
			string s = getenv(&quot;HOSTNAME&quot;);
		</synopsis>
		<para>gets the name of the host Aten is running on (although what you would then usefully do with it I don't know).</para>
		<para>Better example(s) can be found in the (([http://www.projectaten.net/tiki-view_articles.php?topic=2|Examples] section.</para>
	
	</section>
	
	<section id="command.ref.getenvf"><title>getenvf</title>
		<indexterm><primary>commands</primary><secondary>getenvf</secondary></indexterm>
		<para><emphasis>Syntax:</emphasis></para>
		<itemizedlist>
			<listitem>
				<para> double getenvf ( string ''variable'' )</para>
			</listitem>
		</itemizedlist>
		<para>Retrieves the contents of the named environment variable, converting it to a floating-point (double) value in the process.</para>
			
		<para>For example:</para>
		<synopsis>
			double d = getenvf(&quot;num&quot;);
		</synopsis>
		<para>gets the shell variable 'num' as a real number.
		
	</section>
	
	<section id="command.ref.getenvi"><title>getenvi</title>
		<indexterm><primary>commands</primary><secondary>getenvi</secondary></indexterm>
		<para><emphasis>Syntax:</emphasis></para>
		<itemizedlist>
			<listitem>
				<para> integer getenvf ( string ''variable'' )</para>
			</listitem>
		</itemizedlist>
		<para>Retrieves the contents of the named environment variable, converting it to an integer value in the process.</para>
		
		<para>For example:</para>
		<synopsis>
			int i = getenvi(&quot;count&quot;);
		</synopsis>
		<para>gets the shell variable 'count' as an integer number.
		
	</section>
	
	<section id="command.ref.gui"><title>gui</title>
		<indexterm><primary>commands</primary><secondary>gui</secondary></indexterm>
		<para><emphasis>Syntax:</emphasis></para>
		<itemizedlist>
			<listitem>
				<para> gui ( )</para>
			</listitem>
		</itemizedlist>
		<para>Starts the GUI (e.g. from a script), if it isn't already running.</para>
		
		<para>For example:</para>
		<synopsis>
			gui();
		</synopsis>

	</section>
	
	<section id="command.ref.help"><title>help</title>
		<indexterm><primary>commands</primary><secondary>help</secondary></indexterm>
		<para><emphasis>Syntax:</emphasis></para>
		<itemizedlist>
			<listitem>
				<para> help ''command''</para>
			</listitem>
		</itemizedlist>
		<para>Provide short help on the supplied ''command''.</para>
		
		<para>For example:</para>
		<synopsis>
			help cellaxes;
		</synopsis>
	
	</section>
	
	<section id="command.ref.searchcommands"><title>searchcommands</title>
		<indexterm><primary>commands</primary><secondary>searchcommands</secondary></indexterm>
		<para><emphasis>Syntax:</emphasis></para>
		<itemizedlist>
			<listitem>
				<para> searchcommands ( string ''srch'' )</para>
			</listitem>
		</itemizedlist>
		<para>Search all available commands for the (partial) command name specified.</para>
	
	</section>
	
	<section id="command.ref.seed"><title>seed</title>
		<indexterm><primary>commands</primary><secondary>seed</secondary></indexterm>
		<para><emphasis>Syntax:</emphasis></para>
		<itemizedlist>
			<listitem>
				<para> seed ( int ''n'' )</para>
			</listitem>
		</itemizedlist>
		<para>Sets the random seed.</para>
	
		<para>For example:</para>
		<synopsis>
			seed(3242638);
		</synopsis>
		
	</section>
	
	<section id="command.ref.quit"><title>quit</title>
		<indexterm><primary>commands</primary><secondary>quit</secondary></indexterm>
		<para><emphasis>Syntax:</emphasis></para>
		<itemizedlist>
			<listitem>
				<para> quit ( )</para>
			</listitem>
		</itemizedlist>
		<para>Quits out of the program.</para>
		
		<para>For example:</para>
		<synopsis>
			quit();
		</synopsis>
		
	</section>
	
</section>