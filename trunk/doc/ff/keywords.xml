<section id="ff.ref"><title>Keyword Reference</title>
	
	<section id="ff.keywords"><title>General Keywords</title>
		<indexterm zone="ff.keywords"><primary>forcefields</primary><secondary>general keywords</secondary></indexterm>
		
		<para>General keywords are simple keywords that take single items of data as arguments.</para>
		
		<section id="ff.ref.name"><title>name</title>
			<indexterm><primary>forcefield</primary><secondary>keywords</secondary><tertiary>name</tertiary></indexterm>
			<para><emphasis>Syntax:</emphasis></para>
			<itemizedlist>
				<listitem>
					<para> name &quot;<emphasis>name of forcefield</emphasis>&quot;</para>
				</listitem>
			</itemizedlist>
			<para>Sets the name of the forcefield as it appears in the program.</para>

			<para>For example:</para>
			<synopsis>
				name "Test Forcefield"
			</synopsis>
			<para>sets the name of the forcefield to "Test Forcefield".</para>
				
		</section>
	
		<section id="ff.ref.units"><title>units</title>
			<indexterm><primary>forcefield</primary><secondary>keywords</secondary><tertiary>units</tertiary></indexterm>
			<para><emphasis>Syntax:</emphasis></para>
			<itemizedlist>
				<listitem>
					<para> units <emphasis>energyunit</emphasis></para>
				</listitem>
			</itemizedlist>
			<para>Specifies the units of energy used for energetic forcefield parameters. Any energetic parameters specified in the forcefield are converted from the units specified here into the internal units of energy once loading of the forcefield has completed.</para>
			
			<para>For example:</para>
			<synopsis>
				units kcal
			</synopsis>
			<para>indicates that any energetic values supplied in the forcefield are in kilocalories per mole.</para>
				
			<note><title>See also:</title>
				<itemizedlist mark='opencircle'>
					<listitem>
						<para><link linkend="enums.energyunits">Energy units</link> for a list of allowable units</para>
					</listitem>
				</itemizedlist>
			</note>

		</section>
	
	</section>
	
	<section id="ff.blocks"><title>Block Keywords</title>
		
		<para>All lists of terms, types, and extraneous data are specified in the form of 'blocks'. Each keyword in this section marks the start of block, and must at some point be terminated by an 'end' keyword. In addition each keyword may take one or more (optional) values.</para>
		
		<section id="ff.ref.angles"><title>Angles</title>
			<indexterm><primary>forcefield</primary><secondary>keywords</secondary><tertiary>angles</tertiary></indexterm>
			
			<para><emphasis>Syntax:</emphasis></para>
			<itemizedlist>
				<listitem>
					<para>angles <emphasis>form</emphasis></para>
				</listitem>
			</itemizedlist>
			
			<para>Definitions of intramolecular angle terms are given in 'angles' blocks. Multiple 'angles' blocks may exist, each defining a subset of terms, and each possessing a different <link linkend="ff.forms.angle">functional form</link>.</para>
			
			<para>The 'angle' keyword begins a block of intermolecular parameter definitions, and the single argument <emphasis>form</emphasis> should specify the <link linkend="ff.forms.angle">functional form</link> of the interactions.</para> 
		
			<para>The format of lines within the 'angles' block is as follows:</para>
			
			<synopsis>
				<emphasis>typename_i</emphasis>  <emphasis>typename_j</emphasis>  <emphasis>typename_k</emphasis>  <emphasis>data1</emphasis> [<emphasis>data2</emphasis>...]
			</synopsis>
<!-- 			<XXXX Does atomLabel need to still use power(2,n)?</XXXX> -->
			
			<para>The three ''typenames'' identify the particular angle to which the parameters are relevant. Note that typenames given for an angle ''i''-''j''-''k'' will also match an angle ''k''-''j''-''i''. Data parameters should be provided in the required order for the specified <link linkend="ff.forms.angle">form</link>.</para>
			
			<para>For example:</para>
			<synopsis>
				angles harmonic
				HT  CT  HT   80.0   109.4
				end
			</synopsis>
			<para>provides parameters for an H-C-H angle using the harmonic potential.</para>
			
		</section>

		<section id="ff.ref.bonds"><title>Bonds</title>
			<indexterm><primary>forcefield</primary><secondary>keywords</secondary><tertiary>bonds</tertiary></indexterm>
			
			<para><emphasis>Syntax:</emphasis></para>
			<itemizedlist>
				<listitem>
					<para>bonds <emphasis>form</emphasis></para>
				</listitem>
			</itemizedlist>

			<para>Definitions of intramolecular bond terms are given in 'bonds' blocks. Multiple 'bonds' blocks may exist, each defining a subset of terms, and each possessing a different <link linkend="ff.forms.bond">functional form</link>.</para>
			
			<para>The 'bond' keyword begins a block of intermolecular parameter definitions, and the single argument <emphasis>form</emphasis> should specify the <link linkend="ff.forms.bond">functional form</link> of the interactions.</para> 
			
			<para>The format of lines within the 'bonds' block is as follows:</para>
			
			<synopsis>
				<emphasis>typename_i</emphasis>  <emphasis>typename_j</emphasis>  <emphasis>data1</emphasis> [<emphasis>data2</emphasis>...]
			</synopsis>
			
			<para>The two ''typenames'' identify the particular bond to which the parameters are relevant. Note that typenames given for a bond ''i''-''j'' will also match a bond ''j''-''i''. Data parameters should be provided in the required order for the specified <link linkend="ff.forms.bond">form</link>.</para>
			
			<para>For example:</para>
			<synopsis>
				bonds constraint
				HT  CT  4000.0  1.06
				end
			</synopsis>
			<para>provides parameters for an H-C bond using the constraint potential.</para>

		</section>
		
		<section id="ff.ref.equivalents"><title>Equivalents</title>
			<indexterm><primary>forcefield</primary><secondary>keywords</secondary><tertiary>equivalents</tertiary></indexterm>
			
			<para><emphasis>Syntax:</emphasis></para>
			<itemizedlist>
				<listitem>
					<para>equivalents</para>
				</listitem>
			</itemizedlist>
			
			<para>In forcefields, the most detailed information provided is typically the short-range intermolecular and charge parameters, with different values (or at least different charges) given to each individual atom type. Usually, intramolecular terms are more general and don't depend so much on the exact atom type. For example, given a tetrahedral carbon CT and three different aliphatic hydrogens H1, H2, and H3, the bond between the carbon and any of the three hydrogen types will likely be the same with respect to the force constant, equilibrium distance etc.</para>
			
			<para>So, the forcefield will have to contain three intramolecular bond definitions covering CT-H1, CT-H2, and CT-H3, each having the same parameters, right? Not necessarily. While this is perfectly acceptable, for large forcefields the number of redundant terms may become quite large, and even for small forcefields with only a handful of terms, adding in duplicate data might irk the more obsessive amongst us. On these occasions, atomtype 'equivalents' can be defined, which effectively link a set of atomtypes to a single identifying name that can then be used in any intramolecular parameter definitions.</para>
			
			<para>The format of individual lines in 'equivalents' block is:</para>
			
			<synopsis>
				<emphasis>alias</emphasis>  <emphasis>typename</emphasis>  [<emphasis>typename ...</emphasis>]
			</synopsis>
			
			<para>In the waffle above, aliasing the three hydrogens H1, H2, and H3 to a single typename 'H1' can be done as follows:</para>
			
			<synopsis>
				equivalents
				H1   H1  H2  H3
				end
			</synopsis>
			<para>Note that the aliased name does not have to be an atomtype name already defined in the <link linkend="ff.keywords.types">types</link> section.</para>
		
		</section>

		<section id="ff.ref.inter"><title>Inter</title>
			<indexterm><primary>forcefield</primary><secondary>keywords</secondary><tertiary>inter</tertiary></indexterm>
			<para><emphasis>Syntax:</emphasis></para>
			<itemizedlist>
				<listitem>
					<para>inter <emphasis>form</emphasis></para>
				</listitem>
			</itemizedlist>
			<para>Intermolecular van der Waals parameters and the charge associated with each atom type belong in the 'inter' section. There may be multiple 'inter' sections within the same forcefield file, but parameters for an individual atomtype may be defined only once.</para>
			
			<para>The 'inter' keyword begins a block of intermolecular parameter definitions, and the single argument <emphasis>form</emphasis> should specify the <link linkend="ff.forms.vdw">functional form</link> of the intermolecular interactions.</para>
			
			<para>The format of individual lines within the block is as follows:</para>
			
			<synopsis>
				<emphasis>typeid</emphasis>  <emphasis>typename</emphasis>  <emphasis>q</emphasis>  <emphasis>data1</emphasis> [<emphasis>data2</emphasis> ...]
			</synopsis>
			
			<para>The ''form'' parameter specified the form of short-range interaction potential to use for each of the following atomtypes. ''typeid'' and ''typename'' refer to a single type defined in the 'types' section, ''q'' is the atomic charge of this atomtype, and then follows the data describing the interaction. The order of the values given should correspond to the order of parameters expected for the specified <link linkend="ff.forms.vdw">functional form</link>.</para>
			
			<para>For example, the Lennard-Jones potential takes two data ''epsilon'' and ''sigma'' in that order. For a chloride atomtype with ID 24, if ''epsilon'' = 0.5, ''sigma'' equals 3.0, and the charge on the atomtype is -1 ''e'', the corresponding entry in the 'inter' block will be:</para>
			
			<synopsis>
				24   Cl    -1.0   0.5   3.0
			</synopsis>
			
			<para>Some functional forms have default values for some parameters used in the functional form, and need not be specified (if there are any, these will be detailed in the <link linkend="ff.forms.vdw">functional form</link> chapter). For this reason, it is important not to add any unnecessary extra data to the entries in the 'inter' block, since this may overwrite a default parameter that results in literal chaos.</para>
			
		</section>

		<section id="ff.ref.torsions"><title>Torsions</title>
			<indexterm><primary>forcefield</primary><secondary>keywords</secondary><tertiary>torsions</tertiary></indexterm>
			
			<para><emphasis>Syntax:</emphasis></para>
			<itemizedlist>
				<listitem>
					<para>torsions <emphasis>form</emphasis> [<emphasis>escale</emphasis> <emphasis>vscale</emphasis>] </para>
				</listitem>
			</itemizedlist>

			<para>Definitions of intramolecular torsion terms are given in 'torsions' blocks. Multiple 'torsions' blocks may exist, each defining a subset of terms, and each possessing a different <link linkend="ff.forms.torsion">functional form</link>.</para>
			
			<para>The 'torsion' keyword begins a block of intermolecular parameter definitions, and the first (mandatory) argument <emphasis>form</emphasis> should specify the <link linkend="ff.forms.torsion">functional form</link> of the interactions. For torsions the electrostatic and VDW 1-4 interactions (i.e. those between atoms 1 [i] and 4 [l]) are scaled by some factor between 0.0 and 1.0. The optional <emphasis>escale</emphasis> and <emphasis>vscale</emphasis> arguments specify these scaling factors - if they are not provided, they both default to 0.5.</para>
			
			<para>The format of lines within the 'torsions' block is as follows:</para>
			
			<synopsis>
				<emphasis>typename_i</emphasis>  <emphasis>typename_j</emphasis>  <emphasis>typename_k</emphasis>  <emphasis>typename_l</emphasis>  <emphasis>data1</emphasis> [<emphasis>data2</emphasis>...]
			</synopsis>
			
			<para>The four ''typenames'' identify the particular torsion to which the parameters are relevant. Note that typenames given for a torsion ''i''-''j''-''k''-''l'' will also match a torsion ''l''-''k''-''j''-''i''. Data parameters should be provided in the required order for the specified <link linkend="ff.forms.torsion">form</link>.</para>
			
			<para>For example:</para>
			<synopsis>
				torsions cos
				HT  CT  OC  HO   3.0   5.0   0.0
				end
			</synopsis>
			<para>provides parameters for an H-C-O-H torsion using the cosine potential.</para>
			<synopsis>
				torsions cos3 0.8333333 0.25
				CT  CT  CT  O1   1.0  -2.0   0.0
				CT  CT  CT  O2   0.5  -1.4   1.0
				end
			</synopsis>
			<para>defines two C-C-C-O torsions of the triple cosine form, and with custom scale factors.</para>

		</section>

		<section id="ff.ref.types"><title>Types</title>
			<indexterm><primary>forcefield</primary><secondary>keywords</secondary><tertiary>types</tertiary></indexterm>
			<para><emphasis>Syntax:</emphasis></para>
			<itemizedlist>
				<listitem>
					<para>types</para>
				</listitem>
			</itemizedlist>
			<para>The core of the forcefield file is the types section, listing the ids, names, and elements of the different atom types present in the forcefield, as well as a description telling Aten how to recognise them.</para>
			
			<para>The format of each line in the 'types' block is as follows:</para>
			<synopsis>
				<emphasis>typeid</emphasis>  <emphasis>typename</emphasis>  <emphasis>element</emphasis>  <emphasis>NETA</emphasis>  [<emphasis>description</emphasis>]
			</synopsis>
			
			<para>The ''id'' is an integer number used to identify the type. It should be positive, and must be unique amongst all those defined in a single forcefield. ''typename'' is the actual name of the atom type ('OW', 'C1', 'N_ar' etc.), and is referred to in the other sections of the forcefield file, and ''element'' is the type's element symbol as found in the periodic table ('O', 'C', 'N', etc.). The ''type description'' defining how Aten should recognise this particular type follows (in quotes if necessary), and then optionally a short text describing the type (which appears in lists within the program to help identify particular types). Atom types may be defined over multiple 'types' blocks within the same file if necessary, i.e. more than one 'types' block may exist, but all type IDs must be unique over all such blocks.</para>
			
			<para>For example:</para>
			<synopsis>
				types
				35  CT  C  &quot;nbonds=4&quot;  &quot;Simple tetrahedral carbon&quot;
				end
			</synopsis>
			<para>describes a bog-standard tetrahedral carbon called 'CT', and assigns it an ID of 35.</para>
			
			<note><title>See also:</title>
				<itemizedlist mark='opencircle'>
					<listitem>
						<para><link linkend="ff.typing.overview">Atom typing</link> for an overview of atom typing</para>
					</listitem>
					<listitem>
						<para>The <link linkend="ff.neta">NETA reference</link> for a description of the atom typing language</para>
					</listitem>
				</itemizedlist>
			</note>
			
		</section>

		<section id="ff.ref.uatypes"><title>UATypes</title>
			<indexterm><primary>forcefield</primary><secondary>keywords</secondary><tertiary>uatypes</tertiary></indexterm>
			<para><emphasis>Syntax:</emphasis></para>
			<itemizedlist>
				<listitem>
					<para>uatypes</para>
				</listitem>
			</itemizedlist>
			<para>The 'uatypes' section contains exactly the same information as the '<link linkend="ff.keywords.types">types</link>' block except that a mass must also be provided. In the '<link linkend="ff.keywords.types">types</link>' block it is assumed that the character element of the type also implicitly defines the mass (as would be expected). In the case of united-atom forcefields, this is not necessarily the case. Thus, the 'uatypes' block allows a mass to be associated in order to account for the light atoms subsumed into the heavy atom's mass. This information can be accesses through the 'mass' member of the <link linkend="command.types.ffatom">ffatom</link> variable type.</para>
			
			<para>The format of each line in the 'uatypes' block is as follows:</para>
			<synopsis>
				<emphasis>typeid</emphasis>  <emphasis>typename</emphasis>  <emphasis>element</emphasis>  <emphasis>mass</emphasis>  <emphasis>NETA</emphasis>  [<emphasis>description</emphasis>]
			</synopsis>
			
			<para>The ''id'' is an integer number used to identify the type. It should be positive, and must be unique amongst all those defined in a single forcefield. ''typename'' is the actual name of the atom type ('OW', 'C1', 'N_ar' etc.), and is referred to in the other sections of the forcefield file, and ''element'' is the type's element symbol as found in the periodic table ('O', 'C', 'N', etc.). The ''type description'' defining how Aten should recognise this particular type follows in quotes, and then optionally a short text describing the type (which appears in lists within the program to help identify particular types). The ''mass'' is the united atom mass of the type (i.e. the sum of heavy and light atom masses). Atom types may be defined over multiple 'types' blocks within the same file if necessary, i.e. more than one 'types' block may exist, but all type IDs must be unique over all such blocks.</para>
			
			<para>For example:</para>
			<synopsis>
				uatypes
				10  CH2  C  14.0265  &quot;nbonds=2,nh=0&quot;  &quot;United atom methylene carbon&quot;
				end
			</synopsis>
			<para>describes a united-atom methylene carbon, with mass of 14.0265 (C+2H).</para>
			
			<note><title>See also:</title>
				<itemizedlist mark='opencircle'>
					<listitem>
						<para><link linkend="ff.typing.overview">Atom typing</link> for an overview of atom typing</para>
					</listitem>
					<listitem>
						<para>The <link linkend="ff.neta">NETA reference</link> for a description of the atom typing language</para>
					</listitem>
					<listitem>
						<para>The <link linkend="command.types.ffatom">ffatom type</link> for how to access the 'mass' parameter</para>
					</listitem>
				</itemizedlist>
			</note>
			
		</section>

	</section>
	
	<section id="ff.wildcards"><title>Wildcards</title>
		<indexterm><primary>forcefield</primary><secondary>wildcards</secondary></indexterm>
		
		<para>In any of the typenames given in the specification of intramolecular interactions, a wildcard character '*' may be used to 'finish off' any or all of the typenames (or replace individual typenames entirely). In doing so, a single definition is able to match more than one set of typenames.</para>
		
		<para>For example:</para>
		<synopsis>
			bonds harmonic
			CT    H*    4184.0    1.06
			end
		</synopsis>
		<para>will describe bonds between 'CT' and any other atom beginning with an 'H'.</para>
		
		<para>Using a '*' on its own will match any typename in that position. As an extreme example:</para>
		
		<synopsis>
			angles harmonic
			*     *     *     418.4      109.4
			end
		</synopsis>
		<para>will match any angle. Be careful - when Aten is creating expressions and searching for specific interactions between atom types, as soon as an intramolecular definition is found that matches it is used, and no further searching is done. So, loose definitions involving wildcards should be put near to the end of the block in which they occur.</para>
			
	</section>

</section>
	
	
	<!--
	
	
	!!Rule-based Forcefields
	Forcefields exist where individual intramolecular parameter definitions (i.e. those provided by the 'bond', 'angle', and 'torsion' blocks) are not necessary. Instead, such parameters are constructed as and when necessary using a set of parameters that depend only on the atomtypes involved. These forcefields are so-called 'rule-based', and are often able to describe enormously varied systems from a small set of defining parameters.
	
	^__Note:__
	Currently only two (closely-related) rule-sets have been implemented - those for the Dreiding and UFF forcefields - but future versions of Aten will allow user-defined rules to be provided. There is not much to learn from reading this section at the current time, since it isn't particularly useful in the definition of new forcefields.^
	
	Rule-based forcefields are defined in exactly the same way as normal forcefields, save for the lack of blocks that define intramolecular terms. Instead, the per-atomtype parameters must be provided instead, and for all atomtypes defined in the 'types' section. This ''generator'' data is then used by the equations defined within the code to construct the necessary intramolecular terms when required. The rules-set to use must also be specified with the 'rules' keyword.
	
	!!!Keyword: generator ''ndata''
	The 'generator' block defines all the necessary parameters for all atomtypes defined in the 'types' block. ''ndata'' specifies how many parameters are provided for each atomtype. The format of the block is as follows:
	
	^generator ''ndata''
	''typeid''  ''typename'' ''data1'' [[''data2..dataN]''
	...
	end^
	The name and ID for each type are given, followed by the necessary parameter data.
	
	!!!Keyword: convert ''dataid1'' [[''dataid2...'']
	Since all energetic forcefield parameters are converted into the internal units of energy with Aten once the forcefield loaded, Aten must be told which of the generator parameters to convert in thie manner. The 'convert' keyword should be followed by a list of integer data IDs that should be converted, corresponding to the order of the data given in the 'generator' section.
	
	For example:
	^convert  3  5^
	will convert the third and fifth generator data from the energy units specified in the forcefield file into Aten's internal units.
	
	
	!!!Keyword: rules ''ruleset''
	For forcefields that are rule-based, the rules set to use is specified here. See ((Rule Sets)) for more information.
	-->

<!--	SOME OF THIS IS RELEVANT FOR THE NEW SECTION ON GENERATOR FFS
	<para>Definitions of intramolecular terms are given in the 'bonds', 'angles', and 'torsions' sections, unless the forcefield is rule-based in which case the relevant data are given in a 'generator' block instead (see the ((Forcefields|#Rule-based Forcefields|section below))). It is not necessary to define every possible bond, angle, and torsion arising from every combination of defined atom types - if, when creating an expression, Aten needs parameters that are not defined in the forcefield a suitable complaint will be raised at the time.
		
		All of the following blocks refer to atom types by their type name (second column in the 'types' block). Alternatively, the names of any defined ((Forcefields|#Equivalents|equivalents)) may be used instead. Each of the block keywords takes a ''form'' parameter specifying the functional form of the subsequent terms. Consult the section on ((Functional Forms)) for a list of implemented functions, the relevant ''form'' keyword, and the ordering of parameters. If the forcefield contains, for example, bond definitions that are not all of the same functional form they should be specified in separate blocks, one for each functional form. As many blocks as are necessary may be defined in a single forcefield file, with any number of definitions in each.-->
