/*
	*** TColourWheel - Colour picker wheel / square
	*** src/gui/tcolourwheel.hui
	Copyright T. Youngs 2007-2015

	This file is part of Aten.

	Aten is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	Aten is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with Aten.  If not, see <http://www.gnu.org/licenses/>.
*/

#ifndef ATEN_TCOLOURWHEEL_H
#define ATEN_TCOLOURWHEEL_H

#include <QWidget>
#include "parser/returnvalue.h"

// Forward Declarations (Qt)
/* none */

ATEN_USING_NAMESPACE

// Colour picker wheel
class TColourWheel : public QWidget
{
	Q_OBJECT

	public:
	// Constructor
	TColourWheel(QWidget* parent = 0);


	/*
	 * Qt Reimplementations
	 */
	protected:
	void mousePressEvent(QMouseEvent* event);
	void mouseMoveEvent(QMouseEvent* event);
	void mouseReleaseEvent(QMouseEvent* event);
	void resizeEvent(QResizeEvent* event);
	void paintEvent(QPaintEvent* event);

	public:
	// Qt size hint
	virtual QSize sizeHint () const;
	// Qt minimum size hint
	virtual QSize minimumSizeHint () const;


	/*
	 * Layout / Control
	 */
	private:
	// Local mouse regions
	enum TColourWheelRegion { NoRegion, WheelRegion, SquareRegion };

	private:
	// Margin around edge of widget
	int margin_;
	// Centre coordinate of widget
	QPoint centre_;
	// Outer radius of colour wheel
	int outerRadius_;
	// Size of square
	int squareSize_;
	// Width of wheel (in pixels)
	int wheelWidth_;
	// Whether mouse button is currently down on the widget
	bool mouseDown_;
	// Last position of mouse over widget
	QPoint lastPos_;
	// Wheel (hue) region
	QRegion wheelRegion_;
	// Square (saturation/value) region
	QRegion squareRegion_;
	// Current region that the mouse is over
	TColourWheelRegion currentRegion_;
	// Gradient for hue wheel
	QConicalGradient wheelGradient_;
	// Pre-drawn image of the hue wheel
	QImage wheelImage_;
	// Pre-drawn image of the saturation / value square
	QImage squareImage_;
	// Composite image containing all elements
	QPixmap compositeImage_;

	private:
	// Return colour at last mouse position
	QColor lastPosColour();
	// Update wheel image and region
	void updateWheel(const QSize widgetSize);
	// Update square (saturation / value) image and region
	void updateSquare(const int currentHue);
	// Update composite image
	void updateComposite();
	// Hue changed, so update
	void hueChanged(const int hue);
	// Saturation / value changed so update
	void svChanged(const QColor newColour);


	/*
	 * Colour
	 */
	private:
	// Colour selected in widget
	QColor currentColour_;

	public:
	// Return colour selected in widget
	QColor currentColour();

	public slots:
	// Set colour selected in widget
	void setColour(const QColor colour);
	
	signals:
	void colourChanged(const QColor colour);
};

#endif

