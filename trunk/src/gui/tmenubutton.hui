/*
	*** TMenuButton - QToolButton with custom handling of mousepress/release events
	*** src/gui/tmenubutton.hui
	Copyright T. Youngs 2007-2012

	This file is part of Aten.

	Aten is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	Aten is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with Aten.  If not, see <http://www.gnu.org/licenses/>.
*/

#ifndef ATEN_TMENUBUTTON_H
#define ATEN_TMENUBUTTON_H

#include <QtWidgets/QToolButton>
#include <QMouseEvent>
#include <QTimer>
#include "parser/returnvalue.h"

// Forward Declarations (Qt)
class TMenuButton;

ATEN_USING_NAMESPACE

// Popup Widget for TMenuButton
class TMenuButtonPopupWidget : public QWidget
{
	Q_OBJECT

	private:
	// Parent TMenuButton
	TMenuButton* parentMenuButton_;
	// Flag indicating that done() was called
	bool widgetDone_;

	protected:
	// Whether widget is refreshing
	bool refreshing_;

	protected:
	// Local function called when the widget should be closed after a button has been selceted
	void done(bool setParentButtonDown = false);

	public:
	// Constructor
	TMenuButtonPopupWidget(TMenuButton* parent);
	// Show popup, updating any controls as necessary beforehand
	virtual void popup() = 0;
	// Call named method associated to popup
	virtual bool callMethod(QString methodName, ReturnValue& rv) = 0;
	// Return parent TMenuButton
	TMenuButton* parentMenuButton();


	/*
	 * Virtual Reimplementations
	 */
	protected:
	void hideEvent(QHideEvent* event);
};

// Exclusive menu button group
class TMenuButtonGroup : public ListItem<TMenuButtonGroup>
{
	public:
	// Constructor
	TMenuButtonGroup();

	private:
	// Name of group
	QString name_;
	// List of TMenuUButtons in this group
	QList<TMenuButton*> buttons_;

	public:
	// Set name of group
	void setName(QString name);
	// Return name of group
	QString name();
	// Add button to group
	void addButton(TMenuButton* button);
	// Set specified button as checked button
	void setCurrentButton(TMenuButton* button);
	// Set button with specified text as checked button
	bool setCurrentButton(QString buttonText);
	// Set button with specified index as checked button
	bool setCurrentButton(int buttonIndex);
};

// Menu button with optional drop-down (popup) menu
class TMenuButton : public QToolButton
{
	Q_OBJECT
	
	public:
	// Constructor
	TMenuButton(QWidget* parent = 0);


	/*
	 * Button
	 */
	private:
	// User-assigned index of button
	int index_;

	public:
	// Return user-assigned index of button
	int index();


	/*
	 * Widget for popup
	 */
	private:
	// Popup widget
	TMenuButtonPopupWidget* popupWidget_;
	// Whether popup is instant when button is pressed
	bool instantPopup_;
	// Timer for popup window
	QTimer popupTimer_;
	// Whether button was already checked before being pressed
	bool checkedBeforePressed_;

	public:
	// Set popup widget for button
	void setPopupWidget(TMenuButtonPopupWidget* widget, bool instantPopup = false);
	// Return popup widget set for button
	TMenuButtonPopupWidget* popupWidget();
	// Call named method in associated popup widget
	bool callPopupMethod(QString methodName, ReturnValue& rv)
	{
		if (popupWidget_) return popupWidget_->callMethod(methodName, rv);
		else printf("No popup set on button with text '%s', so method '%s' cannot be called.\n", qPrintable(text()), qPrintable(methodName));

		return false;
	}
	// Notify button that popup is done
	void popupDone(bool setButtonDown);

	protected:
	void paintEvent(QPaintEvent* event);

	private slots:
	void popup();
	void buttonPressed();
	void buttonReleased();


	/*
	 * Group
	 */
	private:
	// List of available groups
	static List<TMenuButtonGroup> groups_;
	// Group to which this button belongs (if any)
	TMenuButtonGroup* group_;

	public:
	// Add this button to the named group
	void setGroup(QString groupName, int index = -1);
	// Check specified button in specified group
	static bool setGroupButtonChecked(QString groupName, QString buttonText);
	// Check specified button in specified group
	static bool setGroupButtonChecked(QString groupName, int buttonIndex);
};

#endif

