/*
	*** Viewer - GL Drawing class based on QGLWidget
	*** src/gui/viewer.uih
	Copyright T. Youngs 2007-2015

	This file is part of Aten.

	Aten is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	Aten is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with Aten.  If not, see <http://www.gnu.org/licenses/>.
*/

#ifndef ATEN_VIEWER_H
#define ATEN_VIEWER_H

#include "base/log.h"
#include "classes/prefs.h"
#include "gui/useractions.h"
// #include "render/engine.h"
#include <QtOpenGL/QGLWidget>
#include <QtCore/QObject>

// Forward Declarations
class Model;

// Base rendering widget
class Viewer : public QGLWidget
{
	Q_OBJECT

	public:
	// Constructor / Destructor
	Viewer(QWidget *parent);
	~Viewer();


	/*
	 * Character / Setup
	 */
	private:
	// GLExtension pointer stack
	List<GLExtensions> extensionsStack_;
	// Width, height, and aspect ratio of the canvas
	GLsizei contextWidth_, contextHeight_;
	// Flag to indicate whether we may draw to the context
	bool valid_;
	// Flag indicating if we are currently drawing to this context
	bool drawing_;
	// Flag specifying whether we are currently rendering offscreen
	bool renderingOffScreen_;
	// Line width scaling factor to use (to adjust line width when saving images)
	double lineWidthScaling_;

	protected:
	// Initialise context widget (when created by Qt)
	void initializeGL();
	// General repaint callbacks
	void paintGL();
	// Resize function
	void resizeGL(int, int);

	private:
	// Setup basic GL properties
	void setupGL();

	public:
	// Return the current height of the drawing area
	GLsizei contextHeight() const;
	// Return the current width of the drawing area
	GLsizei contextWidth() const;
	// Probe widget/context/format features
	void probeFeatures();
	// Check for GL error
	void checkGlError();
	// Set whether we are currently rendering offscreen
	void setRenderingOffScreen(bool b);
	// Set line width and text scaling to use
	void setObjectScaling(double scaling);
	// Grab current contents of framebuffer
	QPixmap frameBuffer();
	// Render or grab image
	QPixmap generateImage(int w, int h);
	
	public:
	// Determine target model based on clicked position on TCanvas
	Model* modelAt(int x, int y);
	// Request a high-quality rendering pass on next redraw (for image saving, etc.)
	void requestHighQuality();


	/*
	// Mouse Input
	*/
	private:
	// Button flags (uses enum 'MouseButton')
	bool mouseButton_[Prefs::nMouseButtons];
	// Canvas coordinates of mouse down / mouse up events
	Vec3<double> rMouseUp_, rMouseDown_;
	// Canvas coordinates of mouse cursor
	Vec3<double> rMouseLast_;
	
	protected:
	// Qt Virtual (mouse press event)
	void mousePressEvent(QMouseEvent*);
	// Qt Virtual (mouse release event)
	void mouseReleaseEvent(QMouseEvent*);
	// Qt Virtual (mouse move event)
	void mouseMoveEvent(QMouseEvent*);
	// Qt Virtual (mouse wheel event)
	void wheelEvent(QWheelEvent*);

	public:
	// Return mouse coordinates at last mousedown event
	Vec3<double> rMouseDown();
	// Return mouse coordinates at last mouseup event
	Vec3<double> rMouseUp();
	// Return mouse coordinates at last mousemove event
	Vec3<double> rMouseLast();

	
	/*
	// Key Input
	*/
	private:
	// Key flags (set by Gui::informMouseDown and used by TCanvas::beginMode)
	bool keyModifier_[Prefs::nModifierKeys];
	
	public:
	// Return state of specified keymodifier
	bool keyModifier(Prefs::ModifierKey mk);

	public slots:
	// Qt Slot (key press event)
	void keyPressEvent(QKeyEvent*);
	// Qt Slot (key release event)
	void keyReleaseEvent(QKeyEvent*);
	
	
	/*
	// User Actions
	*/
	private:
	// Active interaction mode of the main canvas
	UserAction::Action activeMode_;
	// Selected interaction mode (from GUI)
	UserAction::Action selectedMode_;
	// Whether the mouse has moved between begin_mode() and end_mode() calls
	bool hasMoved_;
	// Current drawing depth for certain tools
	double currentDrawDepth_;
	// Selected drawing element
	short int sketchElement_;
	// Whether to accept editing actions (i.e. anything other than view manipulation)
	bool editable_;
	// Number of atoms to pick in PickAtomsAction
	int nAtomsToPick_;
	// User action before picking mode was entered
	UserAction::Action actionBeforePick_;
	// List of picked atoms
	Reflist<Atom,int> pickedAtoms_;
	// Pointer to callback function when PickAtomsAction exits
	void (*pickAtomsCallback_)(Reflist<Atom,int>*);
	// Atom that was clicked at the start of a mouse press event
	Atom *atomClicked_;
	// Whether we are selecting atoms and placing them in the subsel list	
	bool pickEnabled_;
	// Reflist of selected atoms and their positions so manipulations may be un-done
	Reflist< Atom,Vec3<double> > oldPositions_;

	private:
	// Begin an action on the model (called from MouseButtondown)
	void beginMode(Prefs::MouseButton);
	// End an action on the model (called from MouseButtonup)
	void endMode(Prefs::MouseButton);
	
	public:
	// Set the active mode to the current user mode
	void useSelectedMode();
	// Sets the currently selected interact mode
	void setSelectedMode(UserAction::Action ua, int atomsToPick = -1, void (*callback)(Reflist<Atom,int>*) = NULL);
	// Return the currently selected mode
	UserAction::Action selectedMode() const;
	// Return the currently active mode
	UserAction::Action activeMode() const;
	// Set current drawing element
	void setSketchElement(short int el);
	// Return current drawing element
	short int sketchElement() const;
	// Current drawing depth for certain tools
	double currentDrawDepth();
	// Set whether to accept editing actions (i.e. anything other than view manipulation)
	void setEditable(bool b);
	// Return whether to accept editing actions (i.e. anything other than view manipulation)
	bool editable();
	// Returns the clicked atom within a mouse click event
	Atom *atomClicked();
	// Clears the subsel of atoms
	void clearPicked();
	// End manual picking
	void endManualPick(bool resetaction);
	// Return start of picked atom list
	Refitem<Atom,int> *pickedAtoms();
	
	
	/*
	// Other Qt Virtuals
	*/
	protected:
	void focusOutEvent(QFocusEvent *event);
};

#endif
