/*
	*** Command Function Definitions
	*** src/command/commands.cpp
	Copyright T. Youngs 2007-2015

	This file is part of Aten.

	Aten is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	Aten is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with Aten.  If not, see <http://www.gnu.org/licenses/>.
*/

#include "command/commands.h"
#include "parser/commandnode.h"
#include "base/sysfunc.h"

ATEN_USING_NAMESPACE

/* Argument Specification Tokens:
	Char	Meaning		Acceptable Types in VTypes
	A	Atom/Id		IntegerData, AtomData
	B	Boolean		Any
	C	Character	StringData
	D	Double		DoubleData
	E	Element		StringData,IntegerData,DoubleData,AtomData
	F	Frcefld/ID/Name	ForcefieldData, IntegerData, StringData
	G	Grid/ID		GridData, StringData, IntegerData
	H	Bond		BondData
	I	Integer		IntegerData
	J	Atom		AtomData
	K	UnitCell	UnitCell
	L	<free>
	M	Model/ID/Name	ModelData, StringData, IntegerData
	N	Number		IntegerData, DoubleData
	O	FFAtom		ForcefieldAtomData
	P	Pattern/ID/Name	PatternData, StringData, IntegerData
	Q	<free>
	R	Real		DoubleData
	S	Any Simple	IntegerData, DoubleData, StringData
	T	Exact Simple	IntegerData, StringData
	U	Vector		VectorData
	V	Variable	Any simple variable (not path)
	W	Vector/Atom	VectorData or AtomData (using position vector)
	X	Pointer		Any pointer object
	Y	Widget		WidgetData
	Z	Any		Any
	*	<Repeat>	Any number of the last type again
	^	<Require Var>	Next token must be a modifiable variable and not a constant
	[]	<Cluster>	Surrounds groups of optional arguments that must be specified together
	|	<Or>		Separates alternative lists of arguments for the command
	&	<Array>		Next token must be an array
	2-9	<NRepeat>	Next argument should occur N times
*/

// Command action
CommandData Commands::data_[Commands::nCommands] = {

	// Operators
	{ "+",			"..",		VTypes::NoData, "",
		"Internal Operator (+)" },
	{ "&&",			"..",		VTypes::NoData, "",
		"Internal Operator (&&)" },
	{ "=",			"..",		VTypes::NoData, "",
		"Internal Operator (=)" },
	{ "/=",			"..",		VTypes::NoData, "",
		"Internal Operator (/=)" },
	{ "*=",			"..",		VTypes::NoData, "",
		"Internal Operator (*=)" },
	{ "+=",			"..",		VTypes::NoData, "",
		"Internal Operator (+=)" },
	{ "-=",			"..",		VTypes::NoData, "",
		"Internal Operator (-=)" },
	{ "/",			"..",		VTypes::NoData, "",
		"Internal Operator (/)" },
	{ "==",			"..",		VTypes::NoData, "",
		"Internal Operator (==)" },
	{ "",			"..",		VTypes::NoData, "",
		"Internal Operator (>)" },
	{ ">=",			"..",		VTypes::NoData, "",
		"Internal Operator (>=)" },
	{ "?:",			"..",		VTypes::NoData, "",
		"Internal Operator (?:)" },
	{ "<",			"..",		VTypes::NoData, "",
		"Internal Operator (<)" },
	{ "<=",			"..",		VTypes::NoData, "",
		"Internal Operator (<=)" },
	{ "%",			"..",		VTypes::NoData, "",
		"Internal Operator (%)" },
	{ "*",			"..",		VTypes::NoData, "",
		"Internal Operator (*)" },
	{ "-NEG",		".",		VTypes::NoData, "",
		"Internal Operator (negate)" },
	{ "!",			"..",		VTypes::NoData, "",
		"Internal Operator (!)" },
	{ "!=",			"..",		VTypes::NoData, "",
		"Internal Operator (!=)" },
	{ "||",			"..",		VTypes::NoData, "",
		"Internal Operator (||)" },
	{ "X--",		"..",		VTypes::NoData, "",
		"Internal Operator (X--)" },
	{ "X++",		"..",		VTypes::NoData, "",
		"Internal Operator (X++)" },
	{ "^",			"..",		VTypes::NoData, "",
		"Internal Operator (^)" },
	{ "--X",		"..",		VTypes::NoData, "",
		"Internal Operator (--X)" },
	{ "++X",		"..",		VTypes::NoData, "",
		"Internal Operator (++X)" },
	{ "-",			"..",		VTypes::NoData, "",
		"Internal Operator (-)" },

	// AST Nodes
	{ "_nofunction_",	"",		VTypes::NoData, "",
		"" },
	{ "_joiner_",		"",		VTypes::NoData, "",
		"" },
	{ "_declaration_",	"^Z*",		VTypes::NoData, "",
		"" },

	// Analysis commands
	{ "finalise",		"",		VTypes::NoData,
		"",
		"Finalise all calculated quantities" },
	{ "frameAnalyse",	"",		VTypes::NoData,
		"",
		"Analyse quantities for the current trajectory frame" },
	{ "geomDat",		"CNNNCNNnn",	VTypes::NoData,
		"string name, double min, double binwidth, int nbins, string filename, int site1, int site2, int site3 = 0, int site4 = 0",
		"Calculate geometries" },
	{ "modelAnalyse",	"",		VTypes::NoData,
		"",
		"Analyse quantities for the current model" },
	{ "pdens",		"CNNCNN",	VTypes::NoData,
		"string name, double griddelta, int nstep, string filename, int site1, int site2",
		"Request calculation of a probability density between sites" },
	{ "listJobs",		"",		VTypes::NoData,
		"",
		"Print the current list of quantities to calculate" },
	{ "rdf",		"CNNNCNN",	VTypes::NoData,
		"string name, double rmin, double binwidth, int nbins, string filename, int site, int site2",
		"Request calculation of radial distribution function between sites" },
	{ "saveQuantities",	"",		VTypes::NoData,
		"",
		"Save calculated quantities to file" },
	{ "trajAnalyse",	"NNn",		VTypes::NoData,
		"int startframe, int frameskip, int nframes = -1",
		"Analyse quantities for all frames in current trajectory" },
	
	// Atom commands
	{ "atomStyle",		"Ca",		VTypes::NoData,
		"string style, Atom|int id = 0",
		"Set the individual style of the current atom selection (or supplied atom)" },
	{ "colourAtoms",	"NNNn",		VTypes::NoData,
		"double r, double g, double b, double a = 1.0",
		"Set the custom colour of all selected atoms" },
	{ "currentAtom",	"a",		VTypes::AtomData,
		"Atom|int id = 0",
		"Make the specified atom (or atom id) the current atom, or return current atom" },
	{ "fix",		"a",		VTypes::AtomData,
		"Atom|int id = 0",
		"Fix position of current atom selection or specified atom in various methods" },
	{ "free",		"a",		VTypes::AtomData,
		"Atom|int id = 0",
		"Free positions of current atom selection or specified atom in various methods" },
	{ "getAtom",		"N",		VTypes::AtomData,
		"int id",
		"Retrieve pointer for atom id specified, returning a reference to it" },
	{ "hide",		"a",		VTypes::NoData,
		"Atom|int id = 0",
		"Hide the current selection of atoms (or supplied atom)" },
	{ "recolourAtoms",	"",		VTypes::NoData,
		"",
		"Reset the custom colour of all selected atoms back to their element colours" },
	{ "setCharge",		"Na",		VTypes::NoData,
		"double q, Atom|int id = 0",
		"Set the charge of the current (or specified) atom" },
	{ "setCoords",		"NNNa",		VTypes::NoData,
		"double x, double y, double z, Atom|int id = 0",
		"Set the coordinates of the current (or specified) atom" },
	{ "setElement",		"Ea",		VTypes::NoData,
		"Element el, Atom|int id = 0",
		"Set the element of the current (or specified) atom" },
	{ "setForces",		"NNNa",		VTypes::NoData,
		"double fx, double fy, double fz, Atom|int id = 0",
		"Set the forces of the current (or specified) atom" },
	{ "setFx",		"Na",		VTypes::NoData,
		"double fx, Atom|int id = 0",
		"Set the x force of the current (or specified) atom" },
	{ "setFy",		"Na",		VTypes::NoData,
		"double fy, Atom|int id = 0",
		"Set the y force of the current (or specified) atom" },
	{ "setFz",		"Na",		VTypes::NoData,
		"double fz, Atom|int id = 0",
		"Set the z force of the current (or specified) atom" },
	{ "setRx",		"Na",		VTypes::NoData,
		"double rx, Atom|int id = 0",
		"Set the x coordinate of the current (or specified) atom" },
	{ "setRy",		"Na",		VTypes::NoData,
		"double ry, Atom|int id = 0",
		"Set the y coordinate of the current (or specified) atom" },
	{ "setRz",		"Na",		VTypes::NoData,
		"double rz, Atom|int id = 0",
		"Set the z coordinate of the current (or specified) atom" },
	{ "setVelocities",	"NNNa",		VTypes::NoData,
		"double vx, double vy, double vz, Atom|int id = 0",
		"Set the velocities of the current (or specified) atom" },
	{ "setVx",		"Na",		VTypes::NoData,
		"double vx, Atom|int id = 0",
		"Set the x velocity of the current (or specified) atom" },
	{ "setVy",		"Na",		VTypes::NoData,
		"double vy, Atom|int id = 0",
		"Set the y velocity of the current (or specified) atom" },
	{ "setVz",		"Na",		VTypes::NoData,
		"double vz, Atom|int id = 0",
		"Set the z velocity of the current (or specified) atom" },
	{ "show",		"a",		VTypes::NoData,
		"Atom|int id = 0",
		"Show (make visible) the current selection of atoms (or supplied atom)" },

	// Bonding commands
	{ "augment",		"",		VTypes::NoData,
		"",
		"Automatically augment all bonds in the current model" },
	{ "bondTolerance",	"n",		VTypes::DoubleData,
		"double tol = aten_.prefs.bondTolerance",
		"Set bonding tolerance for automatic calculation" },
	{ "clearBonds",		"",		VTypes::NoData,
		"",
		"Delete all bonds in the current model" },
	{ "clearSelectedBonds",	"",		VTypes::NoData,
		"",
		"Delete all bonds in the current selection" },
	{ "newBond",		"AAs",		VTypes::NoData,
		"Atom|int i, Atom|int j, string|int|double bondtype = 1",
		"Create a bond between the two atoms specified" },
	{ "rebond",		"b",		VTypes::NoData,
		"bool augment = aten_.prefs.augmentAfterRebond",
		"Calculate bonding in the current model" },
	{ "rebondPatterns",	"b",		VTypes::NoData,
		"bool augment = aten_.prefs.augmentAfterRebond",
		"Calculate bonds between atoms, restricted to atoms in pattern molecules" },
	{ "rebondSelection",	"b",		VTypes::NoData,
		"bool augment = aten_.prefs.augmentAfterRebond",
		"Calculate bonds between atoms in the current selection" },

	// Build commands
	{ "addHydrogen",	"a",		VTypes::NoData,
		"Atom|int id = 0",
		"Hydrogen satisfy all (or specified) atom in model" },
	{ "bohr",		"X*",		VTypes::NoData,
		"object, [object...]",
		"Convert coordinates in the specified object(s) from Angstroms to Bohr" },
	{ "chain",		"Es|E3Ns",	VTypes::AtomData,
		"Element el, string|int|double bondtype = 1  |  Element el, double x, double y, double z, string|int|double bondtype = 1",
		"Create a new atom in the current model, bound to the last" },
	{ "endChain",		"",		VTypes::AtomData,
		"",
		"End the current bond chain (the next call to 'chain' will create an unbound atom)" },
	{ "growAtom",		"EAcn",		VTypes::AtomData,
		"Element el, Atom|int target, string geometry = tetrahedral, double distance = <auto>",
		"Grow an atom of the specified element onto the target atom in the specified geometry" },
	{ "insertAtom",		"EN[nnn]",	VTypes::AtomData,
		"Element el, int id, double x = 0.0, double y = 0.0, double z = 0.0",
		"Insert a new atom into the model such that it has the ID specified" },
	{ "locate",		"NNN",		VTypes::NoData,
		"double x, double y, double z",
		"Position pen at specified coordinates" },
	{ "move",		"NNN",		VTypes::NoData,
		"double dx, double dy, double dz",
		"Move pen by specified coordinates" },
	{ "moveToEnd",		"",		VTypes::NoData,
		"",
		"Move current atom selection to end of list" },
	{ "moveToStart",	"",		VTypes::NoData,
		"",
		"Move current atom selection to start of list" },
	{ "newAtom",		"E[nnn][nnn][nnn]",	VTypes::AtomData,
		"Element el, double x = 0.0, double y = 0.0, double z = 0.0, double vx = 0.0, double vy = 0.0, double vz = 0.0, double fx = 0.0, double fy = 0.0, double fz = 0.0",
		"Create a new atom in the current model, with optional coordinates, velocities, and forces" },
	{ "newAtomFrac",	"ENNN",		VTypes::AtomData,
		"Element el, double fracx, double fracy, double fracz, double vx = 0.0, double vy = 0.0, double vz = 0.0, double fx = 0.0, double fy = 0.0, double fz = 0.0",
		"Create a new atom in the current model, converting fractional coordinates to real coordinates, and with optional velocities and forces" },
	{ "reOrder",		"",		VTypes::NoData,
		"",
		"Reorder atoms in the current selection such that bond partners have adjacent atom IDs" },
	{ "resetPen",		"",		VTypes::NoData,
		"",
		"Reset the pen orientation to the identity matrix (but leave the current position intact)" },
	{ "rotX",		"N",		VTypes::NoData,
		"double angle",
		"Rotate pen about its x axis by given angle" },
	{ "rotY",		"N",		VTypes::NoData,
		"double angle",
		"Rotate pen about its y axis by given angle" },
	{ "rotZ",		"N",		VTypes::NoData,
		"double angle",
		"Rotate pen about its z axis by given angle" },
	{ "selectionAddHydrogen","",		VTypes::NoData,
		"",
		"Hydrogen satisfy selected atoms in model" },
	{ "selectionGrowAtom",	"Ecn",		VTypes::NoData,
		"Element el, string geometry = tetrahedral, double distance = <auto>",
		"Grow an atom of the specified element onto each atom in the current selection, in the specified geometry" },
	{ "shiftDown",		"n",		VTypes::NoData,
		"int n = 1",
		"Shift current atom selection down 1 (or 'n') places" },
	{ "shiftUp",		"n",		VTypes::NoData,
		"int n = 1",
		"Shift current atom selection up 1 (or 'n') places" },
	{ "transmute",		"E",		VTypes::NoData,
		"Element el",
		"Transmute selection to element given" },
	
	// Cell commands
	{ "addGenerator",	"C",		VTypes::NoData,
		"string generator",
		"Manually add a spacegroup generator definition to the current model's cell" },
	{ "adjustCell",		"CN",		VTypes::NoData,
		"string quantity, double change",
		"Adjust a single value of the current cell specification (e.g. quantity = a, beta, cz, etc.)" },
	{ "cell",		"NNNNNN",	VTypes::NoData,
		"double a, double b, double c, double alpha, double beta, double gamma",
		"Set or create a unit cell for the current model from lengths/angles provided" },
	{ "cellAxes",		"9N",		VTypes::NoData,
		"double ax, double ay, double az, double bx, double by, double bz, double cx, double cy, double cz",
		"Set or create a unit cell for the current model from the cell axes provided" },
	{ "fold",		"",		VTypes::NoData,
		"",
		"Fold atoms into model's unit cell" },
	{ "foldMolecules",	"",		VTypes::NoData,
		"",
		"Fold molecules (defined by patterns) so that they are unbroken across cell boundaries" },
	{ "fracToReal",		"",		VTypes::NoData,
		"",
		"Convert (assumed) fractional model coordinates to real coordinates" },
	{ "millerCut",		"NNNn",		VTypes::NoData,
		"int h, int k, int l, bool inside = false",
		"Cleave the current periodic system along the specified Miller plane" },
	{ "noCell",		"", 		VTypes::NoData,
		"",
		"Remove any cell definition from the current model" },
	{ "pack",		"",		VTypes::NoData,
		"",
		"Pack the unit cell with symmetry operators list in associated spacegroup" },
	{ "printCell",		"",		VTypes::NoData,
		"",
		"Print the unit cell of the current model" },
	{ "replicate",		"NNNNNN",	VTypes::NoData,
		"double negx, double negy, double negz, double posx, double posy, double posz",
		"Replicate the cell by the unit cell amounts specified in each direction, beyond the original cell" },
	{ "rotateCell",		"CN",		VTypes::NoData,
		"string axis, double angle",
		"Rotate the cell and its contents about the specified orthogonal axis (x, y, or z)" },
	{ "scale",		"NNN",		VTypes::NoData,
		"double x, double y, double z",
		"Scale the unit cell and atomic positions of the current model" },
	{ "scaleMolecules",	"NNN",		VTypes::NoData,
		"double x, double y, double z",
		"Scale the unit cell and molecular positions of the current model" },
	{ "setCell",		"CN",		VTypes::NoData,
		"string quantity, double value",
		"Set a single value of the current cell specification (e.g. quantity = a, beta, cz, etc.)" },
	{ "sgInfo",		"C",		VTypes::IntegerData,
		"string|int spacegroup",
		"Invoke SGInfo, search for the spacegroup name/id provided, and print out its details" },
	{ "spacegroup",		"S",		VTypes::NoData,
		"string|int spacegroup",
		"Set the spacegroup for the current model" },
	
	// Charge commands
	{ "charge",		"n",		VTypes::DoubleData,
		"[double q]",
		"Set charges of atoms in the current selection, or return total charge of current selection" },
	{ "chargeFF",		"",		VTypes::NoData,
		"",
		"Charge atoms in the model according to their forcefield atom types" },
	{ "chargeFromModel",	"",		VTypes::NoData,
		"",
		"Charge atoms in the current trajectory frame from the parent model" },
	{ "chargePAtom",	"NN",		VTypes::NoData,
		"int id, double q",
		"Set charges for specific atom id in all molecules of the current pattern" },
	{ "chargeType",		"CN",		VTypes::NoData,
		"string type, double q",
		"Set charges of all atoms of the given type" },
	{ "clearCharges",	"",		VTypes::NoData,
		"",
		"Zero all charges in the current model" },

	// Colourscale commands
	{ "addPoint",		"NNNNNn",	VTypes::NoData,
		"int scaleid, double value, double r, double g, double b, double a = 1.0",
		"Add a new point to the specified colourscale" },
	{ "clearPoints",	"N",		VTypes::NoData,
		"int scaleid",
		"Clear all points from the specified colourscale" },
	{ "listScales",		"",		VTypes::NoData,
		"",
		"List details on all colourscales" },
	{ "removePoint",	"NN",		VTypes::NoData,
		"int scaleid, int pointid",
		"Remove the selected point from the specified colourscale" },
	{ "scaleInterpolate",	"NB",		VTypes::IntegerData,
		"int scaleid, bool interpolate",
		"Set whether colour is interpolated between points in the colourscale specified" },
	{ "scaleName",		"Nc",		VTypes::StringData,
		"int scaleid [string name]",
		"Print (or set) the name of the colourscale specified" },
	{ "scaleVisible",	"NB",		VTypes::NoData,
		"int scaleid, bool visible",
		"Set the visibility of the specified colourscale" },
	{ "setPoint",		"NNNNNNn",	VTypes::NoData,
		"int scaleid, int pointid, double value, double r, double g, double b, double a = 1.0",
		"Set an existing point on the specified colourscale" },
	{ "setPointColour", 	"NNNNNn",	VTypes::NoData,
		"int scaleid, int pointid, double r, double g, double b, double a = 1.0",
		"Set the colour for an existing colourscale point" },
	{ "setPointValue", 	"NNN",		VTypes::NoData,
		"int scaleid, int pointid, double value",
		"Set the value for an existing colourscale point" },

	// Disordered Builder Commands
	{ "disorder",		"Cb",		VTypes::IntegerData,
		"string schemename, bool fixedcell = true",
		"Run the disordered builder, returning the generated (or target) model" },
	{ "listComponents",	"",		VTypes::NoData,
		"",
		"Print a list of the components requested in the disordered builder" },
	{ "setupComponent",	"Cnnnb",	VTypes::NoData,
		"string policy, int partition = 1, int population = 0, double density = 0.0, bool rotate = true",
		"Setup the current model's component information for the disorder builder" },

	// Edit commands
	{ "copy",		"",		VTypes::NoData,
		"",
		"Copy selected atoms" },
	{ "cut",		"",		VTypes::NoData,
		"",
		"Cut the selected atoms" },
	{ "delete",		"",		VTypes::NoData,
		"",
		"Delete selected atoms" },
	{ "paste",		"[nnn]",	VTypes::NoData,
		"double dx = 0.0, double dy = 0.0, double dz = 0.0",
		"Paste previously-cut or copied atoms to the model (with optional shift from original position" },
	{ "redo",		"",		VTypes::NoData,
		"",
		"Redo last change in current model" },
	{ "undo",		"",		VTypes::NoData,
		"",
		"Undo last change in current model" },

	// Energy commands
	{ "elec",		"Cnnnn",	VTypes::NoData,
		"string type = none|coulomb|ewald|ewaldauto. [ double precision, | double alpha, int kx, int ky, int kz ]",
		"Set the style of electrostatic energy calculation" },
	{ "frameEnergy",	"",		VTypes::DoubleData,
		"",
		"Calculate the energy of the current trajectory frame" },
	{ "modelEnergy",	"",		VTypes::DoubleData,
		"",
		"Calculate the energy of the current model" },
	{ "printElec",		"",		VTypes::NoData,
		"",
		"Print the electrostatic pattern matrix of the last calculated energy" },
	{ "printEwald",		"",		VTypes::NoData,
		"",
		"Print the Ewald decomposition of the last calculated energy" },
	{ "printInter",		"",		VTypes::NoData,
		"",
		"Print the total intermolecular pattern matrix of the last calculated energy" },
	{ "printIntra",		"",		VTypes::NoData,
		"",
		"Print the total intramolecular pattern matrix of the last calculated energy" },
	{ "printEnergy",	"",		VTypes::NoData,
		"",
		"Print a short description of the last calculated energy" },
	{ "printSummary",	"",		VTypes::NoData,
		"",
		"Print a one-line summfor a in 01 03; do pdens last-2ns.HISu last-2ns.OUT -centre 1 -axis 1 2 4 1 5 -atom 2 $a -grid 30; mv last-2ns.12.pdens last-2ns.gluc-$a.pdens; doneary of the last calculated energy" },
	{ "printVdw",		"",		VTypes::NoData,
		"",
		"Print the VDW pattern matrix of the last calculated energy" },

	// Flow control
	{ "break",		"",		VTypes::NoData,
		"",
		"Exit from the current for loop or switch statement" },
	{ "_case",		"T",		VTypes::NoData,
		"",
		"" },
	{ "continue",		"",		VTypes::NoData,
		"",
		"Skip to the next iteration of the current loop" },
	{ "_default",		"",		VTypes::NoData,
		"",
		"" },
	{ "dowhile",		"_",		VTypes::NoData,
		"",
		"Run the enclosed block or statement as many times as the supplied expression evaluates to true" },
	{ "for",		"_",		VTypes::NoData,
		"initial expression; increment; termination condition",
		"" },
	{ "_forin",		"_",		VTypes::NoData,
		"x in y",
		"" },
	{ "if",			"_",		VTypes::NoData,
		"",
		"Perform a conditional test between the supplied expressions (or variables or constants)" },
	{ "return",		"z",		VTypes::NoData,
		"value = 0",
		"Terminate execution of the current program/filter/function, optionally returning the value provided" },
	{ "_switch",		"T",		VTypes::NoData,
		"int value",
		"Begins a switch/case statement on the specified value" },
	{ "while",		"_",		VTypes::NoData,
		"",
		"Run the enclosed block or statement as many times as the bracketed expression evaluates to true" },
	
	// Force commands
	{ "frameForces",	"",		VTypes::NoData,
		"",
		"Calculate forces for the current trajectory frame" },
	{ "modelForces",	"",		VTypes::NoData,
		"",
		"Calculate forces for the current model" },
	{ "printForces",	"",		VTypes::NoData,
		"",
		"Print calculated forces for the current model" },
	
	// Forcefield commands
	{ "angleDef",		"CCCCNnnnnn",	VTypes::ForcefieldBoundData,
		"string form, string type1, string type2, string type3, double data1, double data2 = 0.0 ...",
		"Add an angle definition to the current forcefield" },
	{ "autoConversionUnit",	"c",		VTypes::NoData,
		"string energyUnit = null",
		"Set (or reset) the current energy unit for automatic forcefield parameter conversion on access" },
	{ "bondDef",		"CCCNnnnnn",	VTypes::ForcefieldBoundData,
		"string form, string type1, string type2, double data1, double data2 = 0.0 ...",
		"Add a bond definition to the current forcefield" },
	{ "clearExportMap",	"",		VTypes::NoData,
		"",
		"Clear manual export type mapping list" },
	{ "clearExpression",	"",		VTypes::NoData,
		"",
		"Clear the current model's expression" },
	{ "clearMap",		"",		VTypes::NoData,
		"",
		"Clear manual import type mapping list" },
	{ "clearTypes",		"",		VTypes::NoData,
		"",
		"Clear all assigned atom types from the current model" },
	{ "createExpression",	"bbb",		VTypes::IntegerData,
		"bool noIntra = false, bool allowDummy = false, bool assignCharges = true",
		"Create a forcefield expression for the current model" },
	{ "currentFF",		"f",		VTypes::ForcefieldData,
		"string|int|Forcefield ff = null",
		"Make the specified forcefield (or forcefield id) the current forcefield, or return current forcefield" },
	{ "deleteFF",		"F",		VTypes::NoData,
		"string|int|Forcefield ff",
		"Delete named forcefield" },
	{ "energyConvert",	"N*",		VTypes::NoData,
		"int dataid ...",
		"Flag named extra data for specified forcefield atom id as being energetic" },
	{ "equivalents",	"CC*",		VTypes::NoData,
		"string equivname, string type ...",
		"Define forcefield equivalents" },
	{ "exportMap",		"C*",		VTypes::NoData,
		"string 'typename=name ...' ...",
		"Add export typename mappings" },
	{ "ffModel",		"c",		VTypes::NoData,
		"[string name]",
		"Associate current (or named) forcefield to current model" },
	{ "ffPattern",		"p",		VTypes::NoData,
		"[Pattern|id|string p]", 
		"Associate current forcefield to current pattern" },
	{ "finaliseFF",		"",		VTypes::NoData,
		"",
		"Finalise current forcefield" },
	{ "fixType",		"Na",		VTypes::NoData,
		"int typeid, Atom|id = 0",
		"Fix the atom type of the current selection, or specified atom" },
	{ "freeType",		"a",		VTypes::NoData,
		"atom|id = 0",
		"Free any previously-fixed atom type in the current selection, or for the specified atom" },
	{ "generateAngle",	"AAA",		VTypes::ForcefieldBoundData,
		"Atom|int i, Atom|int j, Atom|int k",
		"Generate (if the relevant generator function is defined in the current forcefield) or just return (if it already exists) suitable angle parameters for the atom types provided" },
	{ "generateBond",	"AA",		VTypes::ForcefieldBoundData,
		"Atom|int i, Atom|int j",
		"Generate (if the relevant generator function is defined in the current forcefield) or just return (if it already exists) suitable bond parameters for the atom types provided" },
	{ "generateTorsion",	"AAAA",		VTypes::ForcefieldBoundData,
		"Atom|int i, Atom|int j, Atom|int k, Atom|int l",
		"Generate (if the relevant generator function is defined in the current forcefield) or just return (if it already exists) suitable torsion parameters for the atom types provided" },
	{ "generateVdw",	"A",		VTypes::ForcefieldAtomData,
		"Atom|int i",
		"Generate (if the relevant generator function is defined in the current forcefield) or just return (if it already exists) suitable vdw parameters for the atom provided" },
	{ "getCombinationRule",	"CC",		VTypes::StringData,
		"string form, string parameter",
		"Return the combination rule in use for the specified VDW parameter" },
	{ "getFF",		"C",		VTypes::ForcefieldData,
		"string name",
		"Return reference to named (loaded) forcefield" },
	{ "interDef",		"CNNNnnnnn",	VTypes::NoData,
		"string form, int typeid, double q, double data ...",
		"Set an interatomic definition for an existing type in the current forcefield" },
	{ "loadFF",		"Cc",		VTypes::ForcefieldData,
		"string filename, string nickname = filename",
		"Load forcefield from file, renaming to new name if one was supplied" },
	{ "map",		"C*",		VTypes::NoData,
		"string 'name=element ...' ...",
		"Add typename mappings" },
	{ "newFF",		"C",		VTypes::ForcefieldData,
		"string name",
		"Create a new, empty forcefield" },
	{ "printSetup",		"",		VTypes::NoData,
		"",
		"Print the current energy/force calculation setup" },
	{ "printType",		"N",		VTypes::NoData,
		"int i",
		"Print the internal NETA description details of type ID 'i' in the current forcefield" },
	{ "recreateExpression",	"bbb",		VTypes::NoData,
		"bool nointra = false, bool allowdummy = false, bool assignCharges = true",
		"Delete any existing expression, then create a forcefield expression for the current model" },
	{ "saveExpression",	"CC",		VTypes::IntegerData,
		"string format, string filename",
		"Save the expression for the current model" },
	{ "setCombinationRule",	"CCC",		VTypes::NoData,
		"string form, string parameter, string rule",
		"Set the combination rule to use for the specified VDW parameter" },
	{ "torsionDef",		"CCCCCNnnnnn",	VTypes::ForcefieldBoundData,
		"string form, string type1, string type2, string type3, string type4, double data1, double data2 = 0.0 ...",
		"Add a torsion definition to the current forcefield" },
	{ "typeDef",		"NCCECc", 	VTypes::ForcefieldAtomData,
		"int typeid, string name, string equiv, Element el, string neta, string description = null",
		"Add an atom type to the current forcefield" },
	{ "typeModel",		"",		VTypes::IntegerData,
		"",
		"Perform atom typing on the current model" },
	{ "typeTest",		"NA",		VTypes::IntegerData,
		"int typeId, Atom|int id",
		"Test atomtype score on atom id provided" },
	{ "units",		"C",		VTypes::NoData,
		"string unit",
		"Set energy unit of forcefield" },

	// Glyph commands
	{ "autoEllipsoids",	"c*",		VTypes::NoData,
		"string option = null, ...",
		"Automatically add ellipsoids to the current atom selection" },
	{ "autoPolyhedra",	"c*",		VTypes::NoData,
		"string option = null, ...",
		"Automatically add polyhedra to the current atom selection" },
	{ "glyphAtomF",		"Na",		VTypes::NoData,
		"int n, Atom|int id = 0",
		"Set current (or specified) atom's forces as n'th data in current glyph" },
	{ "glyphAtomR",		"Na",		VTypes::NoData,
		"int n, Atom|int id = 0",
		"Set current (or specified) atom's coordinates as n'th data in current glyph" },
	{ "glyphAtomV",		"Na",		VTypes::NoData,
		"int n, Atom|int id = 0",
		"Set current (or specified) atom's velocities data n'th in current glyph" },
	{ "glyphAtomsF",	"Aaaa",		VTypes::NoData,
		"Atom|int id1, Atom|int id2 = 0, Atom|int id3 = 0, Atom|int id4 = 0",
		"Set all atom forces data in current glyph" },
	{ "glyphAtomsR",	"Aaaa",		VTypes::NoData,
		"Atom|int id1, Atom|int id2 = 0, Atom|int id3 = 0, Atom|int id4 = 0",
		"Set all atom coordinates data in current glyph" },
	{ "glyphAtomsV",	"Aaaa",		VTypes::NoData,
		"Atom|int id1, Atom|int id2 = 0, Atom|int id3 = 0, Atom|int id4 = 0",
		"Set all atom velocities data in current glyph" },
	{ "glyphColour",	"NNNNn",	VTypes::NoData,
		"int n, double r, double g, double b, double a = 1.0",
		"Set n'th colour data in current glyph" },
	{ "glyphColours",	"NNNn",		VTypes::NoData,
		"double r, double g, double b, double a = 1.0",
		"Set colour of all data points in current glyph" },
	{ "glyphData",		"NNnn",		VTypes::NoData,
		"int n, double x, double y = 0.0, double z = 0.0",
		"Set n'th vector data in current glyph" },
	{ "glyphSolid",		"B",		VTypes::NoData,
		"bool solid"
		"Set the glyph to be drawn in solid (true) or wireframe (false) modes (glyph-permitting)" },
	{ "glyphText",		"C",		VTypes::NoData,
		"string text",
		"Set text data in current glyph" },
	{ "newGlyph",		"Cc",		VTypes::GlyphData,
		"string style, string options = null",
		"Add a glyph of the specified style to the current model, and with any specified options" },

	// Grid commands
	{ "addFreePoint",	"NNNN",		VTypes::NoData,
		"double x, double y, double z, double value",
		"Add free gridpoint value" },
	{ "addGridPoint",	"NNNN",		VTypes::NoData,
		"int ix, int iy, int iz, double value",
		"Set specific gridpoint value" },
	{ "addNextGridPoint",	"N",		VTypes::NoData,
		"double value",
		"Add next gridpoint value" },
	{ "currentGrid",	"g",		VTypes::GridData,
		"Grid|int g = null",
		"Make the specified grid (or grid id) the current grid, or return current grid" },
	{ "finaliseGrid",	"",		VTypes::NoData,
		"",
		"Finalise grid import" },
	{ "getGrid",		"N",		VTypes::GridData,
		"int id",
		"Return a reference to grid in current model with id specified" },
	{ "gridalpha",		"N",		VTypes::DoubleData,
		"double alpha",
		"Set the alpha value of the surface (when not using a colourscale)" },
	{ "gridAxes",		"NNNNNNNNN",	VTypes::NoData,
		"double ax, double ay, double az, double bx, double by, double bz, double cx, double cy, double cz",
		"Set axis system for the current grid" },
	{ "gridColour",		"NNNn",		VTypes::NoData,
		"double r, double g, double b, double a = 1.0",
		"Set the colour of the primary grid surface (when not using a colourscale)" },
	{ "gridColourSecondary",	"NNNn",		VTypes::NoData,
		"double r, double g, double b, double a = 1.0",
		"Set the colour of the secondary grid surface (when not using a colourscale)" },
	{ "gridColourScale",	"N",		VTypes::NoData,
		"int scaleid",
		"Links the surface to the specified colour scale (or zero to return to internal colour)" },
	{ "gridCubic",		"N",		VTypes::NoData,
		"double l",
		"Setup a cubic axis system for the current grid" },
	{ "gridCutoff",		"Nn",		VTypes::NoData,
		"double lcut, [double ucut]",
		"Set the lower and (if supplied) upper cutoffs for the current grid" },
	{ "gridCutoffSecondary","Nn",		VTypes::NoData,
		"double lcut, [double ucut]",
		"Set the lower and (if supplied) upper secondary cutoffs for the current grid" },
	{ "gridLoopOrder",	"S",		VTypes::NoData,
		"string looporder",
		"Set the loop ordering (e.g. 'xyz', 'zyx', '213') to use in 'addnextgridpoint'" },
	{ "gridOrigin",		"NNN",		VTypes::NoData,
		"double x, double y, double z",
		"Set the origin of the axes system for the current grid" },
	{ "gridOrtho",		"NNN",		VTypes::NoData,
		"double a, double b, double c",
		"Setup an orthorhombic axis system for the current grid" },
	{ "gridOutline",	"B",		VTypes::NoData,
		"bool showOutline",
		"Set whether the outline of the total grid volume should be drawn" },
	{ "gridPeriodic",	"B",		VTypes::NoData,
		"bool periodic",
		"Set whether the grid data is periodic" },
	{ "gridSecondary",	"B",		VTypes::IntegerData,
		"bool on",
		"Set whether to draw the surface defined by the secondary cutoffs" },
	{ "gridStyle",		"C",		VTypes::NoData,
		"string style",
		"Set the drawing style of the primary surface of the current grid" },
	{ "gridStyleSecondary",		"C",		VTypes::NoData,
		"string style",
		"Set the drawing style of the secondary surface of the current grid" },
	{ "gridUseZ",		"B",		VTypes::IntegerData,
		"bool usez",
		"Whether a 2D surface uses the vertex data value as its z (height) data" },
	{ "gridVisible",	"B",		VTypes::IntegerData,
		"bool visible",
		"Set (or return) whether the current grid is visible" },
	{ "initGrid",		"SNNN",		VTypes::IntegerData,
		"string type, int nx, int ny, int nz",
		"Initialise grid, setting maximum number of points along each axis (if gridtype requires it)" },
	{ "loadGrid",		"C",		VTypes::GridData,
		"string filename",
		"Load grid data" },
	{ "newGrid",		"C",		VTypes::GridData,
		"string title",
		"Create new grid data" },

	// Image commands
	{ "saveBitmap",		"CCnnn",	VTypes::NoData,
		"string format, string filename, int width = -1, int height = -1, int quality = -1",
		"Save the current model view as a bitmap image: formats available are bmp, jpg, png, ppm, xbm, and xpm" },
	{ "saveMovie",		"Cnnnnnnn",	VTypes::NoData,
		"string filename, int width = -1, int height = -1, int quality = -1, int firstframe = 1, int lastframe = <last>, int frameskip = 0, int fps = 25",
		"Save a movie of the trajectory associated with the current model" },
	{ "saveVibrationMovie",	"CNNNNNNN",	VTypes::NoData,
		"string filename, int width, int height, int quality, int vibrationId, int framespercycle, int ncycles, int fps",
		"Save the specified vibration of the current model as a movie" },
	
	// Labeling commands
	{ "clearLabels",	"",		VTypes::NoData,
		"",
		"Remove all atom labels in the current model" },
	{ "label",		"Ca",		VTypes::NoData,
		"string label, Atom|int id = 0",
		"Add labels to the current atom selection (or specified atom)" },
	{ "removeLabel",	"Ca",		VTypes::NoData,
		"string label, Atom|int id = 0",
		"Remove labels from the current atom selection (or specified atom)" },
	{ "removeLabels",	"a",		VTypes::NoData,
		"Atom|int id = 0",
		"Remove all labels from the current atom selection (or specified atom)" },

	// Math Commands.
	{ "abs",		"N",		VTypes::DoubleData,
		"double number",
		"Return absolute (i.e. positive) of value" },
	{ "acos",		"N",		VTypes::DoubleData,
		"double cosx",
		"Return inverse cosine (in degrees) of supplied argument" },
	{ "asin",		"N",		VTypes::DoubleData,
		"double sinx",
		"Return inverse sine (in degrees) of supplied argument" },
	{ "atan",		"N",		VTypes::DoubleData,
		"double tanx",
		"Return inverse tangent (in degrees) of supplied argument" },
	{ "cos",		"N",		VTypes::DoubleData,
		"double degrees",
		"Return cosine of specified angle (supplied in degrees)" },
	{ "dotProduct",		"UU",		VTypes::DoubleData,
		"vector u, vector v",
		"Calculate dot product of the two supplied vectors" },
	{ "exp",		"N",		VTypes::DoubleData,
		"double value",
		"Return exponential of the argument" },
	{ "ln",			"N",		VTypes::DoubleData,
		"double value",
		"Return natural (base-e) logarithm" },
	{ "log",		"N",		VTypes::DoubleData,
		"double value",
		"Return base-10 logarithm" },
	{ "nint",		"N",		VTypes::IntegerData,
		"double number",
		"Return nearest integer to supplied real value" },
	{ "normalise",		"U",		VTypes::DoubleData,
		"vector v",
		"Normalise the values of the 3-vector supplied" },
	{ "random",		"",		VTypes::DoubleData,
		"",
		"Return a random number between 0.0 and 1.0, exclusive of 1.0" },
	{ "randomI",		"i",		VTypes::IntegerData,
		"int max = 0",
		"Return a random integer between 0 and MAXINT-1, or 0 and (max-1) inclusive" },
	{ "sin",		"N",		VTypes::DoubleData,
		"double degrees",
		"Return sine of specified angle (supplied in degrees)" },
	{ "sqrt",		"N",		VTypes::DoubleData,
		"double number",
		"Return square root of number" },
	{ "tan",		"N",		VTypes::DoubleData,
		"double degrees",
		"Return tangent of specified angle (supplied in degrees)" },

	// MC commands
	{ "printMC",		"",		VTypes::NoData,
		"",
		"Print current Monte Carlo parameters" },
	
	// Measurements
	{ "clearMeasurements",	"",		VTypes::NoData,
		"",
		"Clear all measurements in the current model" },
	{ "geometry",		"AAaa",		VTypes::DoubleData,
		"Atom|int id1, Atom|int id2, Atom|int id3 = 0, Atom|int id4 = 0", 
		"Return the measurement (distance, angle, or torsion) between the specified atoms" },
	{ "listMeasurements",	"",		VTypes::NoData,
		"",
		"List all measurements in the current model" },
	{ "measure",		"AAaa",		VTypes::DoubleData,
		"Atom|int id1, Atom|int id2, Atom|int id3 = 0, Atom|int id4 = 0", 
		"Calculate, display (in the model) and return a measurement between the specified atoms" },
	{ "measureSelected",	"N",		VTypes::NoData,
		"int natoms", 
		"Measure all of the specified bound interaction type in the current atom selection" },

	// Messaging and GUI
	{ "createDialog",	"c",		VTypes::DialogData,
		"string title = <none>",
		"Create and return new, empty dialog" },
	{ "defaultDialog",	"c",		VTypes::DialogData,
		"string title = <none>",
		"Return current default dialog, setting title of window" },
	{ "error",		"Cz*",		VTypes::NoData,
		"string format ...",
		"Raise an error message (causes exit of current command list) (C printf-style)" },
	{ "message",		"CCz*",		VTypes::NoData,
		"string title, string format ...",
		"Raise a message box with given title and (C printf-style) content string" },
	{ "printf",		"Cz*",		VTypes::NoData,
		"string format ...",
		"Print a message (C printf-style)" },
	{ "showDefaultDialog",	"c",		VTypes::IntegerData,
		"string newTitle = <none>",
		"Show (execute) the default dialog associated to this filter/script/function, returning 1 for OK or 0 for Canceled" },
	{ "verbose",		"Cz*",		VTypes::NoData,
		"string format ...",
		"Print a message when verbose output is enabled (C printf-style)" },
	
	// Minimisation commands
	{ "cgMinimise",		"n",		VTypes::NoData,
		"int maxsteps = 100",
		"Run a conjugate gradient minimiser on the current model" },
	{ "converge",		"NN",		VTypes::NoData,
		"double energy, double forces",
		"Set energy and RMS force convergence limits for minimisation algorithms" },
	{ "lineTol",		"N",		VTypes::NoData,
		"double tolerance",
		"Set tolerance of line minimiser" },
	{ "mcMinimise",		"n",		VTypes::NoData,
		"int maxsteps = 100",
		"Run Monte Carlo minimiser on the current model" },
	{ "mopacMinimise",	"c",		VTypes::NoData,
		"string options = null",
		"Use MOPAC to minimise the current model. Note that the options string, if specified, should represent a complete MOPAC control string (i.e. including optimisation method etc." },
	{ "sdMinimise",		"nb",		VTypes::NoData,
		"int maxsteps = 100, bool simple = false",
		"Run steepest descent minimiser on the current model (using either simplistic or line-minimised methods)" },
	
	// Model commands
	{ "createAtoms",	"",		VTypes::NoData,
		"",
		"Create enough atoms in the current trajectory frame to match the parent model" },
	{ "currentModel",	"m",		VTypes::ModelData,
		"string|int|Model m = null",
		"Return reference to the current model, or set the current model" },
	{ "deleteModel",	"m",		VTypes::NoData,
		"string|int|Model m = null",
		"Delete the named (loaded) model" },
	{ "finaliseModel",	"",		VTypes::NoData,
		"",
		"Finalise the current model" },
	{ "firstModel",		"",		VTypes::ModelData,
		"",
		"Make the first loaded/created model current" },
	{ "getModel",		"M",		VTypes::ModelData,
		"string|int|Model m",
		"Find the named (loaded) model, and return a reference to it" },
	{ "info",		"",		VTypes::NoData,
		"",
		"Print data on the current model" },
	{ "lastModel",		"",		VTypes::ModelData,
		"",
		"Make the last loaded/created model current" },
	{ "listModels",		"",		VTypes::NoData,
		"",
		"List the currently-loaded models" },
	{ "loadModel",		"Cc",		VTypes::ModelData,
		"string filename, string filter = <auto>",
		"Load a model from filename, using specific filter if provided, returning pointer to new model" },
	{ "logInfo",		"",		VTypes::NoData,
		"",
		"Print log information for model" },
	{ "modelTemplate",	"",		VTypes::NoData,
		"",
		"Template the atoms in the current trajectory frame, matching the parent model" },
	{ "newModel",		"C",		VTypes::ModelData,
		"string name",
		"Create a new model" },
	{ "nextModel",		"",		VTypes::ModelData,
		"",
		"Skip to the next loaded model" },
	{ "parentModel",	"",		VTypes::ModelData,
		"",
		"Make the parent model of the current trajectory the current, viewed model" },
	{ "prevModel",		"",		VTypes::ModelData,
		"",
		"Skip to the previous loaded model" },
	{ "saveModel",		"CC",		VTypes::IntegerData,
		"string format, string filename",
		"Save the current model in the specified model format" },
	{ "saveSelection",	"CC",		VTypes::IntegerData,
		"string format, string filename",
		"Save the current selection in the current model (including cell, if any) in the specified model format" },
	{ "setName",		"C",		VTypes::NoData,
		"string name",
		"Set the name of the current model" },
	{ "showAll",		"",		VTypes::NoData,
		"",
		"Show all atoms in the current model" },

	// Model Extras commands
	{ "newBasisShell",	"AS",		VTypes::BasisShellData,
		"Atom|int id, string type",
		"Adds a new basis shell definition with the specified type, centred on the specified atom" },
	{ "newEigenVector",	"n",		VTypes::EigenvectorData,
		"int size = -1",
		"Creates a new, empty eigenvector in the model to match the size of the current basis functions list (if a size is not specified" },
	{ "newVibration",	"c",		VTypes::VibrationData,
		"string name =  null",
		"Create a new vibration in the current model" },
	{ "printZMatrix",	"",		VTypes::NoData,
		"",
		"Print the zmatrix for the current model, creating first if necessary" },

	// Pattern commands
	{ "clearPatterns",	"",		VTypes::NoData,
		"",
		"Remove all pattern definitions from the current model" },
	{ "createPatterns",	"",		VTypes::IntegerData,
		"",
		"Automatically determine pattern definitions for the current model" },
	{ "currentPattern",	"p",		VTypes::PatternData,
		"string|int|Pattern p = null",
		"Make the specified pattern (or pattern id) the current pattern, or return current pattern" },
	{ "fixPattern",		"B",		VTypes::NoData,
		"bool fixed",
		"Set whether atoms in the current pattern are fixed in minimisations" },
	{ "getPattern",		"P",		VTypes::PatternData,
		"string|int|Pattern p",
		"Return a reference to the specified pattern" },
	{ "listPatterns",	"",		VTypes::NoData,
		"",
		"Print the pattern definition for the current model" },
	{ "newPattern",		"CNN",		VTypes::PatternData,
		"string name, int nMolecules, int nAtoms",
		"Add a pattern definition 'node' to the current model" },

	// Pores commands
	{ "createScheme",	"C[nnn]nnb",	VTypes::IntegerData,
		"string name, int nx = 50, int ny = 50, int nz = 50, double minSizePcnt = 0.05, int atomExtent = 2, bool copyToBuilder = true",
		"Create a partitioning scheme for the disorder builder from free space in the current model" },
	{ "drillPores",		"CNNNn[nnn]",	VTypes::NoData,
		"string poreType, double sizeParameter, int n1, int n2, int originFace = 3, double vx = 0.0, double vy = 0.0, double vz = 1.0",
		"Drill an n1 x n2 array of pores in the current model" },
	{ "selectPores",	"CNNNn[nnn]",	VTypes::IntegerData,
		"string poreType, double sizeParameter, int n1, int n2, int originFace = 3, double vx = 0.0, double vy = 0.0, double vz = 1.0",
		"Select atoms in an n1 x n2 array of pores in the current model" },
	{ "terminate",		"",		VTypes::NoData,
		"",
		"Terminate atoms in the current selection" },

	// Read / Write Commands
	{ "addReadOption",	"C",		VTypes::NoData,
		"string option",
		"Add a read option: usequotes, skipblanks, stripbrackets" },
	{ "eof",		"",		VTypes::IntegerData,
		"",
		"Return whether the end of the file has been reached (or only whitespace remains)" },
	{ "filterFilename",	"",		VTypes::StringData,
		"",
		"Returns the name of the file that the current filter is reading from / writing to" },
	{ "find",		"C^c",		VTypes::IntegerData,
		"string source, string var = null",
		"Search for a string in the input file (placing matching line in optional variable)" },
	{ "getLine",		"^C",		VTypes::IntegerData,
		"string var",
		"Read the next line from the file, placing in variable supplied, and returning read success" },
	{ "nextArg",		"^Z",		VTypes::IntegerData,
		"string|int|double &var",
		"Read the next whitespace-delimited argument from the current file" },
	{ "nextVarArg",		"^C^Z",		VTypes::IntegerData,
		"string sourcevar, string|int|double &var",
		"Read the next whitespace-delimited argument from the specified string variable" },
	{ "peekChar",		"",		VTypes::StringData,
		"", 
		"Peek the next character from the current input file, and return it as a string" },
	{ "peekCharI",		"",		VTypes::IntegerData,
		"", 
		"Peek the next character from the current input file, and return its ASCII code" },
	{ "readChars",		"Nb",		VTypes::StringData,
		"int nchars, bool skipeol = true",
		"Read a number of characters from the input file" },
	{ "readDouble",		"n",		VTypes::DoubleData,
		"int nbytes = sizeof(double)",
		"Read a floating point value from the (binary) input file" },
	{ "readDoubleArray",	"&DN",		VTypes::IntegerData,
		"double arrayvar, int nvalues",
		"Read floating point values from the (binary) input file, placing in the array provided" },
	{ "readInt",		"n",		VTypes::IntegerData,
		"int nbytes = sizeof(int)",
		"Read an integer value from the (binary) input file" },
	{ "readIntArray",	"&IN",		VTypes::IntegerData,
		"int arrayvar, int nvalues",
		"Read integer values from the (binary) input file, placing in the array provided" },
	{ "readLine",		"^Z*",		VTypes::IntegerData,
		"string|double|int var, ...",
		"Read a line from the input file, and split into supplied variables according to delimiting whitespace" },
	{ "readLineF",		"C^z*",		VTypes::IntegerData,
		"string format, ...",
		"Read a line from the input file, and parse into supplied variables using format string" },
	{ "readNext",		"^Z",		VTypes::IntegerData,
		"string|int|double var",
		"Read the next delimited item from the last line read with 'getline' and place in the variable supplied" },
	{ "readVar",		"C^z*",		VTypes::IntegerData,
		"string source, string|int|double var, ...",
		"Parse delimited arguments from a character variable" },
	{ "readVarF",		"CC^z*",	VTypes::IntegerData,
		"string source, string format, string|int|double var, ...",
		"Parse a character variable according to the supplied format" },
	{ "removeReadOption",	"C",		VTypes::NoData,
		"string option",
		"Remove a read option" },
	{ "rewind",		"",		VTypes::NoData,
		"",
		"Rewind to the start of the input file" },
	{ "skipChars",		"N",		VTypes::NoData,
		"int nChars",
		"Skip a number of characters in the input file" },
	{ "skipLine",		"n",		VTypes::NoData,
		"int nLines = 1",
		"Skip a number of lines in the input file" },
	{ "writeLine",		"Z*",		VTypes::NoData,
		"string|double|int data ...",
		"Write an formatted line to the output file, with data items separated by spaces" },
	{ "writeLineF",		"Cz*",		VTypes::NoData,
		"string format, string|double|int data ...",
		"Write a formatted line to the output file" },
	{ "writeVar",		"^Cz*",		VTypes::NoData,
		"string destVar, string|double|int data ...",
		"Write a delimited series of arguments to the supplied character variable" },
	{ "writeVarF",		"^CCz*",	VTypes::NoData,
		"string destVar, string format, string|double|int data ...",
		"Write a formatted line to the supplied character variable" },

	// Script commands
	{ "listScripts",	"",		VTypes::NoData,
		"",
		"List available scripts" },
	{ "loadScript",		"Cc",		VTypes::NoData,
		"string filename, string nickname = <null>",
		"Load script from file" },
	{ "runScript",		"S",		VTypes::NoData,
		"string name",
		"Execute the named script" },

	// Selection commands
	{ "deSelect",		"Z*",		VTypes::IntegerData,
		"string|int|Element atom(s) ...",
		"Deselect specific atoms / ranges in the current model" },
	{ "deSelectFor",	"C",		VTypes::IntegerData,
		"string code",
		"Deselect all atoms based on the current conditional code, which will be inserted into a loop over all atoms" },
	{ "deSelectF",		"Cz*",		VTypes::IntegerData,
		"string format ...",
		"Select specific atoms / ranges in the current model using a printf-style formatted string" },
	{ "deSelectType",	"EC",		VTypes::IntegerData,
		"Element el, string neta",
		"Deselect all atoms that match the provided atomtype description" },
	{ "expand",		"n",		VTypes::IntegerData,
		"int nsteps = 1",
		"Expands the current atom selection along bonds" },
	{ "invert",		"",		VTypes::IntegerData,
		"",
		"Invert the current selection" },
	{ "select",		"Z*",		VTypes::IntegerData,
		"string|int|Element atom(s) ...",
		"Select specific atoms / ranges in the current model" },
	{ "selectAll",		"",		VTypes::NoData,
		"",
		"Select all atoms in the current model" },
	{ "selectFFType",	"C",		VTypes::IntegerData,
		"string typename",
		"Select all atoms of a specific forcefield type" },
	{ "selectFor",		"C",		VTypes::IntegerData,
		"string code",
		"Select all atoms based on the current conditional code, which will be inserted into a loop over all atoms" },
	{ "selectF",		"Cz*",		VTypes::IntegerData,
		"string format ...",
		"Select specific atoms / ranges in the current model using a printf-style formatted string" },
	{ "selectInsideCell",	"b",		VTypes::IntegerData,
		"bool usemoleculecog = false",
		"Select all atoms (or molecule centres) which are inside the current unit cell" },
	{ "selectionCog",	"",		VTypes::VectorData,
		"",
		"Return centre of geometry of current selection" },
	{ "selectionCom",	"",		VTypes::VectorData,
		"",
		"Return centre of mass of current selection" },
	{ "selectLine",		"NNNNNNN",	VTypes::IntegerData,
		"double lx, double ly, double lz, double x, double y, double z, double dr",
		"Select all atoms within a distance dr, from a line defined by vector {lx,lyl,z} and containing point {x,y,z}" },
	{ "selectMiller",	"NNNn",		VTypes::NoData,
		"int h, int k, int l, bool inside = false",
		"Select all atoms that would be removed if a cleave of the supplied Miller plane `was performed" },
	{ "selectMolecule",	"A",		VTypes::IntegerData,
		"Atom|int target",
		"Select the whole bound fragment/molecule to which the target atom belongs" },
	{ "selectNone",		"",		VTypes::NoData,
		"",
		"Deselect all atoms in the current model" },
	{ "selectOverlaps",	"n",		VTypes::IntegerData,
		"double tolerance = 0.2",
		"Select all atoms which are within a given distance of each other" },
	{ "selectOutsideCell",	"b",		VTypes::IntegerData,
		"bool useMoleculeCog = false",
		"Select all atoms (or molecule centres) which are outside the current unit cell" },
	{ "selectPattern",	"p",		VTypes::IntegerData,
		"string|int|Pattern p",
		"Select all atoms in the current (or named) pattern" },
	{ "selectRadial",	"AN",		VTypes::IntegerData,
		"Atom|int target, double radius",
		"Select all atoms less than some distance from a central atom" },
	{ "selectTree",		"Ah",		VTypes::IntegerData,
		"Atom|int i, bond exclude = NULL",
		"Select all atoms which are within a given distance of each other" },
	{ "selectType",		"EC",		VTypes::IntegerData,
		"Element el, string neta",
		"Select all atoms that match the provided atomtype description (returning the number matched)" },
	
	// Site commands
	{ "getSite",		"C",		VTypes::NoData,
		"string name",
		"Select the defined site and make it current" },
	{ "listSites",		"",		VTypes::NoData,
		"",
		"Print all sites defined for the current model" },
	{ "newSite",		"CCc",		VTypes::NoData,
		"string name, string pattern, string atomlist = null",
		"Adds a new site definition to the current model" },
	{ "siteAxes",		"CC",		VTypes::NoData,
		"string atomlist, string atomlist",
		"Set the axis definitions for the current site" },

	// String Commands
	{ "afterStr",		"CCb",		VTypes::StringData,
		"string source, string search, bool sourceonfail = false",
		"Return the part of the source string after the first occurrence of the search string, optionally returning the complete source string if no match is found" },
	{ "atof",		"C",		VTypes::DoubleData,
		"string s",
		"Convert supplied string to floating point number" },
	{ "atoi",		"C",		VTypes::IntegerData,
		"string s",
		"Convert supplied string to integer number" },
	{ "beforeStr",		"CCb",		VTypes::StringData,
		"string source, string search, bool sourceonfail = false",
		"Return the part of the string before the first occurrence of the search string, optionally returning the complete source string if no match is found" },
	{ "contains",		"CC",		VTypes::IntegerData,
		"string source, string search",
		"Return the number of times the search string occurs in the source string" },
	{ "ftoa",		"N",		VTypes::StringData,
		"double d",
		"Convert supplied real value to a string" },
	{ "itoa",		"N",		VTypes::StringData,
		"int n",
		"Convert supplied integer to a string" },
	{ "lowerCase",		"C",		VTypes::StringData,
		"string source",
		"Returns the source string with all uppercase characters converted to lowercase" },
	{ "replaceChars",	"CCC",		VTypes::StringData,
		"string source, string searchchars, string replacechar",
		"Replace all occurrences of the supplied characters in the supplied variable with the supplied character" },
	{ "replaceStr",		"CCC",		VTypes::StringData,
		"string source, string searchstr, string replacestr",
		"Replace all occurrences of 'searchstr' in the supplied string with 'replacestr'" },
	{ "removeStr",		"CC",		VTypes::StringData,
		"string source, string searchstr",
		"Remove all occurrences of 'searchstr' from the supplied string" },
	{ "sprintf",		"^Cz*",		VTypes::NoData,
		"string targetvar, string format ...",
		"Print a message to the supplied string variable (C printf-style)" },
	{ "stripChars",		"CC",		VTypes::StringData,
		"string source, string searchchars",
		"Strip all occurrences of the supplied characters from the supplied string" },
	{ "substr",		"CNN",		VTypes::StringData,
		"string source, int startpos, int nchars",
		"Return a substring of the supplied string (N.B. first character is index 1)" },
	{ "toa",		"Cz*",		VTypes::StringData,
		"string format ...",
		"Return a string formatted in the C printf style)" },
	{ "upperCase",		"C",		VTypes::StringData,
		"string source",
		"Returns the source string with all lowercase characters converted to uppercase" },
		

	// System commands
	{ "debug",		"C",		VTypes::NoData,
		"string mode",
		"Toggle debugging for the specified mode" },
	{ "getEnv",		"C",		VTypes::StringData,
		"string varname",
		"Retrieve the named environment variable" },
	{ "getEnvF",		"C",		VTypes::DoubleData,
		"string varname",
		"Retrieve the named environment variable, converting it to a floating-point value" },
	{ "getEnvI",		"C",		VTypes::IntegerData,
		"string varname",
		"Retrieve the named environment variable, converting it to an integer value" },
	{ "_help",		"N",		VTypes::NoData,
		"int commandid",
		"(Internal) Provide short help on the command ID supplied" },
	{ "null",		"^X*",		VTypes::NoData,
		"variable var, ...",
		"Nullify the specified pointer variables" },
	{ "quit",		"",		VTypes::NoData,
		"",
		"Exit the program" },
	{ "searchCommands",	"C",		VTypes::NoData,
		"string cmd",
		"Search all available commands for the string specified" },
	{ "seed",		"N",		VTypes::NoData,
		"int seed",
		"Set the random seed" },
	{ "version",		"",		VTypes::NoData,
		"",
		"Print program version information" },

	// Trajectory commands
	{ "addFrame",		"c",		VTypes::ModelData,
		"string name = null",
		"Add a new trajectory frame to the current model (which becomes the the current model)" },
	{ "clearTrajectory",	"",		VTypes::NoData,
		"",
		"Clear any trajectory data in the current model" },
	{ "finaliseFrame",	"",		VTypes::NoData,
		"",
		"Finalise the current trajectory frame" },
	{ "firstFrame",		"",		VTypes::NoData,
		"",
		"Go to the first frame in the current trajectory" },
	{ "lastFrame",		"",		VTypes::NoData,
		"",
		"Go to the last frame in the current trajectory" },
	{ "loadTrajectory",	"C",		VTypes::IntegerData,
		"string filename",
		"Load the specified trajectory and associate it to the current model" },
	{ "nextFrame",		"",		VTypes::NoData,
		"",
		"Go to the next frame in the current trajectory" },
	{ "prevFrame",		"",		VTypes::NoData,
		"",
		"Go to the previous frame in the current trajectory" },
	{ "seekFrame",		"N",		VTypes::NoData,
		"int frameno",
		"Jump to the specified frame in the current trajectory" },
	
	// Transformation commands
	{ "axisRotate",		"NNNNnnn|AANnnn",	VTypes::NoData,
		"double ax, double ay, double az, double theta, double ox = 0.0, double oy = 0.0, double oz = 0.0  |  Atom|int i, Atom|int j, double theta, double ox = 0.0, double oy = 0.0, double oz = 0.0",
		"Rotate the current selection about a defined axis and origin" },
	{ "centre",		"NNN[bbb]",		VTypes::NoData,
		"double x, double y, double z, bool lockx = false, bool locky = false, bool lockz = false",
		"Centre the atom selection of the current model at the specified coordinates" },
	{ "flipX",		"",			VTypes::NoData,
		"",
		"Flip the current selection's x-coordinates about zero" },
	{ "flipY",		"",			VTypes::NoData,
		"",
		"Flip the current selection's y-coordinates about zero" },
	{ "flipZ",		"",			VTypes::NoData,
		"",
		"Flip the current selection's z-coordinates about zero" },
	{ "matrixConvert",	"NNNNNNNNNNNNnnnnnnnnn",VTypes::NoData,
		"int i_sx, int j_sx, int i_sy, int j_sy, int i_sz, int j_sz, int i_dx, int j_dx, int i_dy, int j_dy, int i_dz, int j_dz, double ox = 0.0, double oy = 0.0, double oz = 0.0  |  double sax, double say, double saz, double sbx, double sby, double sbz, double scx, double scy, double scz, double dax, double day, double daz, double dbx, double dby, double dbz, double dcx, double dcy, double dcz, double ox = 0.0, double oy = 0.0, double oz = 0.0",
		"Transform selected atoms in reference frame specified to destination frame specified" },
	{ "matrixTransform",	"NNNNNNNNNnnn",	VTypes::NoData,
		"double ax, double ay, double az, double bx, double by, double bz, double cx, double cy, double cz, double ox = 0.0, double oy = 0.0, double oz = 0.0",
		"Transform selected atoms by the matrix supplied" },
	{ "mirror",		"C",		VTypes::NoData,
		"string axis",
		"Mirror the atom selection of the current model about its geometric centre in the specified axis" },
	{ "reorient",		"AAAAAANNNNNNNNNnnn",	VTypes::NoData,
		"Atom|int i_sx, Atom|int j_sx, Atom|int i_sy, Atom|int j_sy, Atom|int i_sz, Atom|int j_sz, double dax, double day, double daz, double dbx, double dby, double dbz, double dcx, double dcy, double dcz, double ox = 0.0, double oy = 0.0, double oz = 0.0",
		"Rotate current selection from axis system defined by supplied atoms into specified axis system" },
	{ "setAngle",		"AAAN",		VTypes::NoData,
		"Atom|int i, Atom|int j, Atom|int k, double newAngle",
		"Set the angle between the three specified atoms, keeping 'i' and 'j' in the same position" },
	{ "setAngles",		"Ncb",		VTypes::NoData,
		"double newAngle, string moveType = 'high', bool nudge = false",
		"Set (or nudge) the angle between all angles in the current selection" },
	{ "setDistance",	"AAN",		VTypes::NoData,
		"Atom|int i, Atom|int j, double newDistance",
		"Set the distance between the two specified atoms, keeping 'i' in the same position" },
	{ "setDistances",	"Ncb",		VTypes::NoData,
		"double newDistance, string moveType = 'high', bool nudge = false",
		"Set (or nudge) the distance of all bonds in the current selection" },
	{ "setTorsion",		"AAAAN",	VTypes::NoData,
		"Atom|int i, Atom|int j, Atom|int k, Atom|int l, double newTorsion",
		"Set the torsion between the four specified atoms" },
	{ "setTorsions",	"Ncb",		VTypes::NoData,
		"double newTorsion, string moveType = 'high', bool nudge = false",
		"Set (or nudge) the angle of all selected torsions" },
	{ "translate",		"NNN",		VTypes::NoData,
		"double dx, double dy, double dz",
		"Translate the atom selection of the current model" },
	{ "translateAtom",	"NNN",		VTypes::NoData,
		"double dx, double dy, double dz",
		"Translate the current atom" },
	{ "translateCell",	"NNN",		VTypes::NoData,
		"double dx, double dy, double dz",
		"Translate the current selection along the cell axes by the fractional axes specified" },
	{ "translateWorld",	"NNN",		VTypes::NoData,
		"double dx, double dy, double dz",
		"Translate the current selection in world (view) coordinates" },

	// View
	{ "axisRotateView",	"NNNN",		VTypes::NoData,
		"double ax, double ay, double az, double angle",
		"Rotate the current view about the specified axis (going through the origin)" },
	{ "getView",		"",		VTypes::NoData,
		"",
		"Print the current model's camera rotation matrix and position" },
	{ "orthographic",	"",		VTypes::NoData,
		"",
		"Render in an orthographic projection" },
	{ "perspective",	"n",		VTypes::NoData,
		"[double fov]",
		"Render in a perspective projection" },
	{ "resetView",		"",		VTypes::NoData,
		"",
		"Reset the camera and rotation for the current model" },
	{ "rotateView",		"NN",		VTypes::NoData,
		"double x, double y",
		"Rotate the current model about the x and y axes by the specified amounts" },
	{ "setView",		"NNNNNNNNNNNNn",VTypes::NoData,
		"double ax, double ay, double az, double bx, double by, double bz, double cx, double cy, double cz, double camx, double camy, double camz",
		"Set the camera rotation matrix and position for the current model" },
	{ "speedTest",		"n",		VTypes::NoData,
		"int nrenders = 100",
		"Perform a crude timing of updates to the model display" },
	{ "translateView",	"NNN",		VTypes::NoData,
		"double dx, double dy, double dz",
		"Translate the camera for the current model" },
	{ "viewAlong",		"NNN",		VTypes::NoData,
		"double x, double y, double z",
		"Set the rotation for the current model so the view is along the specified vector" },
	{ "viewAlongCell",	"NNN",		VTypes::NoData,
		"double x, double y, double z",
		"Set the rotation for the current model so the view is along the specified cell vector" },
	{ "zoomView",		"N",		VTypes::NoData,
		"double dz",
		"Zoom in/out the camera - equivalent to 'translateView(0,0,dz);'" },
	{ "zRotateView",	"N",		VTypes::NoData,
		"double dr",
		"Rotate the model in the plane of the screen" }
};

// Return whether command accepts any arguments
bool CommandData::hasArguments()
{
	return arguments[0] == '\0';
}

/*
 * Commands
 */

// Return enumerated command from string
Commands::Function Commands::command(QString name)
{
	// We skip operators and tree-specific nodes
	int result;
	QString lcase = name.toLower();
	for (result = Commands::Declarations+1; result < Commands::nCommands; ++result)
	{
		if (data_[result].keyword == name) break;
		if (data_[result].keyword == lcase)
		{
			Messenger::print("Didn't recognised command '%s' - did you mean '%s' instead?", qPrintable(name), data_[result].keyword);
			return Commands::nCommands;
		}
	}
	return (Commands::Function) result;
}

// Return command name
const char* Commands::command(Commands::Function cf)
{
	return data_[cf].keyword;
}

// Constructor
Commands::Commands(Aten& aten) : aten_(aten)
{
	// Create pointer list
	initPointers();
}

// Destructor
Commands::~Commands()
{
}

// Return function data for specified command
CommandData Commands::data(Commands::Function func)
{
	return data_[func];
}

// Execute specified command
bool Commands::call(Commands::Function cf, CommandNode* node, Bundle& bundle, ReturnValue& rv)
{
	return ((*this).*(pointers_[cf]))(node, bundle, rv);
}
