# Gaussian Import/Export Filter
# Created:	 27/01/2011
# Last modified: 08/09/2011
# ChangeLog:
#	08/09/2011 - Added logfile import filter (from 'g03' filter)
#	08/08/2011 - Added polar function spec for 6-31G, 6-311G, D95, and D95V basis sets. Added Symmetry option. Tweaked layout.
#	27/01/2011 - Initial version.
# Notes:
#	TODO - DFT Functionals cannot be selected yet.

filter(type="exportmodel", name="Gaussian Input", nickname="gaussinp", extension="gjf", glob="*.gjf", id=17)
{
	# Job type
	string runtyp = option("Run Type", "combo", "SP,Opt,Freq,IRC,IRCMax,Scan,Polar,ADMP,BOMD,Force,Stable,Volume", 2, "tab=Job Control@Job Specification", "state@runstack?switchstack");
	int mult = option("Multiplicity", "intspin", 1, 8, 1, 1, "tab=Job Control@Job Specification");
	int charge = option("Charge", "intspin", -1000, 1000, 1, 0, "tab=Job Control@Job Specification");
	option("runstack","stack",12,2,"tab=Job Control@Job Specification", "span=6", "newline");
	# -- SP
	option("No Options", "label", "group=runstack_1");
	# -- Opt
	string opt_method = option("Optimisation Type", "combo", "<default>,QST2,QST3,TS,Saddle=1,Saddle=2,Conical", 1, "group=runstack_2");
	int opt_maxcycles = option("MaxCycles", "intspin", 0, 1000, 10, 0, "group=runstack_2", "newline");
	int opt_maxstep = option("MaxStep", "intspin", 0, 1000, 10, 0, "group=runstack_2");
	int opt_restart = option("Restart", "check", 0, "group=runstack_2");
	# -- Freq
	option("No Options (yet)", "label", "group=runstack_3");
	# -- IRC
	option("No Options (yet)", "label", "group=runstack_4");
	# -- IRCMax
	option("No Options (yet)", "label", "group=runstack_5");
	# -- Scan
	option("No Options (yet)", "label", "group=runstack_6");
	# -- Polar
	option("No Options (yet)", "label", "group=runstack_7");
	# -- ADMP
	option("No Options (yet)", "label", "group=runstack_8");
	# -- BOMD
	option("No Options (yet)", "label", "group=runstack_9");
	# -- Force
	option("No Options (yet)", "label", "group=runstack_10");
	# -- Stable
	option("No Options (yet)", "label", "group=runstack_11");
	# -- Volume
	option("No Options (yet)", "label", "group=runstack_12");
	# Model Chemistry
	string modchem = option("Method", "combo", "AM1,PM3,PM3MM,PM6,PDDG,HF,CASSCF,MP2,MP3,MP4(DQ),MP4(SDQ),MP4(SDTQ),MP5,QCISD,CCD,CCSD,QCISD(T),QCISD(TQ),BD,EPT,CBS,G1,G2,G2MP2,G3,G3MP2,G3B3,G3MP2B3,G4,G4MP2,W1,CIS,TD,EOM,ZINDO,DFTB,CI,GVB", 6, "tab=Job Control@Job Specification", "newline");
	string modchem_opt = option("", "combo", "<default>,R,U,RO", 1, "tab=Job Control@Job Specification");

	# Job Options
	string symmetry = option("Symmetry", "combo", "Symmetry,NoSymmetry", 1, "tab=Job Options@Job Specification");
	int symmetry_loose = option("Loose", "check", 0, "tab=Job Options@Job Specification");

	# Basis Set
	string basis = option("Basic Basis", "combo", "STO-3G,3-21G,6-21G,4-31G,6-31G,6-311G,D95V,D95,SHC,Stevens/Basch/Krauss,LanL2MB,LanL2DZ,SDD,SDDAll,Dunning,Alhrichs,MidiX,EPR,UGBS,MTSmall,DGauss,CBSB7", 5, "tab=Basis Set@Job Specification", "state@basisstack?switchstack");
	option("basisstack", "stack", 22, 5, "tab=Basis Set@Job Specification", "span=2", "newline");
	# -- STO-3G
	option("Elements: ???", "label", "group=basisstack_1", "labelspan=2");
	# -- 3-21G
	option("Elements: H-Xe", "label", "group=basisstack_2", "labelspan=2");
	string basis_321g_diffuse = option("Diffuse", "combo", "<none>,+", 1, "group=basisstack_2", "newline");
	# -- 6-21G
	option("Elements: H-Cl", "label", "group=basisstack_3", "labelspan=2");
	string basis_621g_polar = option("Polarisation", "combo", "<none>,*,**", 1, "group=basisstack_3", "newline");
	# -- 4-31G
	option("Elements: H-Ne", "label", "group=basisstack_4", "labelspan=2");
	string basis_431g_polar = option("Polarisation", "combo", "<none>,*,**", 1, "group=basisstack_4", "newline");
	# -- 6-31G
	option("Elements: H-Kr", "label", "group=basisstack_5", "labelspan=2");
	string basis_631g_diffuse = option("Diffuse", "combo", "<none>,+,++", 1, "group=basisstack_5", "newline");
	string basis_631g_heavypolar = option("Heavy Atom Polarisation", "combo", "<none>,d,2d,3d,df,2df,3df", 1, "group=basisstack_5", "newline");
	string basis_631g_lightpolar = option("Light Atom Polarisation", "combo", "<none>,p,2p,3p,pd,2pd,3pd", 1, "group=basisstack_5", "newline");
	# -- 6-311G
	option("Elements: H-Kr", "label", "group=basisstack_6", "labelspan=2");
	string basis_6311g_diffuse = option("Diffuse", "combo", "<none>,+,++", 1, "group=basisstack_6", "newline");
	string basis_6311g_heavypolar = option("Heavy Atom Polarisation", "combo", "<none>,d,2d,3d,df,2df,3df", 1, "group=basisstack_6", "newline");
	string basis_6311g_lightpolar = option("Light Atom Polarisation", "combo", "<none>,p,2p,3p,pd,2pd,3pd", 1, "group=basisstack_6", "newline");
	# -- D95V
	option("Elements: H-Ne", "label", "group=basisstack_7", "labelspan=2");
	string basis_d95v_diffuse = option("Diffuse", "combo", "<none>,+,++", 1, "group=basisstack_7", "newline");
	string basis_d95v_heavypolar = option("Heavy Atom Polarisation", "combo", "<none>,d", 1, "group=basisstack_7", "newline");
	string basis_d95v_lightpolar = option("Light Atom Polarisation", "combo", "<none>,p", 1, "group=basisstack_7", "newline");
	# -- D95
	option("Elements: H-Cl, except Na and Mg", "label", "group=basisstack_8", "labelspan=2");
	string basis_d95_diffuse = option("Diffuse", "combo", "<none>,+,++", 1, "group=basisstack_8", "newline");
	string basis_d95_heavypolar = option("Heavy Atom Polarisation", "combo", "<none>,d,2d,3d,df,2df,3df", 1, "group=basisstack_8", "newline");
	string basis_d95_lightpolar = option("Light Atom Polarisation", "combo", "<none>,p,2p,3p,pd,2pd,3pd", 1, "group=basisstack_8", "newline");
	# -- SHC
	option("Elements: H-Cl", "label", "group=basisstack_9", "labelspan=2");
	string basis_shc_polar = option("Polarisation", "combo", "<none>,*", 1, "group=basisstack_9", "newline");
	# -- Stevens/Basch/Krauss
	option("Elements: H-Rn", "label", "group=basisstack_10", "labelspan=2");
	string basis_sbk_type = option("Basis", "combo", "CEP-4G,CEP-31G,CEP-121G", 1, "group=basisstack_10", "newline");
	string basis_sbk_polar = option("Polarisation", "combo", "<none>,*", 1, "group=basisstack_10", "newline");
	# -- LanL2MB
	option("Elements: H-La, Hf-Bi", "label", "group=basisstack_11", "labelspan=2");
	# -- LanL2DZ
	option("Elements: H, Li-La, Hf-Bi", "label", "group=basisstack_12", "labelspan=2");
	# -- SDD
	option("Elements: All, except Fr and Ra", "label", "group=basisstack_13", "labelspan=2");
	# -- SDDAll
	option("Elements: All, except Fr and Ra", "label", "group=basisstack_14", "labelspan=2");
	# -- Dunning
	option("Elements: H-Ar, Ca-Kr", "label", "group=basisstack_15", "labelspan=2");
	string basis_dunning_type = option("Basis", "combo", "cc-pVDZ,cc-pVTZ,cc-pVQZ,cc-pV5Z,cc-pV6Z", 1, "group=basisstack_15", "newline");
	int basis_dunning_diffuse = option("Diffuse (AUG)", "check", 0, "group=basisstack_15", "newline");
	# -- Alhrichs
	option("Elements: All, except Fr and Ra", "label", "group=basisstack_16", "labelspan=2");
	string basis_alhrichs_type = option("Basis", "combo", "SV,SVP,TZV,TZVP,QZVP", 1, "group=basisstack_16", "newline");
	# -- MidiX
	option("Elements: H, C-F, S-Cl, I, Br", "label", "group=basisstack_17", "labelspan=2");
	# -- EPR
	option("Elements: H, C-F, S-Cl, I, Br", "label", "group=basisstack_18", "labelspan=2");
	string basis_epr_type = option("Basis", "combo", "EPR-II,EPR-III", 1, "group=basisstack_18", "newline");
	# -- UGBS
	option("Elements: H-Lr", "label", "group=basisstack_19", "labelspan=2");
	string basis_ugbs_polar = option("Polarisation", "combo", "<none>,1,2,3", 1, "group=basisstack_19", "newline");
	string basis_ugbs_polartype = option("Polarisation Type", "combo", "P,V,O", 1, "group=basisstack_19", "newline");
	string basis_ugbs_diffuse = option("Diffuse", "combo", "<none>,+,++,2+,2++", 1, "group=basisstack_19", "newline");
	# -- MTSmall
	option("Elements: H-Ar", "label", "group=basisstack_20", "labelspan=2");
	# -- DGauss
	option("Elements: See Basis Options", "label", "group=basisstack_21", "labelspan=2");
	string basis_dgauss_type = option("Basis", "combo", "'DGDZVP (H-Xe)','DGDZVP2 (H-F,Al-Ar,Sc-Zn)','DGTZVP (H,C-F,Al-Ar)'", 1, "group=basisstack_21", "newline");
	# -- CBSB7
	option("Elements: H-Kr", "label", "group=basisstack_22", "labelspan=2");
	string basis_cbsb7_diffuse = option("Diffuse", "combo", "<none>,+,++", 1, "group=basisstack_22", "newline");

	# Coordinates
	int coordtype = option("coordgroup", "radiogroup");
	option("Cartesian", "radio", "coordgroup", 1, "tab=Coordinates@Job Specification");
	option("ZMatrix", "radio", "coordgroup", 0, "tab=Coordinates@Job Specification");
			
	#
	# Write Link0 Section
	#
	# TODO

	# Write Route Section - Run Type
	string line, keyword, options;
	switch (runtyp)
	{
		case ("SP"):
			keyword = "# SP";
			break;
		case ("Opt"):
			options = "";
			if (opt_method != "<default>") options += opt_method;
			if (opt_maxcycles != 0) { if (options != "") options += ","; options += "MaxCycles=" + itoa(opt_maxcycles); }
			if (opt_maxstep != 0) { if (options != "") options += ","; options += "MaxStep=" + itoa(opt_maxstep); }
			if (opt_restart) { if (options != "") options += ","; options += "Restart"; }
			if (options == "") keyword = "# Opt";
			else keyword = toa("# Opt=(%s)", options);
			break;
		default:
			error("Unrecognised runtype encountered while writing route section.");
	}
	line = keyword;
	# -- Add on other general options to this line
	if (symmetry == "NoSymmetry") line += " NoSymm";
	else if (symmetry_loose) line += " Symm=Loose";
	# -- Write line
	writelinef("%s\n", line);

	# Write Route Section - Method/Basis
	line = "# ";
	options = "";
	if (modchem_opt != "<default>") line += modchem_opt;
	line += modchem + "/";
	switch (basis)
	{
		case ("3-21G"): if (basis_321g_diffuse == "<none>") options = "3-21G"; else options = "3-21+G"; break;
		case ("6-21G"): if (basis_621g_polar == "<none>") options = "6-21G"; else options = "6-21G" + basis_621g_polar; break;
		case ("4-31G"): if (basis_431g_polar == "<none>") options = "4-31G"; else options = "4-31G" + basis_431g_polar; break;
		case ("6-31G"):
			options = "6-31";
			if (basis_631g_diffuse == "<none>") options += "G"; else options += basis_431g_polar + "G";
			if (basis_631g_heavypolar != "<none>" && basis_631g_lightpolar != "<none>") options += toa("(%s,%s)",basis_631g_heavypolar,basis_631g_lightpolar);
			else if (basis_631g_heavypolar != "<none>") options += toa("(%s)",basis_631g_heavypolar);
			else if (basis_631g_lightpolar != "<none>") options += toa("(%s)",basis_631g_lightpolar);
			break;
		case ("6-311G"):
			if (basis_6311g_diffuse == "<none>") options = "6-311G"; else options = "6-311" + basis_6311g_diffuse + "G"; break;
			if (basis_6311g_heavypolar != "<none>" && basis_6311g_lightpolar != "<none>") options += toa("(%s,%s)",basis_6311g_heavypolar,basis_6311g_lightpolar);
			else if (basis_6311g_heavypolar != "<none>") options += toa("(%s)",basis_6311g_heavypolar);
			else if (basis_6311g_lightpolar != "<none>") options += toa("(%s)",basis_6311g_lightpolar);
		case ("D95V"): 
			options = "D95V";
			if (basis_d95v_diffuse != "<none>") options += basis_d95v_diffuse;
			if (basis_d95v_heavypolar != "<none>" && basis_d95v_lightpolar != "<none>") options += toa("(%s,%s)",basis_d95v_heavypolar,basis_d95v_lightpolar);
			else if (basis_d95v_heavypolar != "<none>") options += toa("(%s)",basis_d95v_heavypolar);
			else if (basis_d95v_lightpolar != "<none>") options += toa("(%s)",basis_d95v_lightpolar);
			break;
		case ("D95"): 
			options = "D95";
			if (basis_d95_diffuse != "<none>") options += basis_d95_diffuse;
			if (basis_d95_heavypolar != "<none>" && basis_d95_lightpolar != "<none>") options += toa("(%s,%s)",basis_d95_heavypolar,basis_d95_lightpolar);
			else if (basis_d95_heavypolar != "<none>") options += toa("(%s)",basis_d95_heavypolar);
			else if (basis_d95_lightpolar != "<none>") options += toa("(%s)",basis_d95_lightpolar);
			break;
		case ("SHC"): if (basis_shc_polar == "<none>") options = "SHC"; else options = "SHC*"; break;
		case ("Stevens/Basch/Krauss"): if (basis_sbk_polar == "<none>") options = basis_sbk_type; else options = basis_sbk_type + "*"; break;
		case ("Dunning"): if (basis_dunning_diffuse) options = "AUG-" + basis_dunning_type; else options = basis_dunning_type; break;
		case ("Alhrichs"): options = basis_alhrichs_type; break;
		case ("EPR"): options = basis_epr_type; break;
		case ("UGBS"):
			options = "UGBS";
			if (basis_ugbs_polar != "<none>") options += basis_ugbs_polar + basis_ugbs_polartype;
			if (basis_ugbs_diffuse != "<none>") options += basis_ugbs_diffuse;
			break;
		case ("DGauss"): options = beforestr(basis_dgauss_type, " "); break;
		case ("CBSB7"): if (basis_cbsb7_diffuse == "<none>") options = "CBSB7"; else options = "CBSB7" + basis_cbsb7_diffuse; break;
		default:
			options = basis;
	}
	line += options;
	writeline(line);
	
	# Blank line, title card, blank line
	model m = aten.frame;
	writelinef("\n%s\n\n",m.name);

	# Charge and multiplicity
	writelinef("%i %i\n", charge, mult);

	# Atom coordinates (or z-matrix)
	if (coordtype == 1) for (atom i = aten.frame.atoms; i != 0; ++i) writelinef("%-5s  %12.6f %12.6f %12.6f\n", i.symbol,i.rx,i.ry,i.rz);
	else writezmatrix(aten.frame);
}

filter(type="importmodel", name="Gaussian03 Log File", nickname="g03log", extension="log", extension="out", glob="*.log|*.out", zmap="name", search="Gaussian(R) 03 program", id=911)
{
	# Variable declaration
	int result,nstructures,natoms,n,el,orientation;
	string line,name,discard;
	atom i;
	double rx,ry,rz;

	# Find input orientation and determine number of atoms
	orientation = 0;
	if (find("Input orientation:")) orientation = 1;
	else if (find("Standard orientation:")) orientation = 2;
	if (orientation == 0) error("Couldn't find any coordinates!");
	# Skip four header lines
	skipline(4);
	# Create a new model, and store its pointer for use later
	model m = newmodel(filterfilename());
	natoms = 0;
	do
	{
		readline(n, el, discard, rx, ry, rz);
		if (el != 0)
		{
			natoms++;
			i = newatom(el,rx,ry,rz);
		}
	} while (el != 0);
	printf("There are %i atoms in the structure.\n", natoms);

	# Now search for sets of coordinate
	nstructures = 0;
	while (!eof())
	{
		# Lines containing 'COORDINATES OF ALL ATOMS ARE' are the beginning of coordinate sections
		result = 0;
		if (orientation == 1) result = find("Input orientation:");
		else if (orientation == 2) result = find("Standard orientation:");
		if (result)
		{
			# Found a set of coordinates. Skip 4 lines and then read coordinates
			nstructures++;
			skipline(4);
			writevarf(name, "Frame %i", nstructures);
			addframe(name);
			for (n=1; n<=natoms; ++n)
			{
				readline(n,el,discard,rx,ry,rz);
				newatom(el,rx,ry,rz);
			}
			# Recalculate bonding
			rebond();
			finaliseframe();
		}
	}

	finalisemodel();
}

