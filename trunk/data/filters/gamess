# GAMESS-US Output Filter, and Cartesian Input Model Filters (I/O) (for v1.2+)
# Created:	 14/04/2009
# Last modified: 14/09/2010
# ChangeLog:
#	14/09/2010 - Tweaks to options output in GUI filter. Standard DFTTYPs added.
#	25/08/2010 - Added GUI options to output filter
#	12/05/2010 - Changed id of log file filter to 11 (was 10, which conflicted with MDL Molfile in 'mol')
#	13/10/2009 - Last frame and parent frame from logfile are now deselected.
# Notes:
#	Output model filter sets symmetry to C1, regardless of the actual symmetry.

filter(type="importmodel", name="GAMESS-US Log File", nickname="gamuslog", extension="log", glob="*.log", zmap="name", search="GAMESS VERSION", id=11)
{
	# Variable declaration
	int result,nstructures,natoms,n;
	string line,e,name,discard;
	double rx,ry,rz;

	# Determine number of atoms - search for line containing 'TOTAL NUMBER OF ATOMS'
	if (!find("TOTAL NUMBER OF ATOMS",line)) error("Couldn't determine number of atoms from GAMESS-US output.");

	# Get number of atoms from line
	readvarf(line, "%48*%i",natoms);

	# Create a new model, and store its pointer for use later
	model m = newmodel("GAMESS-US Output");

	# Now search for sets of coordinate
	nstructures = 0;
	while (!eof())
	{
		# Lines containing 'COORDINATES OF ALL ATOMS ARE' are the beginning of coordinate sections
		if (find("COORDINATES OF ALL ATOMS ARE"))
		{
			# Found a set of coordinates. Skip 2 lines and then read coordinates
			nstructures++;
			skipline(2);
			writevarf(name, "Frame %i", nstructures);
			addframe(name);
			for (n=1; n<=natoms; ++n)
			{
				readline(e,discard,rx,ry,rz);
				newatom(e,rx,ry,rz);
			}
			# Recalculate bonding
			rebond();
			finaliseframe();
		}
	}

	# Now, copy the contents of the current (i.e. last) frame, and paste it into the parent model
	selectall();
	copy();
	selectnone();
	parentmodel();
	paste();
	selectnone();
	finalisemodel();
}

filter(type="importmodel", name="GAMESS-US Cartesian Input", nickname="gamusinp", extension="inp", glob="*.inp", zmap="name", id=5)
{
	# Variables
	string symm,symbol,title;
	int n,z;
	double rx,ry,rz;

	# Search for $DATA section
	if (!find("DATA")) error("Couldn't find 'DATA' section in input file.");

	# Read in title card
	getline(title);
	newmodel(title);

	# Skip over symmetry specification
	readline(symm);
	if (symm <> "C1")
	{
		# Single blank line means the master frame is in use, and only this line to skip
		readline(symm);
		if (symm != "") skipline();
	}
	
	# Coordinates follow, terminated by $END
	readline(symbol,z,rx,ry,rz);
	while (symbol != "$END")
	{
		newatom(symbol,rx,ry,rz);
		readline(symbol,z,rx,ry,rz);
	}

	# Done
	rebond();
	finalisemodel();
}

filter(type="exportmodel", name="GAMESS-US Cartesian Input", nickname="gamusinp", extension="inp", glob="*.inp", id=5)
{
	#
	# GUI Control Definitions
	#

	# General control options ($CONTRL)
	string runtyp = option("Run Type", "combo", "ENERGY,GRADIENT,HESSIAN,GAMMA,OPTIMIZE,TRUDGE,SADPOINT,MEX,IRC,VSCF,DRC,MD,GLOBOP,OPTFMO,GRADEXTR,SURFACE,G3MP2,PROP,RAMAN,NACME,NMR,EDA,TRANSITN,FFIELD,TDHF,TDHFX,MAKEFP,FMO0", 5, "group=Job Control ($CONTRL)");
	string scftyp = option("SCF Type", "combo", "RHF,UHF,ROHF,GVB,MCSCF,NONE", 1, "group=Job Control ($CONTRL)");
	int mult = option("Multiplicity", "intspin", 1, 8, 1, 1, "group=Job Control ($CONTRL)");
	int charge = option("Charge", "intspin", -1000, 1000, 0, 1, "group=Job Control ($CONTRL)");
	string dfttyp = option("DFT Type", "combo", "NONE,'SVWN (...local DFT)','BLYP (...pure DFT GGA)',PW91,B97-D,PBE,PBEsol,'B3LYP (...hybrid DFT GGA)',X3LYP,PBE0,'TPSS (...pure DFT meta-GGA)',TPSSm,'TPSSh (...hybrid DFT meta-GGA)',M06,'SLATER (...pure exchange)',BECKE,GILL,OPTX,PW91X,PBEX,'VWN (...pure correlation)',VWN1,PZ81,P86,LYP,PW91C,PBEc,OP,'SVWN (...combinations)',BLYP,BOP,BP86,GVWN,GPW91,PBEVWN,PBEOP,OLYP,PW91,PBE", 1, "group=Job Control ($CONTRL)", "newline");
	string dftgrid = option("DFT Method", "combo", "GRID,GRIDFREE", 1, "state=GRID@DFT Type?originalitems", "state=GRIDFREE@DFT Type?items=NONE,XALPHA,SLATER,BECKE,DEPRISTO,CAMA,HALF,VWN,PWLOC,LYP,BVWN,BLYP,BPWLOC,B3LYP,CAMB,XVWN,XPWLOC,SVWN,SPWLOC,WIGNER,WS,WIGEXP");
	string tddft = option("TDDFT Type", "combo", "NONE,EXCITE", 1, "group=Job Control ($CONTRL)");
	string mplevl = option("MP Level", "combo", "0,2", 1, "group=Job Control ($CONTRL)");
	string cityp = option("CI Type", "combo", "NONE,CIS,ALDET,ORMAS,FSOCI,GENCI,GUGA", 1, "group=Job Control ($CONTRL)");
	string cctyp = option("CC Type", "combo", "NONE,LCCD,CCD,CCSD,CCSD(T),R-CC,CR-CC,CR-CCL,CCSD(TQ),CR-CC(Q),EOM-CCSD,CR-EOM,CR-EOML,IP-EOM2,EA-EOM2,EA-EOM3A", 1, "group=Job Control ($CONTRL)", "newline");
	string relwfn = option("Rel. Wfn.", "combo", "NONE,DK,RESC,NESC", 1, "group=Job Control ($CONTRL)");
	string exetyp = option("Exe Type", "combo", "RUN,CHECK,DEBUG", 1, "group=Job Control ($CONTRL)");

	# Basis set specification ($BASIS)
	string basis_gbasis = option("Basis", "combo", "MINI,MIDI,STO,N21,N31,N311,DZV,DH,TZV,MC,CCD,CCT,CCQ,CC5,CC6,ACCD,ACCT,ACCQ,ACC5,ACC6,CCDC,CCTC,CCQC,CC5C,CC6C,ACCDC,ACCTC,ACCQC,ACC5C,ACC6C,PC0,PC1,PC2,PC3,PC4,APC0,APC1,APC2,APC3,APC4,SBKJC,HW,MCP-DZP,MCP-TZP,MCP-QZP,IMCP-SR1,IMCP-SR2,IMCP-NR1,IMCP-NR2,MNDO,AM1,PM3", 5, "group=Basis Set ($BASIS)", "newline");
	int basis_ngauss = option("NGAUSS", "intspin", 3,8,6,1, "group=Basis Set ($BASIS)");
	int basis_ndfunc = option("NDFUNC", "intspin", 0,3,0,1, "group=Basis Set ($BASIS)");
	int basis_npfunc = option("NPFUNC", "intspin", 0,3,0,1, "group=Basis Set ($BASIS)");
	int basis_nffunc = option("NFFUNC", "intspin", 0,1,0,1, "group=Basis Set ($BASIS)");
	string basis_diffsp = option("DIFFSP", "combo", ".TRUE.,.FALSE.", 2, "group=Basis Set ($BASIS)");
	string basis_diffs = option("DIFFS", "combo", ".TRUE.,.FALSE.", 2, "group=Basis Set ($BASIS)");

	# Stationary point location options ($STATPT), placed in 'opts' tabs
	string statpt_method = option("Method", "combo", "NR,RFO,QA,SCHLEGEL,CONOPT", 3, "tab=$STATPT@opts", "newline");
	double statpt_opttol = option("Tolerance", "doublespin", 0.0, 1.0, 0.0001, 0.0001, "tab=$STATPT@opts");
	int statpt_nstep = option("NStep", "intspin", 1, 1000000, 20, 5, "tab=$STATPT@opts");

	# Electron density calculation ($ELDENS), placed in 'opts' tabs
	int eldens_ieden = option("Calculate", "check", 0, "tab=$ELDENS@opts", "newline");
	int eldens_morb = option("MORB", "intspin", 0, 10000, 0, 1, "tab=$ELDENS@opts");
	string eldens_where = option("WHERE", "combo", "COMASS,NUCLEI,POINTS,GRID", 2, "tab=$ELDENS@opts");
	string eldens_output = option("OUTPUT", "combo", "PUNCH,PAPER,BOTH", 3, "tab=$ELDENS@opts");

	# Electrostatic potential calculation ($ELPOT), placed in 'opts' tabs
	int elpot_iepot = option("Calculate", "check", 0, "tab=$ELPOT@opts", "newline");
	string elpot_where = option("WHERE", "combo", "COMASS,NUCLEI,POINTS,GRID,PDC", 2, "tab=$ELPOT@opts");
	string elpot_output = option("OUTPUT", "combo", "PUNCH,PAPER,BOTH,NONE", 3, "tab=$ELPOT@opts");

	# Grid specification ($GRID), placed in 'opts' tabs
	int grid_modgrd = option("3D Grid", "check", 0, "tab=$GRID@opts", "newline");
	double grid_size = option("Grid Increment", "doublespin", 0.00001, 2.0, 0.25, 0.1, "tab=$GRID@opts");
	option("ORIGIN", "label", "newline", "tab=$GRID@opts");
	double grid_originx = option("X", "doublespin", -1000.0, 1000, -10.0, 1, "tab=$GRID@opts");
	double grid_originy = option("Y", "doublespin", -1000.0, 1000, -10.0, 1, "tab=$GRID@opts");
	double grid_originz = option("Z", "doublespin", -1000.0, 1000, -10.0, 1, "tab=$GRID@opts");
	option("XVEC", "label", "newline", "tab=$GRID@opts");
	double grid_xvecx = option("X", "doublespin", -1000.0, 1000,  10.0, 1, "tab=$GRID@opts");
	double grid_xvecy = option("Y", "doublespin", -1000.0, 1000, -10.0, 1, "tab=$GRID@opts");
	double grid_xvecz = option("Z", "doublespin", -1000.0, 1000, -10.0, 1, "tab=$GRID@opts");
	option("YVEC", "label", "newline", "tab=$GRID@opts");
	double grid_yvecx = option("X", "doublespin", -1000.0, 1000,  10.0, 1, "tab=$GRID@opts");
	double grid_yvecy = option("Y", "doublespin", -1000.0, 1000, -10.0, 1, "tab=$GRID@opts");
	double grid_yvecz = option("Z", "doublespin", -1000.0, 1000, -10.0, 1, "tab=$GRID@opts");
	option("ZVEC", "label", "newline", "tab=$GRID@opts");
	double grid_zvecx = option("X", "doublespin", -1000.0, 1000,  10.0, 1, "tab=$GRID@opts");
	double grid_zvecy = option("Y", "doublespin", -1000.0, 1000, -10.0, 1, "tab=$GRID@opts");
	double grid_zvecz = option("Z", "doublespin", -1000.0, 1000, -10.0, 1, "tab=$GRID@opts");

	#
	# Write Data
	#

	# Write $CONTRL, $SYSTEM and $BASIS groups
	writelinef(" $CONTRL SCFTYP=%s RUNTYP=%s COORD=CART ICHARG=%i MULT=%i $END\n", scftyp, runtyp, charge, mult);
	writelinef(" $CONTRL DFTTYP=%s TDDFT=%s MPLEVL=%s CITYP=%s CCTYP=%s $END\n", beforestr(dfttyp," ",TRUE), tddft, mplevl, cityp, cctyp);
	writelinef(" $BASIS GBASIS=%s NGAUSS=%i NDFUNC=%i NPFUNC=%i $END\n", basis_gbasis, basis_ngauss, basis_ndfunc, basis_npfunc);
	writelinef(" $BASIS NFFUNC=%i DIFFSP=%s DIFFS=%s $END\n", basis_nffunc, basis_diffsp, basis_diffs);
	if ((runtyp == "OPTIMIZE") || (runtyp == "SADPOINT")) writelinef(" $STATPT METHOD=%s NSTEP=%i OPTTOL=%f $END\n", statpt_method, statpt_nstep, statpt_opttol);
	writeline(" $SYSTEM MEMDDI=16 TIMLIM=2400 MWORDS=96 $END");
	writeline(" $GUESS GUESS=HUCKEL $END");
	writeline(" $SCF DIRSCF=.TRUE. $END");

	# Write $ELDENS if required
	if (eldens_ieden == 1) writelinef(" $ELDEN IEDEN=1 MORB=%i WHERE=%s OUTPUT=%s $END\n", eldens_morb, eldens_where, eldens_output);

	# Write $ELPOT if required
	if (elpot_iepot == 1) writelinef(" $ELPOT IEPOT=1 WHERE=%s OUTPUT=%s $END\n", elpot_where, elpot_output);

	# Write $GRID if required
	if ((eldens_where == "GRID") || (elpot_where == "GRID"))
	{
		writelinef(" $GRID MODGRD=%i UNITS=ANGS SIZE=%f $END\n", grid_modgrd, grid_size);
		writelinef(" $GRID ORIGIN(1)=%f ORIGIN(2)=%f ORIGIN(3)=%f $END\n", grid_originx, grid_originy, grid_originz);
		writelinef(" $GRID XVEC(1)=%f XVEC(2)=%f XVEC(3)=%f $END\n", grid_xvecx, grid_xvecy, grid_xvecz);
		writelinef(" $GRID YVEC(1)=%f YVEC(2)=%f YVEC(3)=%f $END\n", grid_yvecx, grid_yvecy, grid_yvecz);
		if (grid_modgrd == 1) writelinef(" $GRID ZVEC(1)=%f ZVEC(2)=%f ZVEC(3)=%f $END\n", grid_zvecx, grid_zvecy, grid_zvecz);
	}

	# Now for the DATA section
	writeline(" $DATA");
	writeline(aten.frame.name);
	writeline("C1");
	for (atom i = aten.frame.atoms; i != 0; ++i) writelinef("%-15s  %4.1f  %12.6f %12.6f %12.6f\n", i.name,i.z*1.0,i.rx,i.ry,i.rz);
	writeline(" $END");
}
