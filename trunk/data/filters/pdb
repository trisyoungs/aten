# Protein databank coordinates import (for v1.2+)
# Created:	 14/04/2009
# Last modified: 16/04/2012
# ChangeLog:
#	16/04/2012 - Tidied up export filter, added crystal/spgrp information.
#	02/09/2011 - Tweaked to use capitalised command/member names in v1.8
# 	16/04/2010 - Element detection now better for programs that 'disregard' published format
# Notes:
#   Residue data etc. are ignored.
#   Trajectory import assumes frames are separated by an 'END' entry

filter(type="importmodel", name="Protein Databank PDB", nickname="pdb", extension="pdb", glob="*.pdb", zmap="firstalpha", id=13)
{
	# Variable declarations
	string keyword,line,e,name;
	element el;
	double rx,ry,rz,ca,cb,cc,alpha,beta,gamma;
	int n,id,i,bondatoms[5],found;

	# Create default model
	newModel("PDB Model");
	found = 0;
	while (!eof())
	{
		readLineF("%-6s%100s",keyword,line);
		if (keyword == "HEADER")
		{
			found = 1;
			setName(line);
		}
		else if (keyword == "CRYST1")
		{
			readVarF(line, "%9f%9f%9f%7f%7f%7f", ca,cb,cc,alpha,beta,gamma);
			cell(ca,cb,cc,alpha,beta,gamma);
		}
		else if ((keyword == "HETATM") || (keyword == "ATOM"))
		{
			#readVar $line "*@5 $e@4 *@1 *@1 *@3 *@1 *@1 *@4 *@1 *@3 $rx@8 $ry@8 $rz@8 *@6 *@6 *@6 *@4 *@2 *@2"
			readVarF(line, "%5i %4s              %8f%8f%8f%22*%2s", id, name, rx, ry, rz, e);
			el = aten.findElement(e);
			if (!el) el = aten.findElement(name);
			if (el) newAtom(el, rx, ry, rz);
			else newAtom(0, rx, ry, rz);
		}
		else if (keyword == "CONECT")
		{
			bondatoms = 0;
			readVar(line,i,bondatoms[1],bondatoms[2],bondatoms[3],bondatoms[4],bondatoms[5]);
			for (n=1; n<=5; ++n) if (bondatoms[n] > 0) newBond(i,bondatoms[n]);
		}	
	}
	if (found == 0) printf("Warning: No HEADER record found in file.");
	finaliseModel();
}

filter(type="exportmodel",name="Protein Databank PDB gromacs compatible", extension="pdb", glob="*.pdb", nickname="pdb", id=13)
{
	# Variable declaration
	Model m = aten.frame;
	Pattern p;
	Atom i, part;
	Bond b;
	String s;
	int k,j,l,n;

	# Make sure patterns exist
	createPatterns();

	writeLine("REMARK   Aten-created PDB file for compatibility with Gromacs rtp output filter");
	writeLineF("REMARK   Model %s\n",m.name);

	# Write unit cell information
	if (m.cell.type != "none")
	{
		writeLineF("CRYST1%9.4f%9.4f%9.4f%7.2f%7.2f%7.2f %s\n", m.cell.a,m.cell.b,m.cell.c,m.cell.alpha,m.cell.beta,m.cell.gamma,m.cell.sgName);
	}

	# Loop over patterns (molecule types) and write atom information
	k=0;
	i=m.atoms;
	for (p = m.patterns; p; ++p)
	{

		++k;

		for (j=1; j<= p.nMols; ++j)
		{
			for (l=1; l<=p.nMolAtoms; ++l)
			{
				s = i.symbol + itoa(l);
				writeLineF("ATOM  %-4i %-5s MOL%i      %i   %6.3f  %6.3f  %6.3f  1.00  0.00           %-4s\n",i.id,s,k,k,i.rx,i.ry,i.rz,i.symbol);
				++i;
			}
		}	
	
	}

	# Loop over atoms and write bond information
	for (i=m.atoms; i; ++i)
	{
		k = 0;
		
		for (b=i.bonds; b; ++b)
		{
			part = b.partner(i);
			if (part.id > i.id)
			{
				if (k == 0) writeLineF("CONECT%5i", i.id);
				writeLineF("%5i", part.id);
				++k;
				if (k == 4)
				{
					writeLineF("\n");
					k = 0;
				}
			}
		}	
		if (k != 0) writeLineF("\n");
	}

	writeLine("TER");
}

filter(type="importtrajectory",name="Multiple Protein Databank PDB", nickname="pdb", extension="pdb", glob="*.pdb", id=13)
{
	int readHeader()
	{
		return TRUE;
	}

	int readFrame()
	{
		# Variables
		double rx, ry, rz, ca, cb, cc, alpha, beta, gamma;
		element el;
		int id, bondatoms[4], i, n;
		string e, name, keyword, line;

		while (1)
		{
			readLineF("%-6s%100s",keyword,line);
			if ((keyword == "HETATM") || (keyword == "ATOM"))
			{
				#readVar $line "*@5 $e@4 *@1 *@1 *@3 *@1 *@1 *@4 *@1 *@3 $rx@8 $ry@8 $rz@8 *@6 *@6 *@6 *@4 *@2 *@2"
				readVarF(line, "%5i %4s              %8f%8f%8f%22*%2s", id, name, rx, ry, rz, e);
				el = aten.findElement(e);
				if (!el) el = aten.findElement(name);
				if (el) newAtom(el, rx, ry, rz);
			}
			else if (keyword == "REMARK") setName(line);
			else if (keyword == "CRYST1")
			{
				readVarF(line, "%9f%9f%9f%7f%7f%7f", ca,cb,cc,alpha,beta,gamma);
				cell(ca,cb,cc,alpha,beta,gamma);
			}
			else if (keyword == "CONECT")
			{
				bondatoms = 0;
				readVar(line,i,bondatoms[1],bondatoms[2],bondatoms[3],bondatoms[4]);
				for (n=1; n<=4; ++n) if (bondatoms[n] > 0) newBond(i,bondatoms[n]);
			}
			else if (keyword == "END") return TRUE;
		}
	}
}

