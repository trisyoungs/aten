# Forcefield output suitable for DL_POLY (FIELD files).
# Last modified: 06/03/2008
exportfield
	name "DL_POLY Forcefield Specification"
	nickname dlpoly
	extension FIELD
	glob *FIELD*
	exact "FIELD"

	# Variable declaration
	double epsilon, sigma
	pattern p
	atom i
	bond b
	angle a
	torsion t
	atomtype at1, at2
	integer nvdw, n

	# First, write header consisting of title, energy units, and number of molecule types
	writeline "$title"
	if $energyunit = kj
		writeline "units  kj"
	elseif $energyunit = kcal
		writeline "units  kcal"
	elseif $energyunit = ev
		writeline "units  ev"
	else
		error "Current energy unit is not compatible with DL_POLY FIELD output"
	end
	writeline "molecules  $npatterns"
	for $p
		# Write pattern name and number of moleculse
		writeline "$p.name"
		writeline "nummols  $p.nmols"
		# Write atoms - just loop over those in the first molecule of the pattern
		writeline "atoms  $p.nmolatoms"
		for $i $p 1
			writeline "$i.fftype@-8   $i.mass@10.5  $i.q@9.6   1   0   1"
		end
		# Bonds in pattern
		writeline "bonds  $p.nbonds"
		for $b $p
			# Convert functional form to be recognised by DL_POLY
			if $b.form = harmonic
				writeline "harm     $b.id_i@5 $b.id_j@5 $b.param_a@10.4 $b.param_b@10.4"
			elseif $b.form = morse
				writeline "morse    $b.id_i@5 $b.id_j@5 $b.param_c@10.4 $b.param_b@10.4 $b.param_a@10.4"
			else
				warn "Functional form of bond term ($b.form) not accounted for in export filter."
				writeline "xxxx     $b.id_i@5 $b.id_j@5 $b.param_a@10.4 $b.param_b@10.4 $b.param_c@10.4"
			end
		end
		# Angles in pattern
		writeline "angles  $p.nangles"
		for $a $p
			# Convert functional form to be recognised by DL_POLY
			if $a.form = harmonic
				writeline "harm     $a.id_i@5 $a.id_j@5 $a.id_k@5 $a.param_a@10.4 $a.param_b@10.4"
			elseif $a.form = cosine
				writeline "cos      $a.id_i@5 $a.id_j@5 $a.id_k@5 $a.param_a@10.4 $a.param_c@10.4 $a.param_b@10.4"
			elseif $a.form = harmcos
				writeline "hcos     $a.id_i@5 $a.id_j@5 $a.id_k@5 $a.param_a@10.4 $a.param_b@10.4"
			else
				warn "Functional form of angle term ($a.form) not accounted for in export filter."
				writeline "xxxx     $a.id_i@5 $a.id_j@5 $a.id_k@5 $a.param_a@10.4 $a.param_b@10.4 $a.param_c@10.4"
			end
		end
		# Torsions in pattern
		writeline "dihedrals  $p.ntorsions"
		for $t $p
			# Convert functional form to be recognised by DL_POLY
			if $t.form = cosine
				writeline "cos    $t.id_i@5 $t.id_j@5 $t.id_k@5 $t.id_l@5 $t.param_a@10.4 $t.param_b@10.4 $t.param_c@10.4 $t.escale@10.4 $t.vscale@10.4"
			elseif $t.form = cos3
				writeline "cos3   $t.id_i@5 $t.id_j@5 $t.id_k@5 $t.id_l@5 $t.param_a@10.4 $t.param_b@10.4 $t.param_c@10.4 $t.escale@10.4 $t.vscale@10.4"
			else
				warn "Functional form of torsion term ($t.form) not accounted for in export filter."
				writeline "xxxx   $t.id_i@5 $t.id_j@5 $t.id_k@5 $t.id_l@5 $t.param_a@10.4 $t.param_b@10.4 $t.param_c@10.4 $t.param_d@10.4 $t.escale@10.4 $t.vscale@10.4"
			end
		end
		# Terminating line
		writeline "finish"
	end
	# VDW Specification
	# Get total number of pair terms to write
	let $n = 1
	let $nvdw = 0
	for $at1
		eval $nvdw = "$nvdw + $n"
		inc $n
	end 
	writeline "nvdw  $nvdw"
	for $at1
		for $at2 $at1
			# Check functional forms of each atomtype
			if $at1.form <> $at2.form
				warn "Functional forms of atomtypes '$at1.equiv' and '$at2.equiv' differ - raw data written to output..." 
				writeline "$at1.name@-8  $at2.name@-8   $at1.param_a@12.6  $at1.param_b@12.6  $at1.param_c@12.6 $at1.param_d@12.6 $at1.param_e@12.6 $at1.param_f@12.6"
			elseif $at1.form = lj
				# LJ: use Lorentz-Berthelot combination rules
				eval $sigma = "($at1.param_b + $at2.param_b) * 0.5"
				eval $epsilon = "($at1.param_a * $at2.param_a) ^ 0.5"
				writeline "$at1.name@-8  $at2.name@-8  lj  $epsilon@12.6  $sigma@12.6"
			elseif $at1.form = buck
				error "Buckingham potential not included in FIELD file export yet."
			else
				warn "Functional form of VDW term ($at1.form) not accounted for in export filter."
			end
		end
	end
	writeline "close"
end
