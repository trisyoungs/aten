# Cambridge Database Filter
# Last modified: 21/10/2007
importmodel
	name "Cambridge Database Structure"
	nickname cds
	extension "dat,fdat"
	glob *.*dat
	# Record 1: Directory information (single line)
	# Contained information (first col = 0):
	# 0 (#), 1-8 (refcode), 9 (crys.sys), 10 (category), 11-16 (accession date), 17-22 (unused), 23-25 (ncards),
	# 26-28 (nrfrac), 29-31 (nrem), 32-34 (ndis), 35-37 (nerr), 38-40 (number of symm pos), 41-43 (nrad),
	# 44-46 (natoms), 47-49 (nsatoms), 50-52 (unused), 53-55 (ncon), 56 (cell), 57 (intf), 58 (atom 'r' format),
	# 59 (centre of symmetry), 60 (err), 61 (rpa), 62 (td), 63 (pd), 64 (unused), 65 (cbl), 66 (esd of C-C),
	# 67 (polymeric structure), 68-77 (irrelevant), 78-79 (year)
	readline "*@1 $title@8 *@17 $nf@3 $nr@3 $nd@3 $ne@3 $nsymm@3 *@3 $natm@3 $nsatm@3 *@3 $ncon@3 $cell@1 $atfor@1"
	print "Number of symmetry-unique (related) atoms = $natm (${nsatm})"
	# Record 2: Unit cell definition (if %cell == 1)
	# Contained information (first col = 0):
	# 0-35 (A,B,C,a,b,c), 36-41 (precision digits), 42-53 (cesd), 54-59 (dens), 60-62 (spgrpn), 63-70 (spgrp),
	# 71-75 (irrelevant)
	if $cell = 1
		readline "$a@6 $b@6 $c@6 $al@6 $be@6 $ga@6 $pa@1 $pb@1 $pc@1 $pal@1 $pbe@1 $pga@1 *@18 $spgrpn@3 $spgrp@8"
		# Cell lengths and angles are multiplied by the precision digits (10^n)...
		eval $cell.a = "$a / 10.0^$pa"
		eval $cell.b = "$b / 10.0^$pb"
		eval $cell.c = "$c / 10.0^$pc"
		eval $cell.alpha = "$al / 10.0^$pal"
		eval $cell.beta = "$be / 10.0^$pbe"
		eval $cell.gamma = "$ga / 10.0^$pga"
		setcell
		setspacegroup $spgrpn
	end
	# Record 3: Text information (ignored)
	# Total number of chars is the sum of nf, nr, nd, and ne read in earlier.
	# Since the format rigidly defined 80 chars per line, skip by number of lines...
	evali $nlines = "($nf + $nr + $nd + $ne) / 80 + 1"
	skipline $nlines
	# Record 4: Equivalent positions of spacegroup (ignored)
	evali $nlines = "($nsymm*20) / 80 + 1"
	skipline $nlines
	# Record 5: Atomic radii (ignored)
	if $natm > 1
		skipline
	end
	# Record 6: Atomic coordinates
	# Coordinates are given 3 per line, so determine number of lines to read in.
	repeat $n $natm
		# Read in new line if mod(n,3) is zero
		evali $mod = "($n-1) % 3"
		if $mod = 0
			readline "$ea@5 $xa@7 $ya@7 $za@7 *@1 $eb@5 $xb@7 $yb@7 $zb@7 *@1 $ec@5 $xc@7 $yc@7 $zc@7"
		end
		# Messy, but should work. Use variable data based on the $mod value...
		if $mod = 0
			let $e = $ea
			eval $r.x = "$xa / 100000"
			eval $r.y = "$ya / 100000"
			eval $r.z = "$za / 100000"
		elseif $mod = 1
			let $e = $eb
			eval $r.x = "$xb / 100000"
			eval $r.y = "$yb / 100000"
			eval $r.z = "$zb / 100000"
		else
			let $e = $ec
			eval $r.x = "$xc / 100000"
			eval $r.y = "$yc / 100000"
			eval $r.z = "$zc / 100000"
		end
		addatom
	end
	# Record 7: Connectivity
	# Connectivities are given in the format 40I2 (if natm+nsatm < 100) or 26I3,2x (if natm+nsatm >= 100)
	# First (natm+nsatm) integers are paired to the atoms 1-(natm+nsatm) in that order. Any other integers
	# are pairs of atoms involved in additional bonds.
	eval $natoms = "$natm + $nsatm"
	repeat $n $natoms
		# Need to remove newline (and space before) when we've read a whole line's worth
		if $natoms < 100
			readchars $jj 2
			evali $mod = "$n%40"
			if $mod = 0
				readchars $discard 1
			end
		else
			readchars $jj 3
			evali $mod = "$n%26"
			if $mod = 0
				readchars $discard 3
			end
		end
		# Check for dummy bond (if $jj = 0 don't create a bond)
		if $jj > 0
			# Must decrease integer numbers to be from 0-(N-1)
			dec $jj
			eval $ii = "$n-1"
			#print "Bond atoms $ii $jj"
			addbond $ii $jj
		end
	end
	evali $nextra = "($ncon - $natoms) / 2"
	#print "There are $nextra pairs of connectivity integers."
	repeat $n $nextra
		if $natoms < 100
			readchars $ii 2
			readchars $jj 2
			evali $mod = "$n%40"
			if $mod = 0
				readchars $discard 1
			end
		else
			readchars $ii 3
			readchars $jj 3
			evali $mod = "$n%26"
			if $mod = 0
				readchars $discard 1
			end
		end
		# Decrease integers and create bond
		dec $ii
		dec $jj
		addbond $ii $jj
	end
	# Convert our stored coordinates (which are fractional) to real coordinates
	fractoreal
	# Finalise the packing in the model
	pack
	fold
end
