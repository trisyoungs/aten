# Script to test UFF parameter generation against various systems

printf("This script tests UFF type assignment and parameter generation against data taken from\nthe UFF implementation in MCCCS Towhee.\n\n");

# Load forcefield and switch to Kelvin for units of energy
loadff("uff.ff");
aten.prefs.energyunit = "K";
int n;
ffbound ffb;
int errors = 0;
double tol = 0.1;		# Percentage tolerance

# Define some commonly-used functions
void testbond(double tol, int i, int j, string si, string sj, double d1, double d2, double d3, double d4, double d5, double d6)
{
	int n;
	double diff[6], data[6] = { d1, d2, d3, d4, d5, d6 };
	ffbound ffb = generatebond(i,j);
	for (n=1; n<=6; ++n) diff[n] =  ffb.data[n] - data[n];
	printf("            Bond %s-%s: generated (expected) parameters are:\n", si, sj);
	for (n=1; n<=ffb.nparams; ++n)
	{
		printf("    %2i %12s %14.5f (%14.5f)   [error = %f%%]", n, ffb.dataname[n], ffb.data[n], data[n], (data[n]/ffb.data[n] - 1.0)*100.0);
		if (abs(data[n]/ffb.data[n]-1.0) < tol) printf("  Ok\n");
		else printf("  *** ERROR\n");
	}
}
void testangle(double tol, int i, int j, int k, string si, string sj, string sk, double d1, double d2, double d3, double d4, double d5, double d6)
{
	int n;
	double diff[6], data[6] = { d1, d2, d3, d4, d5, d6 };
	ffbound ffb = generateangle(i,j,k);
	for (n=1; n<=6; ++n) diff[n] =  ffb.data[n] - data[n];
	printf("        Angle %s-%s-%s: generated (expected) parameters are:\n", si, sj, sk);
	for (n=1; n<=ffb.nparams; ++n)
	{
		printf("    %2i %12s %14.5f (%14.5f)   [error = %f%%]", n, ffb.dataname[n], ffb.data[n], data[n], (data[n]/ffb.data[n] - 1.0)*100.0);
		if (abs(data[n]/ffb.data[n]-1.0) < tol) printf("  Ok\n");
		else printf("  *** ERROR\n");
	}
}
void testtorsion(double tol, int i, int j, int k, int l, string si, string sj, string sk, string sl,  double d1, double d2, double d3, double d4, double d5, double d6)
{
	int n;
	double diff[6], data[6] = { d1, d2, d3, d4, d5, d6 };
	ffbound ffb = generatetorsion(i,j,k,l);
	for (n=1; n<=6; ++n) diff[n] =  ffb.data[n] - data[n];
	printf("   Torsion %s-%s-%s-%s: generated (expected) parameters are:\n", si, sj, sk, sl);
	for (n=1; n<=ffb.nparams; ++n)
	{
		printf("    %2i %12s %14.5f (%14.5f)   [error = %f%%]", n, ffb.dataname[n], ffb.data[n], data[n], (data[n]/ffb.data[n] - 1.0)*100.0);
		if (abs(data[n]/ffb.data[n]-1.0) < tol) printf("  Ok\n");
		else printf("  *** ERROR\n");
	}
}

printf("=================================\n");
printf("Test 1) Water\n");
printf("=================================\n");
string water_types[3] = { "O_3", "H_", "H_" };
loadmodel("data/test/water.xyz");
typemodel();
# Check assigned atom types
for (n=1; n<=aten.model.natoms(); ++n)
{
	if (aten.model.atoms[n].type.name == water_types[n]) printf("  Atom %2i assigned type matches expected type (%s)\n", n, water_types[n]);
	else { printf("  Atom %2i assigned type DOES NOT match expected type (%s)\n", n, water_types[n]); errors++; }
}
# Create and check intramolecular terms
testbond(tol,1,2, water_types[1], water_types[2], 281798.9*2.0, 0.9903, 0, 0, 0, 0 ); 
testangle(tol,2,1,3, water_types[2], water_types[1], water_types[3], 60637.511, 0.300, 0.267, 0.267, 0.0, 0.0 );



quit();
