# Gaussian Import/Export Filter
# Created:	 27/01/2011
# Last modified: 02/09/2011
# ChangeLog:
#	02/09/2011 - Tweaked to use capitalised command/member names in v1.8
#	08/08/2011 - Added polar function spec for 6-31G, 6-311G, D95, and D95V basis sets. Added Symmetry option. Tweaked layout.
#	27/01/2011 - Initial version.
# Notes:
#	TODO - DFT Functionals cannot be selected yet.

filter(type="exportmodel", name="Gaussian Input", nickname="gaussinp", extension="gjf", glob="*.gjf", id=17)
{
	# GUI Definition
	dialog ui = defaultDialog();
	if (!ui.created)
	{
		widget stack, page, tab, tabs = ui.addTabs("tabs");
		# Job type
		tab = tabs.addPage("Job Type");
		tab.addCombo("runtype", "Run Type", "SP,Opt,Freq,IRC,IRCMax,Scan,Polar,ADMP,BOMD,Force,Stable,Volume", 2);
		tab.addIntegerSpin("mult", "Multiplicity", 1, 8, 1, 1);
		tab.addIntegerSpin("charge", "Charge", -100, 100, 1, 0);
		stack = tab.addStack("runstack", 1, 2, 5, 0);
		# -- SP
		page = stack.addPage("stack_sp", "");
		page.addLabel("No Options");
		# -- Opt
		page = stack.addPage("stack_opt", "");
		page.addCombo("opt_method", "Optimisation Type", "<default>,QST2,QST3,TS,Saddle=1,Saddle=2,Conical", 1, 1);
		page.addIntegerSpin("opt_maxcycles", "MaxCycles", 0, 1000, 10, 30, 1, 2);
		page.addIntegerSpin("opt_maxstep", "MaxStep", 0, 1000, 10, 30, 3, 2);
		page.addCheck("opt_restart", "Restart", 0, 5, 2);
		# -- Freq
		page = stack.addPage("stack_freq", "");
		page.addLabel("No Options (yet)");
		# -- IRC
		page = stack.addPage("stack_irc", "");
		page.addLabel("No Options (yet)");
		# -- IRCMax
		page = stack.addPage("stack_ircmax", "");
		page.addLabel("No Options (yet)");
		# -- Scan
		page = stack.addPage("stack_scan", "");
		page.addLabel("No Options (yet)");
		# -- Polar
		page = stack.addPage("stack_polar", "");
		page.addLabel("No Options (yet)");
		# -- ADMP
		page = stack.addPage("stack_admp", "");
		page.addLabel("No Options (yet)");
		# -- BOMD
		page = stack.addPage("stack_bomd", "");
		page.addLabel("No Options (yet)");
		# -- Force
		page = stack.addPage("stack_force", "");
		page.addLabel("No Options (yet)");
		# -- Stable
		page = stack.addPage("stack_stable", "");
		page.addLabel("No Options (yet)");
		# -- Volume
		page = stack.addPage("stack_volume", "");
		page.addLabel("No Options (yet)");

		# Model Chemistry
		tab = tabs.addPage("Model Chemistry");
		tab.addCombo("modchem", "Method", "AM1,PM3,PM3MM,PM6,PDDG,HF,CASSCF,MP2,MP3,MP4(DQ),MP4(SDQ),MP4(SDTQ),MP5,QCISD,CCD,CCSD,QCISD(T),QCISD(TQ),BD,EPT,CBS,G1,G2,G2MP2,G3,G3MP2,G3B3,G3MP2B3,G4,G4MP2,W1,CIS,TD,EOM,ZINDO,DFTB,CI,GVB", 6, 1, 1, 2);
		tab.addCombo("modchem_opt", "", "<default>,R,U,RO", 1);
	
		# Job Options
		tab = tabs.addPage("Job Options");
		tab.addCombo("symmetry", "Symmetry", "Symmetry,NoSymmetry", 1);
		tab.addCheck("symmetry_loose", "Loose", 0);
	
		# Basis Set
		tab = tabs.addPage("Basis Set");
		w = tab.addCombo("basis", "Basic Basis", "STO-3G,3-21G,6-21G,4-31G,6-31G,6-311G,D95V,D95,SHC,Stevens/Basch/Krauss,LanL2MB,LanL2DZ,SDD,SDDAll,Dunning,Alhrichs,MidiX,EPR,UGBS,MTSmall,DGauss,CBSB7", 5, 1, 1);
		w2 = tab.addGroup("elements", "Elements", 1, 3);
		w2.addLabel("elementlabel", "POOOP");
		w2 = tab.addGroup("extrabasis", "Additional Basis Functions", 1, 3);
		w2.addCombo("diffuse", "Diffuse", "<none>", 1, 1, 1);
		w2.addCombo("heavypolar", "Heavy Atom Polarisation", "<none>", 1, 1, 2);
		w2.addCombo("lightpolar", "Light Atom Polarisation", "<none>", 1, 1, 3);
		# -- Link events to show valid options for extra basis functions, and display element text
		w.onInteger

		option("basisstack", "stack", 22, 5, "tab=Basis Set@Job Specification", "span=2", "newline");
		# -- STO-3G
		option("Elements: ???", "label", "group=basisstack_1", "labelspan=2");
		# -- 3-21G
		page.addLabel("Elements: H-Xe");
		page.addCombo("basis_321g_diffuse", "Diffuse", "<none>,+", 1, "group=basisstack_2", "newline");
		# -- 6-21G
		page.addLabel("Elements: H-Cl");
		page.addCombo("basis_621g_polar", "Polarisation", "<none>,*,**", 1, "group=basisstack_3", "newline");
		# -- 4-31G
		page.addLabel("Elements: H-Ne");
		page.addCombo("basis_431g_polar", "Polarisation", "<none>,*,**", 1, "group=basisstack_4", "newline");
		# -- 6-31G
		page.addLabel("Elements: H-Kr");
		page.addCombo("basis_631g_diffuse", "Diffuse", "<none>,+,++", 1, "group=basisstack_5", "newline");
		page.addCombo("basis_631g_heavypolar", "Heavy Atom Polarisation", "<none>,d,2d,3d,df,2df,3df", 1, "group=basisstack_5", "newline");
		page.addCombo("basis_631g_lightpolar", "Light Atom Polarisation", "<none>,p,2p,3p,pd,2pd,3pd", 1, "group=basisstack_5", "newline");
		# -- 6-311G
		page.addLabel("Elements: H-Kr");
		page.addCombo("basis_6311g_diffuse", "Diffuse", "<none>,+,++", 1, "group=basisstack_6", "newline");
		page.addCombo("basis_6311g_heavypolar", "Heavy Atom Polarisation", "<none>,d,2d,3d,df,2df,3df", 1, "group=basisstack_6", "newline");
		page.addCombo("basis_6311g_lightpolar", "Light Atom Polarisation", "<none>,p,2p,3p,pd,2pd,3pd", 1, "group=basisstack_6", "newline");
		# -- D95V
		page.addLabel("Elements: H-Ne");
		page.addCombo("basis_d95v_diffuse", "Diffuse", "<none>,+,++", 1, "group=basisstack_7", "newline");
		page.addCombo("basis_d95v_heavypolar", "Heavy Atom Polarisation", "<none>,d", 1, "group=basisstack_7", "newline");
		page.addCombo("basis_d95v_lightpolar", "Light Atom Polarisation", "<none>,p", 1, "group=basisstack_7", "newline");
		# -- D95
		option("Elements: H-Cl, except Na and Mg", "label", "group=basisstack_8", "labelspan=2");
		page.addCombo("basis_d95_diffuse", "Diffuse", "<none>,+,++", 1, "group=basisstack_8", "newline");
		page.addCombo("basis_d95_heavypolar", "Heavy Atom Polarisation", "<none>,d,2d,3d,df,2df,3df", 1, "group=basisstack_8", "newline");
		page.addCombo("basis_d95_lightpolar", "Light Atom Polarisation", "<none>,p,2p,3p,pd,2pd,3pd", 1, "group=basisstack_8", "newline");
		# -- SHC
		page.addLabel("Elements: H-Cl");
		page.addCombo("basis_shc_polar", "Polarisation", "<none>,*", 1, "group=basisstack_9", "newline");
		# -- Stevens/Basch/Krauss
		page.addLabel("Elements: H-Rn");
		page.addCombo("basis_sbk_type", "Basis", "CEP-4G,CEP-31G,CEP-121G", 1, "group=basisstack_10", "newline");
		page.addCombo("basis_sbk_polar", "Polarisation", "<none>,*", 1, "group=basisstack_10", "newline");
		# -- LanL2MB
		option("Elements: H-La, Hf-Bi", "label", "group=basisstack_11", "labelspan=2");
		# -- LanL2DZ
		option("Elements: H, Li-La, Hf-Bi", "label", "group=basisstack_12", "labelspan=2");
		# -- SDD
		option("Elements: All, except Fr and Ra", "label", "group=basisstack_13", "labelspan=2");
		# -- SDDAll
		option("Elements: All, except Fr and Ra", "label", "group=basisstack_14", "labelspan=2");
		# -- Dunning
		option("Elements: H-Ar, Ca-Kr", "label", "group=basisstack_15", "labelspan=2");
		page.addCombo("basis_dunning_type", "Basis", "cc-pVDZ,cc-pVTZ,cc-pVQZ,cc-pV5Z,cc-pV6Z", 1, "group=basisstack_15", "newline");
		int basis_dunning_diffuse = option("Diffuse (AUG)", "check", 0, "group=basisstack_15", "newline");
		# -- Alhrichs
		option("Elements: All, except Fr and Ra", "label", "group=basisstack_16", "labelspan=2");
		page.addCombo("basis_alhrichs_type", "Basis", "SV,SVP,TZV,TZVP,QZVP", 1, "group=basisstack_16", "newline");
		# -- MidiX
		option("Elements: H, C-F, S-Cl, I, Br", "label", "group=basisstack_17", "labelspan=2");
		# -- EPR
		option("Elements: H, C-F, S-Cl, I, Br", "label", "group=basisstack_18", "labelspan=2");
		page.addCombo("basis_epr_type", "Basis", "EPR-II,EPR-III", 1, "group=basisstack_18", "newline");
		# -- UGBS
		page.addLabel("Elements: H-Lr");
		page.addCombo("basis_ugbs_polar", "Polarisation", "<none>,1,2,3", 1, "group=basisstack_19", "newline");
		page.addCombo("basis_ugbs_polartype", "Polarisation Type", "P,V,O", 1, "group=basisstack_19", "newline");
		page.addCombo("basis_ugbs_diffuse", "Diffuse", "<none>,+,++,2+,2++", 1, "group=basisstack_19", "newline");
		# -- MTSmall
		page.addLabel("Elements: H-Ar");
		# -- DGauss
		page.addLabel("Elements: See Basis Options");
		page.addCombo("basis_dgauss_type", "Basis", "'DGDZVP (H-Xe)','DGDZVP2 (H-F,Al-Ar,Sc-Zn)','DGTZVP (H,C-F,Al-Ar)'", 1, "group=basisstack_21", "newline");
		# -- CBSB7
		page.addLabel("Elements: H-Kr");
		page.addCombo("basis_cbsb7_diffuse", "Diffuse", "<none>,+,++", 1, "group=basisstack_22", "newline");
	
		# Coordinates
		int coordtype = option("coordgroup", "radiogroup");
		option("Cartesian", "radio", "coordgroup", 1, "tab=Coordinates@Job Specification");
		option("ZMatrix", "radio", "coordgroup", 0, "tab=Coordinates@Job Specification");
	}

	#
	# Write Link0 Section
	#
	# TODO

	# Write Route Section - Run Type
	string line, keyword, options;
	switch (runtyp)
	{
		case ("SP"):
			keyword = "# SP";
			break;
		case ("Opt"):
			options = "";
			if (opt_method != "<default>") options += opt_method;
			if (opt_maxcycles != 0) { if (options != "") options += ","; options += "MaxCycles=" + itoa(opt_maxcycles); }
			if (opt_maxstep != 0) { if (options != "") options += ","; options += "MaxStep=" + itoa(opt_maxstep); }
			if (opt_restart) { if (options != "") options += ","; options += "Restart"; }
			if (options == "") keyword = "# Opt";
			else keyword = toa("# Opt=(%s)", options);
			break;
		default:
			error("Unrecognised runtype encountered while writing route section.");
	}
	line = keyword;
	# -- Add on other general options to this line
	if (symmetry == "NoSymmetry") line += " NoSymm";
	else if (symmetry_loose) line += " Symm=Loose";
	# -- Write line
	writeLineF("%s\n", line);

	# Write Route Section - Method/Basis
	line = "# ";
	options = "";
	if (modchem_opt != "<default>") line += modchem_opt;
	line += modchem + "/";
	switch (basis)
	{
		case ("3-21G"): if (basis_321g_diffuse == "<none>") options = "3-21G"; else options = "3-21+G"; break;
		case ("6-21G"): if (basis_621g_polar == "<none>") options = "6-21G"; else options = "6-21G" + basis_621g_polar; break;
		case ("4-31G"): if (basis_431g_polar == "<none>") options = "4-31G"; else options = "4-31G" + basis_431g_polar; break;
		case ("6-31G"):
			options = "6-31";
			if (basis_631g_diffuse == "<none>") options += "G"; else options += basis_431g_polar + "G";
			if (basis_631g_heavypolar != "<none>" && basis_631g_lightpolar != "<none>") options += toa("(%s,%s)",basis_631g_heavypolar,basis_631g_lightpolar);
			else if (basis_631g_heavypolar != "<none>") options += toa("(%s)",basis_631g_heavypolar);
			else if (basis_631g_lightpolar != "<none>") options += toa("(%s)",basis_631g_lightpolar);
			break;
		case ("6-311G"):
			if (basis_6311g_diffuse == "<none>") options = "6-311G"; else options = "6-311" + basis_6311g_diffuse + "G"; break;
			if (basis_6311g_heavypolar != "<none>" && basis_6311g_lightpolar != "<none>") options += toa("(%s,%s)",basis_6311g_heavypolar,basis_6311g_lightpolar);
			else if (basis_6311g_heavypolar != "<none>") options += toa("(%s)",basis_6311g_heavypolar);
			else if (basis_6311g_lightpolar != "<none>") options += toa("(%s)",basis_6311g_lightpolar);
		case ("D95V"): 
			options = "D95V";
			if (basis_d95v_diffuse != "<none>") options += basis_d95v_diffuse;
			if (basis_d95v_heavypolar != "<none>" && basis_d95v_lightpolar != "<none>") options += toa("(%s,%s)",basis_d95v_heavypolar,basis_d95v_lightpolar);
			else if (basis_d95v_heavypolar != "<none>") options += toa("(%s)",basis_d95v_heavypolar);
			else if (basis_d95v_lightpolar != "<none>") options += toa("(%s)",basis_d95v_lightpolar);
			break;
		case ("D95"): 
			options = "D95";
			if (basis_d95_diffuse != "<none>") options += basis_d95_diffuse;
			if (basis_d95_heavypolar != "<none>" && basis_d95_lightpolar != "<none>") options += toa("(%s,%s)",basis_d95_heavypolar,basis_d95_lightpolar);
			else if (basis_d95_heavypolar != "<none>") options += toa("(%s)",basis_d95_heavypolar);
			else if (basis_d95_lightpolar != "<none>") options += toa("(%s)",basis_d95_lightpolar);
			break;
		case ("SHC"): if (basis_shc_polar == "<none>") options = "SHC"; else options = "SHC*"; break;
		case ("Stevens/Basch/Krauss"): if (basis_sbk_polar == "<none>") options = basis_sbk_type; else options = basis_sbk_type + "*"; break;
		case ("Dunning"): if (basis_dunning_diffuse) options = "AUG-" + basis_dunning_type; else options = basis_dunning_type; break;
		case ("Alhrichs"): options = basis_alhrichs_type; break;
		case ("EPR"): options = basis_epr_type; break;
		case ("UGBS"):
			options = "UGBS";
			if (basis_ugbs_polar != "<none>") options += basis_ugbs_polar + basis_ugbs_polartype;
			if (basis_ugbs_diffuse != "<none>") options += basis_ugbs_diffuse;
			break;
		case ("DGauss"): options = beforestr(basis_dgauss_type, " "); break;
		case ("CBSB7"): if (basis_cbsb7_diffuse == "<none>") options = "CBSB7"; else options = "CBSB7" + basis_cbsb7_diffuse; break;
		default:
			options = basis;
	}
	line += options;
	writeLine(line);
	
	# Blank line, title card, blank line
	model m = aten.frame;
	writeLineF("\n%s\n\n",m.name);

	# Charge and multiplicity
	writeLineF("%i %i\n", charge, mult);

	# Atom coordinates (or z-matrix)
	if (coordtype == 1) for (atom i = aten.frame.atoms; i != 0; ++i) writeLineF("%-5s  %12.6f %12.6f %12.6f\n", i.symbol,i.rx,i.ry,i.rz);
	else writezmatrix(aten.frame);
}

