# Example partition definition for Aten
# Everything here works in simple unit cell coordinates, i.e. coordinates range from 0 to 1 in a cubic cell.
# Shearing / scaling of all coordinates is performed internally by Aten when necessary.

# Name / Description
string name = "Sphere";
string description = "Simple spherical region";

# Grid size information
# Two sets of gridpoints arrays must be given - the 'rough' grid is used to probe the partitions and overlay the rendered model in the GUI,
# while the second 'fine' grid is used when actually performing the calculation. Partition functions which generate curved volumes should
# use fine grid values of around 100.
int roughgrid[3] = { 40,40,40 };
int finegrid[3] = { 100,100,100 };

# Number of partitions
# The total possible number of partitions, *including* the unit cell itself.
int npartitions = 2;

# A partition may contain options set through the defaultDialog as follows
global double x = 0.5, y = 0.5, z = 0.5, r = 0.3;
int partitionOptions()
{
	Dialog ui = defaultDialog();
	if (!ui.created)
	{
		ui.verticalFill = TRUE;
		ui.addDoubleSpin("x", "x", 0.0, 1.0, 0.1, x);
		ui.addDoubleSpin("y", "Y", 0.0, 1.0, 0.1, y);
		ui.addDoubleSpin("z", "Z", 0.0, 1.0, 0.1, z);
		ui.addDoubleSpin("r", "R", 0.001, 1.0, 0.1, r);
	}
	if (ui.show())
	{
		x = ui.asInteger("x");
		y = ui.asInteger("y");
		z = ui.asInteger("z");
		r = ui.asInteger("r");
		return TRUE;
	}
	else return FALSE;
}

# Every partition definition *must* contain 'partition' and 'partitionName' functions
int partition(double px, double py, double pz)
{
	# When constructing the insertion grid, Aten will call this function to determine which points on the grid fall within which partitions.
	# Unit cell coordinates are always given. The function should return the integer ID number of the partition in which the point
	# falls, or zero to mean the point falls in no partition at all (i.e. it is elsewhere in the cell)
	# Partitions *must* be numbered consecutively from zero upwards.
	// Check 1 - Is the point inside the defined sphere (region 1)
	if (( (px-x)*(px-x) + (py-y)*(py-y) + (pz-z)*(pz-z) ) <= (r*r)) return 1;

	// Not inside any defined regions, so return '0' for 'inside rest of cell'
	return 0;
}

string partitionName(int id)
{
	switch(id)
	{
		case (0):
			return "Unit Cell";
		case (1):
			return "Sphere";
		default:
			return "UNKNOWN";
	}
}
