# DL_POLY Configuration Import / Export (for v1.1+)
# Created:	 25/03/2009
# Last modified: 10/04/2009
# ChangeLog:

filter(type="importmodel", name="DL_POLY Configuration", extension="CONFIG,REVCON,config,revcon", glob="*CON*",exact="CONFIG,REVCON,config,revcon",nickname="dlpoly",id=2)
{
	# Variable Declaration
	string e, title;
	int n,keytrj,imcon;
	double ax,ay,az,bx,by,bz,cx,cy,cz;
	double rx,ry,rz,vx,vy,vz,fx,fy,fz;

	# Title section
	getline(title);
	newmodel(title);
	readline(keytrj,imcon);

	# Cell (if present)
	if (imcon != 0)
	{
		readline(ax,ay,az);
		readline(bx,by,bz);
		readline(cx,cy,cz);
		cellaxes(ax,ay,az,bx,by,bz,cx,cy,cz);
	}

	# Atoms
	while (!eof())
	{
		readline(e);
		readline(rx,ry,rz);
		newatom(e,rx,ry,rz);
		if (keytrj > 0)
		{
			readline(vx,vy,vz);
			setvelocities(vx,vy,vz);
		}
		if (keytrj > 1)
		{
			readline(fx,fy,fz);
			setforces(fx,fy,fz);
		}
	}
	rebond();
	fold();
	finalisemodel();
}

filter(type="exportmodel", name="DL_POLY Configuration", extension="CONFIG,REVCON,config,revcon", glob="*CON*", exact="CONFIG,REVCON,config,revcon", nickname="dlpoly", id=2)
{
	# Variable Declaration
	int n,imcon;
	atom i;

	# Get current model
	model m = aten.model;

	# Title section
	writeline(m.name);

	# Convert celltype string to DL_POLY-style integer
	if (m.cell.type == "none") imcon = 0;
	else if (m.cell.type == "cubic") imcon = 1;
	else if (m.cell.type == "orthorhombic") imcon = 2;
	else if (m.cell.type == "parallelepiped") imcon = 3;
	writelinef("%10i%10i\n",0,imcon);

	# Cell (if present) 
	if (imcon <> 0)
	{
		writelinef("%20.12f%20.12f%20.12f\n",m.cell.ax, m.cell.ay, m.cell.az);
		writelinef("%20.12f%20.12f%20.12f\n",m.cell.bx, m.cell.by, m.cell.bz);
		writelinef("%20.12f%20.12f%20.12f\n",m.cell.cx, m.cell.cy, m.cell.cz);
	}

	# Atoms
	for (n = 1; n <= m.natoms; ++n)
	{
		# Get variable pointer to make manipulation a little less cluttered
		i = m.atoms[n];
		if (i.type == 0) writelinef("%-8s%10i%20f\n",i.symbol,i.id,i.mass);
		else writelinef("%-8s%10i%20f\n",i.type.name,i.id,i.mass);
		writelinef("%20.14f%20.14f%20.14f\n",i.rx,i.ry,i.rz);
	}
}


filter(type="importtrajectory", name="DL_POLY Unformatted History", extension="HISu", glob="*HISu", exact="HISTORY", nickname="dlpolyu")
{
	# Variable declaration
#	string title,name;
#	int recsize,n,nskip,newcelltype,newnatoms;
#	double dnatoms,mass,q,dnstep,dkeytrj,dimcon,tstep;
#	double ax,bx,cx,ay,by,cy,az,bz,cz,rx,ry,rz,fx,fy,fz,vx,vy,vz;
#	model frame;

	# Since its a Fortran code, each record in the file is preceded and followed by an integer specifying
	# the record size in characters.

	int readheader()
	{
		int recsize;
		string title;

		# First line is 80-character header.
		readint(recsize);
		readchars(title,80);
		readint(recsize);
		printf("Record size is %i, title = '%s'\n", recsize, title);
	}
}




		# Next, number of atoms in the system (as a double)
#		readint $recsize
#		readfloat $dnatoms
#		$newnatoms = $dnatoms
#		readint $recsize
#		# Atom names
#		readint $recsize
#		for $n,1,$model.natoms
#			readchars $name 8
#		end
#		readint $recsize
#		# Atomic masses
#		readint $recsize
#		skipchars $recsize
#		#repeat $n $natoms
#		#for $n,1,$natoms
#		#	readfloat $mass
#		#end
#		readint $recsize
#		# Atom charges
#		readint $recsize
#		skipchars $recsize
#		#for $n,1,$natoms
#		#	readfloat $q
#		#end
#		readint $recsize
#	else
#		# Grab frame pointer
#		$frame = $model.frame
#		# First data for frame is : nstep, $natoms, keytrj, imcon, tstep, all as doubles 
#		readint $recsize
#		readfloat $dnstep
#		readfloat $dnatoms
#		readfloat $dkeytrj
#		readfloat $dimcon
#		readfloat $tstep
#		readint $recsize
#		# Unit cell
#		$newcelltype = $dimcon+0.1
#		if $newcelltype <> 0
#			readint $recsize
#			readfloat $ax
#			readfloat $ay
#			readfloat $az
#			readfloat $bx
#			readfloat $by
#			readfloat $bz
#			readfloat $cx
#			readfloat $cy
#			readfloat $cz
#			readint $recsize
#			cellaxes $ax $ay $az $bx $by $bz $cx $cy $cz
#		end
#		# Create atoms in model all at once, since we need to reference them all at different points
#		modeltemplate
#		# X-Coordinates
#		readint $recsize
#		for $n,1,$frame.natoms
#			readfloat $rx
#			setrx $rx $n
#		end
#		readint $recsize
#		# Y-Coordinates
#		readint $recsize
#		for $n,1,$frame.natoms
#			readfloat $ry
#			setry $ry $n
#		end
#		readint $recsize
#		# Z-Coordinates
#		readint $recsize
#		for $n,1,$frame.natoms
#			readfloat $rz
#			setrz $rz $n
#		end
#		readint $recsize
#		# X-Velocities
#		readint $recsize
#		for $n,1,$frame.natoms
#			readfloat $vx
#			setvx $vx $n
#		end
#		readint $recsize
#		# Y-Velocities
#		readint $recsize
#		for $n,1,$frame.natoms
#			readfloat $vy
#			setvy $vy $n
#		end
#		readint $recsize
#		# Z-Velocities
#		readint $recsize
#		for $n,1,$frame.natoms
#			readfloat $vz
#			setvz $vz $n
#		end
#		readint $recsize
#		# X-Forces
#		readint $recsize
#		for $n,1,$frame.natoms
#			readfloat $fx
#			setfx $fx $n
#		end
#		readint $recsize
#		# Y-Forces
#		readint $recsize
#		for $n,1,$frame.natoms
#			readfloat $fy
#			setfy $fy $n
#		end
#		readint $recsize
#		# Z-Forces
#		readint $recsize
#		for $n,1,$frame.natoms
#			readfloat $fz
#			setfz $fz $n
#		end
#		readint $recsize
#		fold
#		rebond
#	end
#end
