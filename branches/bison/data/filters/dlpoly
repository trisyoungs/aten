# DL_POLY Configuration Import / Export (for v1.1+)
# Created:	 25/03/2009
# Last modified: 10/04/2009
# ChangeLog:

filter(type="importmodel", name="DL_POLY Configuration", extension="CONFIG,REVCON,config,revcon", glob="*CON*",exact="CONFIG,REVCON,config,revcon",nickname="dlpoly",id=2)
{
	# Variable Declaration
	string e, title;
	int n,keytrj,imcon;
	double ax,ay,az,bx,by,bz,cx,cy,cz;
	double rx,ry,rz,vx,vy,vz,fx,fy,fz;

	# Title section
	getline(title);
	newmodel(title);
	readline(keytrj,imcon);

	# Cell (if present)
	if (imcon != 0)
	{
		readline(ax,ay,az);
		readline(bx,by,bz);
		readline(cx,cy,cz);
		cellaxes(ax,ay,az,bx,by,bz,cx,cy,cz);
	}

	# Atoms
	while (!eof())
	{
		readline(e);
		readline(rx,ry,rz);
		newatom(e,rx,ry,rz);
		if (keytrj > 0)
		{
			readline(vx,vy,vz);
			setvelocities(vx,vy,vz);
		}
		if (keytrj > 1)
		{
			readline(fx,fy,fz);
			setforces(fx,fy,fz);
		}
	}
	rebond();
	fold();
	finalisemodel();
}

filter(type="exportmodel", name="DL_POLY Configuration", extension="CONFIG,REVCON,config,revcon", glob="*CON*", exact="CONFIG,REVCON,config,revcon", nickname="dlpoly", id=2)
{
	# Variable Declaration
	int n,imcon;
	atom i;

	# Get current model
	model m = aten.model;

	# Title section
	writeline(m.name);

	# Convert celltype string to DL_POLY-style integer
	if (m.cell.type == "none") imcon = 0;
	else if (m.cell.type == "cubic") imcon = 1;
	else if (m.cell.type == "orthorhombic") imcon = 2;
	else if (m.cell.type == "parallelepiped") imcon = 3;
	writelinef("%10i%10i\n",0,imcon);

	# Cell (if present) 
	if (imcon <> 0)
	{
		writelinef("%20.12f%20.12f%20.12f\n",m.cell.ax, m.cell.ay, m.cell.az);
		writelinef("%20.12f%20.12f%20.12f\n",m.cell.bx, m.cell.by, m.cell.bz);
		writelinef("%20.12f%20.12f%20.12f\n",m.cell.cx, m.cell.cy, m.cell.cz);
	}

	# Atoms
	for (n = 1; n <= m.natoms; ++n)
	{
		# Get variable pointer to make manipulation a little less cluttered
		i = m.atoms[n];
		if (i.type == 0) writelinef("%-8s%10i%20f\n",i.symbol,i.id,i.mass);
		else writelinef("%-8s%10i%20f\n",i.type.name,i.id,i.mass);
		writelinef("%20.14f%20.14f%20.14f\n",i.rx,i.ry,i.rz);
	}
}


filter(type="importtrajectory", name="DL_POLY Unformatted History", extension="HISu", glob="*HISu", exact="HISTORY", nickname="dlpolyu")
{
	# Variable declaration
#	string title,name;
#	int recsize,n,nskip,newcelltype,newnatoms;
#	double dnatoms,mass,q,dnstep,dkeytrj,dimcon,tstep;
#	double ax,bx,cx,ay,by,cy,az,bz,cz,rx,ry,rz,fx,fy,fz,vx,vy,vz;
#	model frame;

	# Since its a Fortran code, each record in the file is preceded and followed by an integer specifying
	# the record size in characters.

	int readheader()
	{
		int intsize=4, realsize=8, recsize;

		# First line is 80-character header.
		recsize = readint(intsize);
		if (recsize == 40)
		{
			printf("No header found in unformatted DL_POLY trajectory file. Assuming a restarted trajectory...\n");
			rewind();
			return TRUE;
		}
		else if (recsize != 80)
		{
			printf("File '%s' doesn't appear to be a DL_POLY Unformatted trajectory.\n", filterfilename());
			return FALSE;
		}
		string title = readchars(recsize);
		recsize = readint(intsize);

		# Next, number of atoms in the system (as a double)
		recsize = readint(intsize);
		int natoms = nint(readdouble());
		recsize = readint(intsize);

		# Atom names
		recsize = readint(intsize);
		skipchars(recsize);
		recsize = readint(intsize);

		# Atomic masses
		recsize = readint(intsize);
		skipchars(recsize);
		recsize = readint(intsize);

		# Atom charges
		recsize = readint(intsize);
		skipchars(recsize);
		recsize = readint(intsize);
		
		return TRUE;
	}

	int readframe()
	{
		int intsize=4, realsize=8, recsize;

		# Variables
		double mass,q,tstep;
		double axes[9];
		int natoms, nstep, keytrj, imcon, n;

		# First data for frame is : nstep, $natoms, keytrj, imcon, tstep, all as doubles 
		recsize = readint(intsize);
		if (recsize != 5*realsize) { printf("Error reading start of trajectory frame.\n"); return FALSE; }
		nstep = nint(readdouble(realsize));
		natoms = nint(readdouble(realsize));
		keytrj = nint(readdouble(realsize));
		imcon = nint(readdouble(realsize));
		tstep = readdouble(realsize);
		recsize = readint(intsize);

		# Create temporary data arrays for reading
		double x[natoms], y[natoms], z[natoms];

		# Unit cell
		if (imcon != 0)
		{
			recsize = readint(intsize);
			if (recsize != 9*realsize) { printf("Error reading cell info from trajectory frame.\n"); return FALSE; }
			readdoublearray(axes,9);
			recsize = readint(intsize);
			cellaxes(axes[1],axes[2],axes[3],axes[4],axes[5],axes[6],axes[7],axes[8],axes[9]);
		}

		# Template atoms in parent model
		modeltemplate();
		if (aten.model.frame.natoms != natoms) { printf("Parent model contains different number of atoms to trajectory - aborting.\n"); return FALSE; }

		# Coordinates
		recsize = readint(intsize);
		if (recsize != natoms*realsize) { printf("Error reading coordinate info from trajectory frame.\n"); return FALSE; }
		if (!readdoublearray(x,natoms)) { printf("Error reading x-coordinates from trajectory frame.\n"); return FALSE; }
		recsize = readint(intsize);
		recsize = readint(intsize);
		if (!readdoublearray(y,natoms)) { printf("Error reading y-coordinates from trajectory frame.\n"); return FALSE; }
		recsize = readint(intsize);
		recsize = readint(intsize);
		if (!readdoublearray(z,natoms)) { printf("Error reading z-coordinates from trajectory frame.\n"); return FALSE; }
		recsize = readint(intsize);
		for (n = 1; n<= natoms; ++n) setcoords(x[n], y[n], z[n], n);

		# Forces
		if (keytrj > 0)
		{
			recsize = readint(intsize);
			if (recsize != natoms*realsize) { printf("Error reading force info from trajectory frame.\n"); return FALSE; }
			if (!readdoublearray(x,natoms)) { printf("Error reading x-forces from trajectory frame.\n"); return FALSE; }
			recsize = readint(intsize);
			recsize = readint(intsize);
			if (!readdoublearray(y,natoms)) { printf("Error reading y-forces from trajectory frame.\n"); return FALSE; }
			recsize = readint(intsize);
			recsize = readint(intsize);
			if (!readdoublearray(z,natoms)) { printf("Error reading z-forces from trajectory frame.\n"); return FALSE; }
			recsize = readint(intsize);
			for (n = 1; n<= natoms; ++n) setforces(x[n], y[n], z[n], n);
		}

		# Velocities
		if (keytrj > 1)
		{
			recsize = readint(intsize);
			if (recsize != natoms*realsize) { printf("Error reading velocity info from trajectory frame.\n"); return FALSE; }
			if (!readdoublearray(x,natoms)) { printf("Error reading x-velocities from trajectory frame.\n"); return FALSE; }
			recsize = readint(intsize);
			recsize = readint(intsize);
			if (!readdoublearray(y,natoms)) { printf("Error reading y-velocities from trajectory frame.\n"); return FALSE; }
			recsize = readint(intsize);
			recsize = readint(intsize);
			if (!readdoublearray(z,natoms)) { printf("Error reading z-velocities from trajectory frame.\n"); return FALSE; }
			recsize = readint(intsize);
			for (n = 1; n<= natoms; ++n) setvelocities(x[n], y[n], z[n], n);
		}
		rebond();
		return TRUE;
	}
}
