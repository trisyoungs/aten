/*
	*** Command Function Definitions
	*** src/parser/commands.cpp
	Copyright T. Youngs 2007-2009

	This file is part of Aten.

	Aten is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	Aten is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with Aten.  If not, see <http://www.gnu.org/licenses/>.
*/

#include "parser/commands.h"
#include "parser/commandnode.h"
#include "main/aten.h"
#include "base/bundle.h"
#include "parser/tree.h"

/* Argument Specification Tokens:
       Char	Meaning		Acceptable Types in VTypes
	N	Number		IntegerData, RealData
	C	Character	CharacterData
	*	Any Simple	IntegerData, RealData, CharacterData
	A	Atom		IntegerData, AtomData
*/

// Singleton
NuCommand nucommands;

// Command action
NuCommandData NuCommand::data[NuCommand::nFunctions] = {

	// AST Nodes
	{ "_nofunction",	"",		"", NuVTypes::NoData,
				"" },
	{ "_joiner",		"",		"", NuVTypes::NoData,
				"" },
	{ "_declarations",	"",		"", NuVTypes::NoData,
				"" },

	// Analysis commands
	{ "finalise",		"",		"", NuVTypes::NoData,
				"Finalise all calculated quantities" },
	{ "frameanalyse",	"",		"", NuVTypes::NoData,
				"Analyse quantities for the current trajectory frame" },
	{ "geometry",		"CNNNCNNnn",	"<name> <min> <binwidth> <nbins> <filename> <site1> <site2> [site3 [site4]]", NuVTypes::NoData,
				"Calculate geometries" },
	{ "modelanalyse",	"",		"", NuVTypes::NoData,
				"Analyse quantities for the current model" },
	{ "pdens",		"CNNCNN",	"<name> <griddelta> <nsteps> <filename> <site1> <site2> ", NuVTypes::NoData,
				"Request calculation of a probability density between sites" },
	{ "listjobs",		"",		"", NuVTypes::NoData,
				"Print the current list of quantities to calculate" },
	{ "rdf",		"CNNNCNN",	"<name> <rmin> <binwidth> <nbins> <filename> <site1> <site2>", NuVTypes::NoData,
				"Request calculation of radial distribution function between sites" },
	{ "savequantities",	"",		"", NuVTypes::NoData,
				"Save calculated quantities to file" },
	{ "trajanalyse",	"NNn",		"<startframe> <frameskip> [nframes]", NuVTypes::NoData,
				"Analyse quantities for all frames in current trajectory" },
	
	// Atom commands
	{ "atomstyle",		"Ca",		"<style> [atom/id]", NuVTypes::NoData,
				"Set the individual style of the current atom selection (or supplied atom)" },
	{ "getatom",		"N",		"<id>", NuVTypes::NoData,
				"Retrieve information for atom id, placing in variable supplied" },
	{ "hide",		"a",		"[atom/id]", NuVTypes::NoData,
				"Hide the current selection of atoms (or supplied atom)" },
	{ "setcharge",		"Na",		"<q> [atom/id]", NuVTypes::NoData,
				"Set the charge of the current (or specified) atom" },
	{ "setcoords",		"NNNa",		"<x> <y> <z> [atom/id]", NuVTypes::NoData,
				"Set the coordinates of the current (or specified) atom" },
	{ "setelement",		"Ga",		"<element> [atom/id]", NuVTypes::NoData,
				"Set the element of the current (or specified) atom" },
	{ "setforces",		"NNNa",		"<fx> <fy> <fz> [atom/id]", NuVTypes::NoData,
				"Set the forces of the current (or specified) atom" },
	{ "setfx",		"Na",		"<fx> [atom/id]", NuVTypes::NoData,
				"Set the x force of the current (or specified) atom" },
	{ "setfy",		"Na",		"<fy> [atom/id]", NuVTypes::NoData,
				"Set the y force of the current (or specified) atom" },
	{ "setfz",		"Na",		"<fz> [atom/id]", NuVTypes::NoData,
				"Set the z force of the current (or specified) atom" },
	{ "setid",		"Na",		"<id> [atom/id]", NuVTypes::NoData,
				"Set the id of the current (or specified) atom" },
	{ "setrx",		"Na",		"<rx> [atom/id]", NuVTypes::NoData,
				"Set the x coordinate of the current (or specified) atom" },
	{ "setry",		"Na",		"<ry> [atom/id]", NuVTypes::NoData,
				"Set the y coordinate of the current (or specified) atom" },
	{ "setrz",		"Na",		"<rz> [atom/id]", NuVTypes::NoData,
				"Set the z coordinate of the current (or specified) atom" },
	{ "setvelocities",	"NNNa",		"<vx> <vy> <vz> [atom/id]", NuVTypes::NoData,
				"Set the velocities of the current (or specified) atom" },
	{ "setvx",		"Na",		"<vx> [atom/id]", NuVTypes::NoData,
				"Set the x velocity of the current (or specified) atom" },
	{ "setvy",		"Na",		"<vy> [atom/id]", NuVTypes::NoData,
				"Set the y velocity of the current (or specified) atom" },
	{ "setvz",		"Na",		"<vz> [atom/id]", NuVTypes::NoData,
				"Set the z velocity of the current (or specified) atom" },
	{ "show",		"a",		"[atom/id]", NuVTypes::NoData,
				"Show (make visible) the current selection of atoms (or supplied atom)" },
	{ "showall",		"",		"", NuVTypes::NoData,
				"Show all atoms in the current model" },

	// Bonding commands
	{ "augment",		"",		"", NuVTypes::NoData,
				"Automatically augment all bonds in the current model" },
	{ "bondtolerance",	"n",		"<tolerance>", NuVTypes::NoData,
				"Set bonding tolerance for automatic calculation" },
	{ "clearbonds",		"",		"", NuVTypes::NoData,
				"Delete all bonds in the current model" },
	{ "clearselectedbonds",	"",		"", NuVTypes::NoData,
				"Delete all bonds in the current selection" },
	{ "newbond",		"NN*",		"<atom1> <atom2> [bondtype]", NuVTypes::NoData,
				"Create a bond between specified atoms" },
	{ "newbondid",		"NN*",		"<id1> <id2> [bondtype]", NuVTypes::NoData,
				"Create a bond between atoms with ids specified" },
	{ "rebond",		"",		"", NuVTypes::NoData,
				"Calculate bonding in the current model" },
	{ "rebondpatterns",	"",		"", NuVTypes::NoData,
				"Calculate bonds between atoms, restricted to atoms in pattern molecules" },
	{ "rebondselection",	"",		"", NuVTypes::NoData,
				"Calculate bonds between atoms in the current selection" },

	// Build commands
	{ "addhydrogen",	"e",		"[atom|id]", NuVTypes::NoData,
				"Hydrogen satisfy all (or specified) atom in model" },
	{ "bohr",		"v*",		"<object> [object...]", NuVTypes::NoData,
				"Convert coordinates in the specified object " },
	{ "chain",		"Neeee",	"<element> [bondtype] | <element> <x> <y> <z> [bondtype]", NuVTypes::NoData,
				"Create a new atom in the current model, bound to the last" },
	{ "endchain",		"",		"", NuVTypes::NoData,
				"End the current bond chain (the next call to 'chain' will create an unbound atom)" },
	{ "insertatom",		"NNeee",	"<element> <id> [x y z]", NuVTypes::NoData,
				"Insert a new atom into the model such that it has the ID specified" },
	{ "locate",		"EEE",		"<x> <y> <z>", NuVTypes::NoData,
				"Position pen at specified coordinates" },
	{ "move",		"EEE",		"<dx> <dy> <dz>", NuVTypes::NoData,
				"Move pen by specified coordinates" },
	{ "movetoend",		"",		"", NuVTypes::NoData,
				"Move current atom selection to end of list" },
	{ "movetostart",	"",		"", NuVTypes::NoData,
				"Move current atom selection to start of list" },
	{ "newatom",		"Neee",		"<element> [x y z]", NuVTypes::NoData,
				"Create a new atom in the current model" },
	{ "newatomfrac",	"NEEE",		"<element> <fracx> <fracy> <fracz>", NuVTypes::NoData,
				"Create a new atom in the current model, converting fractional coordinates to real coordinates" },
	{ "reorder",		"",		"", NuVTypes::NoData,
				"Reorder atoms in the current selection such that bond partners have adjacent atom IDs" },
	{ "resetpen",		"",		"", NuVTypes::NoData,
				"Reset the pen orientation to the identity matrix (but leave the current position intact)" },
	{ "rotx",		"E",		"<angle>", NuVTypes::NoData,
				"Rotate pen about its x axis by given angle" },
	{ "roty",		"E",		"<angle>", NuVTypes::NoData,
				"Rotate pen about its y axis by given angle" },
	{ "rotz",		"E",		"<angle>", NuVTypes::NoData,
				"Rotate pen about its z axis by given angle" },
	{ "shiftdown",		"e",		"[n]", NuVTypes::NoData,
				"Shift current atom selection down 1 (or 'n') places" },
	{ "shiftup",		"e",		"[n]", NuVTypes::NoData,
				"Shift current atom selection up 1 (or 'n') places" },
	{ "transmute",		"E",		"<element>", NuVTypes::NoData,
				"Transmute selection to element given" },
	
	// Cell commands
	{ "addgenerator",	"N",		"<generator>", NuVTypes::NoData,
				"Manually add a spacegroup generator definition to the current model's cell" },
	{ "adjustcell",		"NE",		"<quantity> <change>", NuVTypes::NoData,
				"Adjust a single value of the current cell specification (e.g. <quantity> = a, beta, cz, etc.)" },
	{ "cell",		"EEEEEE",	"<a> <b> <c> <alpha> <beta> <gamma>", NuVTypes::NoData,
				"Set or create a unit cell for the current model from lengths/angles provided" },
	{ "cellaxes",		"EEEEEEEEE",	"<ax> <ay> <az> <bx> <by> <bz> <cx> <cy> <cz>", NuVTypes::NoData,
				"Set or create a unit cell for the current model from the cell axes provided" },
	{ "fold",		"",		"", NuVTypes::NoData,
				"Fold atoms into model's unit cell" },
	{ "foldmolecules",	"",		"", NuVTypes::NoData,
				"Fold molecules (defined by patterns) so that they are unbroken across cell boundaries" },
	{ "fractoreal",		"",		"", NuVTypes::NoData,
				"Convert (assumed) fractional model coordinates to real coordinates" },
	{ "nocell",		"", 		"", NuVTypes::NoData,
				"Remove any cell definition from the current model" },
	{ "pack",		"",		"", NuVTypes::NoData,
				"Pack the unit cell with symmetry operators list in associated spacegroup" },
	{ "printcell",		"",		"", NuVTypes::NoData,
				"Print the unit cell of the current model" },
	{ "replicate",		"EEEEEE",	"<negx> <negy> <negz> <posx> <posy> <posz>", NuVTypes::NoData,
				"Replicate the cell along the directions given" },
	{ "rotatecell",		"NE",		"<axis> <angle>", NuVTypes::NoData,
				"Rotate the cell and its contents about the specified orthogonal axis (x, y, or z)" },
	{ "scale",		"EEE",		"<x> <y> <z>", NuVTypes::NoData,
				"Scale the unit cell and atomic positions of the current model" },
	{ "scalemolecules",	"EEE",		"<x> <y> <z>", NuVTypes::NoData,
				"Scale the unit cell and molecular positions of the current model" },
	{ "setcell",		"NE",		"<quantity> <value>", NuVTypes::NoData,
				"Set a single value of the current cell specification (e.g. <quantity> = a, beta, cz, etc.)" },
	{ "spacegroup",		"N",		"<spgrp>", NuVTypes::NoData,
				"Set the spacegroup for the current model" },
	
	// Charge commands
	{ "chargeff",		"",		"", NuVTypes::NoData,
				"Charge atoms in the model according to their forcefield atom types" },
	{ "chargefrommodel",	"",		"", NuVTypes::NoData,
				"Charge atoms in the current trajectory frame from the parent model" },
	{ "chargepatom",	"EE",		"<id> <q>", NuVTypes::NoData,
				"Set charges for specific atom id in all molecules of the current pattern" },
	{ "charge",		"E",		"<q>", NuVTypes::NoData,
				"Set charges of atoms in the current selection" },
	{ "chargetype",		"EE",		"<type> <q>", NuVTypes::NoData,
				"Set charges of all atoms of the given type" },
	{ "clearcharges",	"",		"", NuVTypes::NoData,
				"Zero all charges in the current model" },

	// Colourscale commands
	{ "addpoint",		"EEEEEe",	"<scaleid> <value> <r> <g> <b> [a]", NuVTypes::NoData,
				"Add a new point to the specified colourscale" },
	{ "clearpoints",	"E",		"<scaleid>", NuVTypes::NoData,
				"Clear all points from the specified colourscale" },
	{ "listscales",		"",		"", NuVTypes::NoData,
				"List details on all colourscales" },
	{ "removepoint",	"EE",		"<scaleid> <point>", NuVTypes::NoData,
				"Remove the selected point from the specified colourscale" },
	{ "scalename",		"En",		"<scaleid> [name]", NuVTypes::NoData,
				"Print (or set) the name of the colourscale specified" },
	{ "scalevisible",	"EN",		"<scaleid> true|false", NuVTypes::NoData,
				"Set the visibility of the specified colourscale" },
	{ "setpoint",		"EEEEEEe",	"<scaleid> <point> <value> <r> <g> <b> [a]", NuVTypes::NoData,
				"Set an existing point on the specified colourscale" },
	{ "setpointcolour", 	"EEEEEe",	"<scaleid> <point> <r> <g> <b> [a]", NuVTypes::NoData,
				"Set the colour for an existing colourscale point" },
	{ "setpointvalue", 	"EEE",		"<scaleid> <point> <value>", NuVTypes::NoData,
				"Set the value for an existing colourscale point" },

	// Disordered Builder Commands
	{ "disorder",		"E",		"<nsteps>", NuVTypes::NoData,
				"Run the disordered builder" },
	{ "listcomponents",	"",		"", NuVTypes::NoData,
				"Print a list of the components requested in the disordered builder" },
	{ "nmols",		"E",		"<n>", NuVTypes::NoData,
				"Set the number of molecules required for the component" },
	{ "region",		"NEEEEEEN",	"<shape> <cx> <cy> <cz> <x> <y> <z> yes|no", NuVTypes::NoData,
				"Set the shape, centre, size, and overlap flag of the region for the current model" },
	{ "regioncentre",	"EEE",		"<x> <y> <z>", NuVTypes::NoData,
				"Set the region centre of the current model" },
	{ "regioncentref",	"EEE",		"<x> <y> <z>", NuVTypes::NoData,
				"Set the region centre of the current model (fractional coordinates)" },
	{ "regionf",		"NEEEEEEN",	"<shape> <cx> <cy> <cz> <x> <y> <z> yes|no", NuVTypes::NoData,
				"Set the shape, centre, size, and overlap flag of the region for the current model (fractional coordinates)" },
	{ "regiongeometry",	"EEEe",		"<x> <y> <z> [l]", NuVTypes::NoData,
				"Set the region geometry of the current model" },
	{ "regiongeometryf",	"EEEe",		"<x> <y> <z> [l]", NuVTypes::NoData,
				"Set the region geometry of the current model (fractional coordinates)" },
	{ "regionoverlap",	"N",		"yes|no", NuVTypes::NoData,
				"Set the overlap flag of the current model" },
	{ "regionshape",	"N",		"<shape>", NuVTypes::NoData,
				"Set the region shape of the current model" },
	{ "vdwscale",		"E",		"<scale>", NuVTypes::NoData,
				"Set the VDW scaling factor to use in the disordered builder" },

	// Edit commands
	{ "copy",		"",		"", NuVTypes::NoData,
				"Copy selected atoms" },
	{ "cut",		"",		"", NuVTypes::NoData,
				"Cut the selected atoms" },
	{ "delete",		"",		"", NuVTypes::NoData,
				"Delete selected atoms" },
	{ "paste",		"eee",		"[dx] [dy] [dz]", NuVTypes::NoData,
				"Paste previously-cut or copied atoms to the model (with optional shift from original position" },
	{ "redo",		"",		"", NuVTypes::NoData,
				"Redo last change" },
	{ "undo",		"",		"", NuVTypes::NoData,
				"Undo last change" },

	// Energy commands
	{ "frameenergy",	"",		"", NuVTypes::NoData,
				"Calculate the energy of the current trajectory frame" },
	{ "modelenergy",	"",		"", NuVTypes::NoData,
				"Calculate the energy of the current model" },
	{ "printelec",		"",		"", NuVTypes::NoData,
				"Print the electrostatic pattern matrix of the last calculated energy" },
	{ "printewald",		"",		"", NuVTypes::NoData,
				"Print the Ewald decomposition of the last calculated energy" },
	{ "printinter",		"",		"", NuVTypes::NoData,
				"Print the total intermolecular pattern matrix of the last calculated energy" },
	{ "printintra",		"",		"", NuVTypes::NoData,
				"Print the total intramolecular pattern matrix of the last calculated energy" },
	{ "printenergy",	"",		"", NuVTypes::NoData,
				"Print a short description of the last calculated energy" },
	{ "printsummary",	"",		"", NuVTypes::NoData,
				"Print a one-line summary of the last calculated energy" },
	{ "printvdw",		"",		"", NuVTypes::NoData,
				"Print the VDW pattern matrix of the last calculated energy" },

	// Flow control
	{ "break",		"",		"", NuVTypes::NoData,
				"Exit from the current for loop" },
	{ "continue",		"",		"", NuVTypes::NoData,
				"Skip to the next iteration of the current loop" },
	{ "else",		"",		"", NuVTypes::NoData,
				"Perform the subsequent block if all previous if/elseif tests failed" },
	{ "elseif",		"ESE",		"<variable> <condition> <variable|constant>", NuVTypes::NoData,
				"Perform a conditional test on the supplied variable against the second variable (or constant), if all previous tests failed" },
	{ "end",		"",		"", NuVTypes::NoData,
				"End the current for/if block" },
	{ "for",		"Vee",		"<variable> [start] [end]", NuVTypes::NoData,
				"" },
	{ "goto",		"",		"", NuVTypes::NoData,
				"" },
	{ "_GOTONONIF_",	"",		"", NuVTypes::NoData,
				"" },
	{ "if",			"ESE",		"<expression> <condition> <expression>", NuVTypes::NoData,
				"Perform a conditional test between the supplied expressions (or variables or constants)" },
	{ "_TERMINATE_",	"",		"", NuVTypes::NoData,
				"" },
	
	// Force commands
	{ "frameforces",	"",		"", NuVTypes::NoData,
				"Calculate forces for the current trajectory frame" },
	{ "modelforces",	"",		"", NuVTypes::NoData,
				"Calculate forces for the current model" },
	{ "printforces",	"",		"", NuVTypes::NoData,
				"Print calculated forces for the current model" },
	
	// Forcefield commands
	{ "angledef",		"NNNNEeeeee", "<form> <name1> <name2> <name3> <data1> [data2 ... data6]", NuVTypes::NoData,
				"Add an angle definition to the current forcefield." },
	{ "bonddef",		"NNNEeeeee", "<form> <name1> <name2> <data1> [data2 ... data6]", NuVTypes::NoData,
				"Add a bond definition to the current forcefield." },
	{ "clearmap",		"",		"", NuVTypes::NoData,
				"Clear manual type mapping list." },
	{ "createexpression",	"",		"", NuVTypes::NoData,
				"Create and fill a forcefield expression for the current model" },
	{ "defaultff",		"N",		"<ff>", NuVTypes::NoData,
				"Make named forcefield the default for occasions where no other is specified." },
	{ "equivalents",	"NN",		"<name> <'names...'>", NuVTypes::NoData,
				"Define forcefield equivalents" },
	{ "ffmodel",		"n",		"[name]", NuVTypes::NoData,
				"Associate current (or named) forcefield to current model" },
	{ "ffpattern",		"",		"", NuVTypes::NoData,
				"Associate current forcefield to current pattern" },
	{ "ffpatternid",	"E",		"<patternid>", NuVTypes::NoData,
				"Associate current forcefield to specified pattern ID" },
	{ "finaliseff",		"",		"", NuVTypes::NoData,
				"Finalise current forcefield." },
	{ "genconvert",		"E*",		"<data1> [data2..data10]", NuVTypes::NoData,
				"Set energetic generator data to convert" },
	{ "generator",		"EEeeeeeeeee",	"<typeId> <data1> [data2...data10]", NuVTypes::NoData,
				"Set generator data for specified atom type" },
	{ "getff",		"N",		"<name>", NuVTypes::NoData,
				"Select named (loaded) forcefield and make it current" },
	{ "interdef",		"NEEEeeeee", "<form> <typeid> <charge> <data1> [data2...data6]", NuVTypes::NoData,
				"Add a new interatomic definition to the current forcefield" },
	{ "loadff",		"Nn",		"<filename> [name]", NuVTypes::NoData,
				"Load forcefield" },
	{ "map",		"N*",		"<name=element,...>", NuVTypes::NoData,
				"Add typename mappings" },
	{ "newff",		"N",		"<name>", NuVTypes::NoData,
				"Create a new, empty forcefield." },
	{ "printsetup",		"",		"", NuVTypes::NoData,
				"Print the current energy/force calculation setup" },
	{ "rules",		"N",		"<rules set>", NuVTypes::NoData,
				"Set rules set to use for parameter generation" },
	{ "saveexpression",	"NN",		"<format> <filename>", NuVTypes::NoData,
				"Save the expression for the current model" },
	{ "torsiondef",		"NNNNNEeeeee", "<form> <name1> <name2> <name3> <name4> <data1> [data2 ... data6]", NuVTypes::NoData,
				"Add a torsion definition to the current forcefield." },
	{ "typedef",		"ENNNn", "<typeid> <name> <element> <type> [description]", NuVTypes::NoData,
				"Add an atom type to the current forcefield." },
	{ "typemodel",		"",		"", NuVTypes::NoData,
				"Perform atom typing on the current model" },
	{ "typetest",		"EE",		"<ffid> <atomid>", NuVTypes::NoData,
				"Test atomtype score on atom provided" },
	{ "units",		"N",		"<energy unit>", NuVTypes::NoData,
				"Set energy unit of forcefield" },

	// Glyph commands
	{ "autoellipsoids",	"n*",		"[options]", NuVTypes::NoData,
				"Automatically add ellipsoids to the current atom selection" },
	{ "autopolyhedra",	"n*",		"[options]", NuVTypes::NoData,
				"Automatically add polyhedra to the current atom selection" },
	{ "glyphatomf",		"Ee",		"<n> [atom|atomid]", NuVTypes::NoData,
				"Set current (or specified) atom's forces as data <n> in current glyph" },
	{ "glyphatomr",		"Ee",		"<n> [atom|atomid]", NuVTypes::NoData,
				"Set current (or specified) atom's coordinates as data <n> in current glyph" },
	{ "glyphatomv",		"Ee",		"<n> [atom|atomid]", NuVTypes::NoData,
				"Set current (or specified) atom's velocities data <n> in current glyph" },
	{ "glyphatomsf",	"Eeee",		"<atom|atomid> [atom|atomid] [atom|atomid] [atom|atomid]", NuVTypes::NoData,
				"Set all atom forces data in current glyph" },
	{ "glyphatomsr",	"Eeee",		"<atom|atomid> [atom|atomid] [atom|atomid] [atom|atomid]", NuVTypes::NoData,
				"Set all atom coordinates data in current glyph" },
	{ "glyphatomsv",	"Eeee",		"<atom|atomid> [atom|atomid] [atom|atomid] [atom|atomid]", NuVTypes::NoData,
				"Set all atom velocities data in current glyph" },
	{ "glyphcolour",	"EEEEe",	"<n> <r> <g> <b> [a]", NuVTypes::NoData,
				"Set colour data <n> in current glyph" },
	{ "glyphdata",		"EEee",		"<n> <x> <y> <z>", NuVTypes::NoData,
				"Set vector data <n> in current glyph" },
	{ "glyphsolid",		"N",		"<true|false>", NuVTypes::NoData,
				"Set the glyph to be drawn in solid (true) or wireframe (false) modes (glyph-permitting)" },
	{ "glyphtext",		"N",		"<text>", NuVTypes::NoData,
				"Set text data in current glyph" },
	{ "newglyph",		"Nn",		"<style> [options]", NuVTypes::NoData,
				"Add a glyph with the specified style to the current model" },

	// Grid commands
	{ "addgridpoint",	"EEEE",		"<ix> <iy> <iz> <value>", NuVTypes::NoData,
				"Set specific gridpoint value" },
	{ "addnextgridpoint",	"E",		"<value>", NuVTypes::NoData,
				"Add next gridpoint value" },
	{ "finalisegrid",	"",		"", NuVTypes::NoData,
				"Finalise grid import" },
	{ "getgrid",		"EV",		"<id> <variable>", NuVTypes::NoData,
				"Retrieve data for grid with id specified, placing in variable supplied" },
	{ "gridalpha",		"E",		"<alpha>", NuVTypes::NoData,
				"Set the alpha value of the surface (when not using a colourscale)" },
	{ "gridaxes",		"EEEEEEEEE",	"<ax> <ay> <az> <bx> <by> <bz> <cx> <cy> <cz>", NuVTypes::NoData,
				"Set axis system for the current grid" },
	{ "gridcolour",		"EEEe",		"<r> <g> <b> [a]", NuVTypes::NoData,
				"Set the (positive) colour of the surface (when not using a colourscale)" },
	{ "gridcolournegative",	"EEEe",		"<r> <g> <b> [a]", NuVTypes::NoData,
				"Set the negative colour of the surface (when not using a colourscale)" },
	{ "gridcolourscale",	"E",		"<scaleID>", NuVTypes::NoData,
				"Links the surface to the specified colour scale (or zero to return to internal colour)" },
	{ "gridcubic",		"E",		"<l>", NuVTypes::NoData,
				"Setup a cubic axis system for the current grid" },
	{ "gridcutoff",		"E",		"<cutoff>", NuVTypes::NoData,
				"Set the cutoff for the current grid" },
	{ "gridlooporder",	"N",		"<xyz|zyx|213...>", NuVTypes::NoData,
				"Set the loop ordering to use in 'addnextgridpoint'" },
	{ "gridorigin",		"EEE",		"<x> <y> <z>", NuVTypes::NoData,
				"Set the origin of the axes system for the current grid" },
	{ "gridortho",		"EEE",		"<a> <b> <c>", NuVTypes::NoData,
				"Setup an orthorhombic axis system for the current grid" },
	{ "gridsize",		"EEE",		"<nx> <ny> <nz>", NuVTypes::NoData,
				"Set the number of points along each axis for the current grid" },
	{ "gridstyle",		"N",		"<style>", NuVTypes::NoData,
				"Set the drawing style of the current grid" },
	{ "gridsymmetric",	"N",		"yes|no", NuVTypes::NoData,
				"Set whether the isodata is symmetric about zero (i.e. whether to draw both halves)" },
	{ "gridusez",		"N",		"yes|no", NuVTypes::NoData,
				"Whether a 2D surface uses the vertex data value as its z (height) data" },
	{ "loadgrid",		"N",		"<gridfile>", NuVTypes::NoData,
				"Load grid data" },
	{ "newgrid",		"N",		"<title>", NuVTypes::NoData,
				"Create new grid data" },

	// Image commands
	{ "savebitmap",		"NNnnn",	"<format> <filename> [width] [height] [quality, 0-100]", NuVTypes::NoData,
				"Save the current model view as a bitmap image: formats available are bmp, jpg, png, ppm, xbm, and xpm" },
	{ "savevector",		"NN",		"<format> <filename>", NuVTypes::NoData,
				"Save the current model view as a vector image: formats available are ps, eps, tex, pdf, svg, and pgf" },
	
	// Labeling commands
	{ "clearlabels",	"",		"", NuVTypes::NoData,
				"Remove all atom labels in the current model" },
	{ "label",		"Nn",		"<label> [id]", NuVTypes::NoData,
				"Add labels to the current atom selection (or specified atom)" },
	{ "removelabel",	"Nn",		"<label> [id]", NuVTypes::NoData,
				"Remove labels from the current atom selection (or specified atom)" },
	{ "removelabels",	"n",	"[id]", NuVTypes::NoData,
				"Remove all labels from the current atom selection (or specified atom)" },

	// MC commands
	{ "mcaccept",		"NE",		"<movetype> <energy>", NuVTypes::NoData,
				"Set Monte Carlo move type acceptance energies" },
	{ "mcallow",		"NN",		"<movetype> yes|no", NuVTypes::NoData,
				"Restrict or allow Monte Carlo move types" },
	{ "mcmaxstep",		"NE",		"<movetype> <step>", NuVTypes::NoData,
				"Set maximum step sizes for Monte Carlo move types" },
	{ "mcntrials",		"NE",		"<movetype> <ntrials>", NuVTypes::NoData,
				"Set trial numbers for Monte Carlo move types" },
	{ "printmc",		"",		"", NuVTypes::NoData,
				"Print current Monte Carlo parameters" },
	
	// Measurements
	{ "angle",		"EEEv",		"<id1> <id2> <id3> [result]", NuVTypes::NoData,
				"Measure angle between atoms specified (and put in variable if supplied)" },
	{ "angles",		"",		"", NuVTypes::NoData,
				"Measure bond angles between atoms in current selection" },
	{ "clearmeasurements",	"",		"", NuVTypes::NoData,
				"Clear all measurements in the current model" },
	{ "distance",		"EEv",		"<id1> <id2> [result]", NuVTypes::NoData,
				"Measure distance between atoms specified (and put in variable if supplied)" },
	{ "distances",		"",		"", NuVTypes::NoData,
				"Measure bond distances between atoms in current selection" },
	{ "listmeasurements",	"",		"", NuVTypes::NoData,
				"List all measurements in the current model" },
	{ "measure",		"EEee",		"<id1> <id2> [id3] [id4]", NuVTypes::NoData,
				"Make a measurement between the specified atoms" },
	{ "torsion",		"EEEEv",	"<id1> <id2> <id3> <id4> [result]", NuVTypes::NoData,
				"Measure torsion angle between atoms specified (and put in variable if supplied)" },
	{ "torsions",		"",		"", NuVTypes::NoData,
				"Measure torsion angles between atoms in current selection" },

	// Messaging
	{ "error",		"G",		"<message>", NuVTypes::NoData,
				"Raise an error message (causes exit of current command list)" },
	{ "print",		"G",		"<message>", NuVTypes::NoData,
				"Print a message" },
	{ "verbose",		"G",		"<message>", NuVTypes::NoData,
				"Print a message when verbose output is enabled" },
	{ "warn",		"G",		"<message>", NuVTypes::NoData,
				"Raise a warning message (command list will continue)" },
	
	// Minimisation commands
	{ "cgminimise",		"",		"", NuVTypes::NoData,
				"Run a conjugate gradient minimiser on the current model" },
	{ "converge",		"EE",		"<energy> <forces>", NuVTypes::NoData,
				"Set energy and RMS force convergence limits for minimisation algorithms" },
	{ "linetol",		"E",		"<tolerance>", NuVTypes::NoData,
				"Set tolerance of line minimiser" },
	{ "mcminimise",		"E",		"<maxsteps>", NuVTypes::NoData,
				"Run Monte Carlo minimiser on the current model" },
	{ "sdminimise",		"E",		"<maxsteps>", NuVTypes::NoData,
				"Run steepest descent minimiser on the current model" },
	{ "simplexminimise",	"",		"", NuVTypes::NoData,
				"Run the Simplex minimiser on the current model" },
	
	// Model commands
	{ "createatoms",	"",		"", NuVTypes::NoData,
				"Create enough atoms in the current trajectory frame to match the parent model" },
	{ "currentmodel",	"N",		"[model]", NuVTypes::NoData,
				"Print the name of the current model, or set the current displayed model" },
	{ "finalisemodel",	"",		"", NuVTypes::NoData,
				"Finalise the current model" },
	{ "firstmodel",		"",		"", NuVTypes::NoData,
				"Make the first loaded/created model current" },
	{ "getmodel",		"Nm",		"<name> [variable]", NuVTypes::NoData,
				"Select the named (loaded) model and make it current [and set variables]" },
	{ "info",		"",		"", NuVTypes::NoData,
				"Print data on the current model" },
	{ "lastmodel",		"",		"", NuVTypes::NoData,
				"Make the last loaded/created model current" },
	{ "listmodels",		"",		"", NuVTypes::NoData,
				"List the currently-loaded models" },
	{ "loadmodel",		"Nn",		"<filename> [name]", NuVTypes::NoData,
				"Load a model from file" },
	{ "loginfo",		"",		"", NuVTypes::NoData,
				"Print log information for model" },
	{ "modeltemplate",	"",		"", NuVTypes::NoData,
				"Template the atoms in the current trajectory frame, matching the parent model" },
	{ "newmodel",		"N",		"<name>", NuVTypes::NoData,
				"Create a new model" },
	{ "nextmodel",		"",		"", NuVTypes::NoData,
				"Skip to the next loaded model" },
	{ "prevmodel",		"",		"", NuVTypes::NoData,
				"Skip to the previous loaded model" },
	{ "savemodel",		"NN",		"<format> <filename>", NuVTypes::NoData,
				"Save the current model to <filename> in the specified model <format>" },
	{ "setname",		"N",		"<name>", NuVTypes::NoData,
				"Set the name of the current model" },

	// Pattern commands
	{ "clearpatterns",	"",		"", NuVTypes::NoData,
				"Remove all pattern definitions from the current model" },
	{ "createpatterns",	"",		"", NuVTypes::NoData,
				"Automatically determine pattern definitions for the current model" },
	{ "getpattern",		"Np",		"<name|id> [variable]", NuVTypes::NoData,
				"Select the named pattern (or pattern id) and make it current" },
	{ "listpatterns",	"",		"", NuVTypes::NoData,
				"Print the pattern definition for the current model" },
	{ "newpattern",		"NEE",		"<name> <nmolecules> <atoms per molecule>", NuVTypes::NoData,
				"Add a pattern definition 'node' to the current model" },

	// Preferences commands
	{ "anglelabel",		"N",		"<text>", NuVTypes::NoData,
				"Set the units label to use for angles" },
	{ "atomdetail",		"E",		"<n>", NuVTypes::NoData,
				"Set the quadric detail of atoms" },
	{ "bonddetail",		"E",		"<n>", NuVTypes::NoData,
				"Set the quadric detail of bonds" },
	{ "colour",		"NEEEe",	"<colour> <r> <g> <b> [a]", NuVTypes::NoData,
				"Set the specified colour" },
	{ "commonelements",	"N",		"<elements...>", NuVTypes::NoData,
				"Set the common elements that appear in the Select Element dialog" },
	{ "densityunits",	"N",		"atomsperang|gpercm", NuVTypes::NoData,
				"Set the unit of density to use" },
	{ "distancelabel",	"N",		"<text>", NuVTypes::NoData,
				"Set the units label to use for distances" },
	{ "ecut",		"N",		"<cutoff>", NuVTypes::NoData,
				"Set the electrostatic cutoff distance" },
	{ "elec",		"Neeee",	"<none|coulomb|ewald|ewaldauto> [ <precision> | <alpha> <kx> <ky> <kz> ]", NuVTypes::NoData,
				"Set the style of electrostatic energy calculation" },
	{ "elementambient",	"NEEE",		"<element> <r> <g> <b>", NuVTypes::NoData,
				"Set ambient colour of element" },
	{ "elementdiffuse",	"NEEE",		"<element> <r> <g> <b>", NuVTypes::NoData,
				"Set diffuse colour of element" },
	{ "elementradius",	"NE",		"<element> <radius>", NuVTypes::NoData,
				"Set effective radius of element" },
	{ "energyunits",	"N",		"j|kj|cal|kcal|ha", NuVTypes::NoData,
				"Set the unit of energy to use" },
	{ "gl",			"NN",		"<option> <on|off>", NuVTypes::NoData,
				"Turn on/off various OpenGL options: fog, linealias, polyalias, backcull" },
	{ "hdistance",		"E",		"<distance>", NuVTypes::NoData,
				"Set the H-X bond distance to use when adding hydrogen" },
	{ "intra",		"N",		"<on|off>", NuVTypes::NoData,
				"Turn on/off energy and force calculation of intramolecular terms" },
	{ "key",		"NN",		"ctrl|shift|alt <action>", NuVTypes::NoData,
				"Set the action of modifier keys" },
	{ "labelsize",		"E",		"<pointsize>", NuVTypes::NoData,
				"Set the integer pointsize for label text" },
	{ "light",		"N",		"<on|off>", NuVTypes::NoData,
				"Turn the spotlight on/off" },
	{ "lightambient",	"EEE",		"<r> <g> <b>", NuVTypes::NoData,
				"Set the ambient colour component of the spotlight" },
	{ "lightdiffuse",	"EEE",		"<r> <g> <b>", NuVTypes::NoData,
				"Set the diffuse colour component of the spotlight" },
	{ "lightposition",	"EEE",		"<x> <y> <z>", NuVTypes::NoData,
				"Set the coordinates of the spotlight" },
	{ "lightspecular",	"EEE",		"<r> <g> <b>", NuVTypes::NoData,
				"Set the specular colour component of the spotlight" },
	{ "mouse",		"NN",		"left|middle|right|wheel <action>", NuVTypes::NoData,
				"Set the action of mouse buttons" },
	{ "radius",		"NE",		"<style> <r>", NuVTypes::NoData,
				"Set the general atom scales for view styles" },
	{ "replicatefold",	"N",		"<on|off>", NuVTypes::NoData,
				"Set whether to fold atoms before cell replicate" },
	{ "replicatetrim",	"N",		"<on|off>", NuVTypes::NoData,
				"Set whether to trim atoms after cell replicate" },
	{ "scheme",		"n",		"[colour scheme]", NuVTypes::NoData,
				"Show (or set) the atomic colouring scheme to use" },
	{ "shininess",		"E",		"<n>", NuVTypes::NoData,
				"Set the shininess of atoms" },
	{ "showonscreen",	"nn",		"[object  yes|no]", NuVTypes::NoData,
				"Set (or lists) the visibility of view objects on-screen" },
	{ "showonimage",	"nn",		"[object  yes|no]", NuVTypes::NoData,
				"Set (or lists) the visibility of view objects on saved images" },
	{ "style",		"n",		"[style]", NuVTypes::NoData,
				"Set (or show) the current model drawing style" },
	{ "swapbuffers",	"n",		"[on|off]", NuVTypes::NoData,
				"Set (or show) the current model drawing style" },
	{ "usenicetext",	"N",		"<<on|off>>", NuVTypes::NoData,
				"Use QPainter (on) or QGlWidget (off) to render label text" },
	{ "vcut",		"E",		"<cutoff>", NuVTypes::NoData,
				"Set the VDW cutoff distance" },
	{ "vdw",		"N",		"<on|off>", NuVTypes::NoData,
				"Turn on/off VDW energy/force calculation" },
	{ "zoomthrottle",	"n",		"[ratio]", NuVTypes::NoData,
				"Display (or set) the zooming throttle" },

	// Read / Write Commands
	{ "addreadoption",	"N",		"<option>", NuVTypes::NoData,
				"Add a read option: usequotes, skipblanks, stripbrackets" },
	{ "find",		"NVv",		"<string> <resultvar> [linevar]", NuVTypes::NoData,
				"Search for a string in the input file" },
	{ "getline",		"C",		"<variable>", NuVTypes::NoData,
				"Read the next line from the file and place it in the supplied variable" },
	{ "readchars",		"VE",		"<variable> <nchars>", NuVTypes::NoData,
				"Read a number of characters from the input file" },
	{ "readfloat",		"V",		"<variable>", NuVTypes::NoData,
				"Read a floating point value from the input file" },
	{ "readint",		"V",		"<variable>", NuVTypes::NoData,
				"Read an integer value from the input file" },
	{ "readline",		"F",		"<formatting string>", NuVTypes::NoData,
				"Read and parse a line from the input file" },
	{ "readnext",		"V",		"<variable>", NuVTypes::NoData,
				"Read the next delimited item from the file" },
	{ "readvar",		"VJ",		"<variable> <formatting string>", NuVTypes::NoData,
				"Parse a variable according to the supplied format" },
	{ "removereadoption",	"N",		"<option>", NuVTypes::NoData,
				"Remove a read option" },
	{ "rewind",		"",		"", NuVTypes::NoData,
				"Rewind to the start of the input file" },
	{ "skipchars",		"E",		"<nchars>", NuVTypes::NoData,
				"Skip a number of characters in the input file" },
	{ "skipline",		"e",		"[nlines]", NuVTypes::NoData,
				"Skip a number of lines in the input file" },
	{ "writeline",		"G",		"<formatting string>", NuVTypes::NoData,
				"Write a line to the output file" },
	{ "writevar",		"VK",		"<variable> <formatting string>", NuVTypes::NoData,
				"Write a line to the specified variable" },

	// Script commands
	{ "listscripts",	"",		"", NuVTypes::NoData,
				"List available scripts" },
	{ "loadscript",		"Nn",		"<filename> [nickname]", NuVTypes::NoData,
				"Load script from file" },
	{ "runscript",		"N",		"<name>", NuVTypes::NoData,
				"Execute the named script" },

	// Selection commands
	{ "deselect",		"Q*",		"<id|el|id-id|el-el|+id|+el|id+|el+,...>", NuVTypes::NoData,
				"Deselect specific atoms / ranges in the current model" },
	{ "deselecttype",	"NN",		"<element> <typedesc>", NuVTypes::NoData,
				"Deselect all atoms that match the provided atomtype description" },
	{ "expand",		"",		"", NuVTypes::NoData,
				"Expands the current atom selection" },
	{ "invert",		"",		"", NuVTypes::NoData,
				"Invert the current selection" },
	{ "select",		"Q*",		"<id|el|id-id|el-el|+id|+el|id+|el+,...>", NuVTypes::NoData,
				"Select specific atoms / ranges in the current model" },
	{ "selectall",		"",		"", NuVTypes::NoData,
				"Select all atoms in the current model" },
	{ "selectfftype",	"N",		"<typename>", NuVTypes::NoData,
				"Select all atoms of a specific forcefield type" },
	{ "selectioncog",	"vvv",		"[cogx cogy cogz]", NuVTypes::NoData,
				"Get centre of geometry of current selection (and place in variables if supplied" },
	{ "selectioncom",	"vvv",		"[cogx cogy cogz]", NuVTypes::NoData,
				"Get centre of mass of current selection (and place in variables if supplied" },
	{ "selectnone",		"",		"", NuVTypes::NoData,
				"Deselect all atoms in the current model" },
	{ "selectoverlaps",	"E",		"<tolerance>", NuVTypes::NoData,
				"Select all atoms which are within a given distance of each other" },
	{ "selectpattern",	"n",		"[name]", NuVTypes::NoData,
				"Select all atoms in the current (or named) pattern" },
	{ "selecttype",		"NN",		"<element> <typedesc>", NuVTypes::NoData,
				"Select all atoms that match the provided atomtype description" },
	
	// Site commands
	{ "getsite",		"N",		"<name>", NuVTypes::NoData,
				"Select the defined site and make it current" },
	{ "listsites",		"",		"", NuVTypes::NoData,
				"Print all sites defined for the current model" },
	{ "newsite",		"NNn",		"<name> <pattern> [atomlist]", NuVTypes::NoData,
				"Adds a new site definition to the current model" },
	{ "siteaxes",		"NN",		"<atomlist> <atomlist>", NuVTypes::NoData,
				"Set the axis definitions for the current site" },

	// System commands
	{ "debug",		"N",		"<mode>", NuVTypes::NoData,
				"Toggle debugging for the specified mode" },
	{ "gui",		"",		"", NuVTypes::NoData,
				"Start the GUI (if it is not already active)" },
	{ "help",		"N",		"<command>", NuVTypes::NoData,
				"Provide short help on the command supplied" },
	{ "seed",		"E",		"<seed>", NuVTypes::NoData,
				"Set the random seed" },
	{ "quit",		"",		"", NuVTypes::NoData,
				"Exit the program" },
	{ "version",		"",		"", NuVTypes::NoData,
				"Print program version information" },

	// Trajectory commands
	{ "finaliseframe",	"",		"", NuVTypes::NoData,
				"Finalise the current trajectory frame" },
	{ "firstframe",		"",		"", NuVTypes::NoData,
				"Go to the first frame in the current trajectory" },
	{ "lastframe",		"",		"", NuVTypes::NoData,
				"Go to the last frame in the current trajectory" },
	{ "loadtrajectory",	"N",		"<filename>", NuVTypes::NoData,
				"Load the specified trajectory and associate it to the current model" },
	{ "nextframe",		"",		"", NuVTypes::NoData,
				"Go to the next frame in the current trajectory" },
	{ "prevframe",		"",		"", NuVTypes::NoData,
				"Go to the previous frame in the current trajectory" },
	{ "seekframe",		"E",		"<frame>", NuVTypes::NoData,
				"Jump to the specified frame in the current trajectory" },
	
	// Transformation commands
	{ "axisrotate",		"EEEeeee",	"<ax> <ay> <ax> <theta> [ox oy oz] | <i> <j> <theta> [ox oy oz]", NuVTypes::NoData,
				"Rotate the current selection about a defined axis and origin" },
	{ "centre",		"EEE",		"<x> <y> <z>", NuVTypes::NoData,
				"Centre the atom selection of the current model at the specified coordinates" },
	{ "matrixconvert",	"EEEEEEEEEEEEeeeeeeeee","<i_sx> <j_sx> <i_sy> <j_sy> <i_sz> <j_sz> <i_dx> <j_dx> <i_dy> <j_dy> <i_dz> <j_dz> [ox oy oz] | <sax> <say> <saz> <sbx> <sby> <sbz> <scx> <scy> <scz> <dax> <day> <daz> <dbx> <dby> <dbz> <dcx> <dcy> <dcz> [ox oy oz]", NuVTypes::NoData,
				"Transform selected atoms in reference frame specified to destination frame specified" },
	{ "matrixtransform",	"EEEEEEEEEeee",	"<ax> <ay> <az> <bx> <by> <bz> <cx> <cy> <cz> [ox oy oz]", NuVTypes::NoData,
				"Transform selected atoms by the matrix supplied" },
	{ "mirror",		"N",		"<axis>", NuVTypes::NoData,
				"Mirror the atom selection of the current model about its geometric centre in the specified axis" },
	{ "translate",		"EEE",		"<dx> <dy> <dz>", NuVTypes::NoData,
				"Translate the atom selection of the current model" },
	{ "translateatom",	"EEE",		"<dx> <dy> <dz>", NuVTypes::NoData,
				"Translate the current atom" },
	{ "translatecell",	"EEE",		"<dx> <dy> <dz>", NuVTypes::NoData,
				"Translate the current selection along the cell axes by the fractional axes specified" },

	// Variables
	{ "character",		"",		"<variables>", NuVTypes::NoData,
				"Create character (string) variables with the names provided" },
	{ "integer",		"",		"<variables>", NuVTypes::NoData,
				"Create integer variables with the names provided" },
	{ "real",		"",		"<variables>", NuVTypes::NoData,
				"Create real (floating-point) variables with the names provided" },
	{ "_constvector_",	"",		"<variables>", NuVTypes::NoData,
				"Create constvectors with the names provided" },
	{ "atom",		"",		"<variables>", NuVTypes::NoData,
				"Create atom& variables with the names provided" },
	{ "bond",		"",		"<variables>", NuVTypes::NoData,
				"Create bond& variables with the names provided" },
	{ "pattern",		"",		"<variables>", NuVTypes::NoData,
				"Create pattern& variables with the names provided" },
	{ "bound",		"",		"<variables>", NuVTypes::NoData,
				"Create bound& variables with the names provided" },
	{ "model",		"",		"<variables>", NuVTypes::NoData,
				"Create model& variables with the names provided" },
	{ "grid",		"",		"<variables>", NuVTypes::NoData,
				"Create grid& variables with the names provided" },
	{ "ffatom",		"",		"<variables>", NuVTypes::NoData,
				"Create ffatom& variables with the names provided" },
	{ "ffbound",		"",		"<variables>", NuVTypes::NoData,
				"Create ffbound& variables with the names provided" },
	{ "_cellvar_",		"",		"<variables>", NuVTypes::NoData,
				"Create cell& variables with the names provided" },
	{ "forcefield",		"",		"<variables>", NuVTypes::NoData,
				"Create forcefield& variables with the names provided" },
	{ "_prefsvar_",		"",		"<variables>", NuVTypes::NoData,
				"Create prefs& variables with the names provided" },
	{ "_elementsvar_",	"",		"<variables>", NuVTypes::NoData,
				"Create elements& variables with the names provided" },
	{ "vector",		"",		"<variables>", NuVTypes::NoData,
				"Create vector variables with the names provided" },
	
	// Variable Manipulation
	{ "afterchar",		"NNV",		"<string> <char> <result>", NuVTypes::NoData,
				"Return part of the <string> after the first occurrence of the character <char>" },
	{ "beforechar",		"NNV",		"<string> <char> <result>", NuVTypes::NoData,
				"Return part of the <string> before the first occurrence of the character <char>" },
	{ "dec",		"V",		"<variable>", NuVTypes::NoData,
				"Decrease the specified variable" },
	{ "inc",		"V",		"<variable>", NuVTypes::NoData,
				"Increase the specified variable" },
	{ "let",		"VOE",		"<variable> [-+/*]= <variable|value|expression>", NuVTypes::NoData,
				"Set the specified variable" },
	{ "letchar",		"V~N",		"<variable> =|+= <variable|value>", NuVTypes::NoData,
				"Set the specified character variable" },
	{ "letptr",		"V=V",		"<variable> = <variable>", NuVTypes::NoData,
				"Set the specified pointer variable" },
	{ "letvector",		"VON",		"<variable> = <variable>", NuVTypes::NoData,
				"Set the specified vector variable" },
	{ "normalise",		"VVV",		"<x> <y> <z>", NuVTypes::NoData,
				"Normalise the values of the 3-vector supplied" },
	{ "stripchars",		"VN",		"<variable> <chars>", NuVTypes::NoData,
				"Strip all occurrences of the supplied characters from <variable>" },

	// Variable Operators
	{ "+",			"",		"", NuVTypes::NoData,
				"Internal Operator (+)" },
	{ "=",			"",		"", NuVTypes::NoData,
				"Internal Operator (=)" },
	{ "/",			"",		"", NuVTypes::NoData,
				"Internal Operator (/)" },
	{ "==",			"",		"", NuVTypes::NoData,
				"Internal Operator (==)" },
	{ ">",			"",		"", NuVTypes::NoData,
				"Internal Operator (>)" },
	{ ">=",			"",		"", NuVTypes::NoData,
				"Internal Operator (>=)" },
	{ "<",			"",		"", NuVTypes::NoData,
				"Internal Operator (<)" },
	{ "<=",			"",		"", NuVTypes::NoData,
				"Internal Operator (<=)" },
	{ "*",			"",		"", NuVTypes::NoData,
				"Internal Operator (*)" },
	{ "-NEG",		"",		"", NuVTypes::NoData,
				"Internal Operator (negate)" },
	{ "!=",			"",		"", NuVTypes::NoData,
				"Internal Operator (!=)" },
	{ "^",			"",		"", NuVTypes::NoData,
				"Internal Operator (^)" },
	{ "-",			"",		"", NuVTypes::NoData,
				"Internal Operator (-)" },
	
	// View
	{ "getview",		"",		"", NuVTypes::NoData,
				"Print the rotation matrix, camera position, and camera z-rotation for the current model" },
	{ "orthographic",	"",		"", NuVTypes::NoData,
				"Render in an orthographic projection" },
	{ "perspective",	"e",		"[fov]", NuVTypes::NoData,
				"Render in a perspective projection" },
	{ "resetview",		"",		"", NuVTypes::NoData,
				"Reset the camera and rotation for the current model" },
	{ "rotateview",		"EE",		"<x> <y>", NuVTypes::NoData,
				"Rotate the current model about the x and y axes by the specified amounts" },
	{ "setview",		"EEEEEEEEEEEEe","<ax> <ay> <az> <bx> <by> <bz> <cx> <cy> <cz> <camx> <camyu> <camz> [zrot]", NuVTypes::NoData,
				"Set the rotation matrix, camera position, and camera z-rotation for the current model" },
	{ "speedtest",		"e",		"[nrender]", NuVTypes::NoData,
				"Time 100 (or 'nrender') updates of the model display." },
	{ "translateview",	"EEE",		"<dx> <dy> <dz>", NuVTypes::NoData,
				"Translate the camera for the current model" },
	{ "viewalong",		"EEE",		"<x> <y> <z>", NuVTypes::NoData,
				"Set the rotation for the current model so the view is along the specified vector" },
	{ "viewalongcell",	"EEE",		"<x> <y> <z>", NuVTypes::NoData,
				"Set the rotation for the current model so the view is along the specified cell vector" },
	{ "zoomview",		"E",		"<dz>", NuVTypes::NoData,
				"Zoom in/out the camera - equivalent to 'translateview 0 0 dz'" },
	{ "zrotateview",	"E",		"<dr>", NuVTypes::NoData,
				"Rotate the model in the plane of the screen" }
};

// Return enumerated command from string
NuCommand::Function NuCommand::command(const char *s)
{
	int result;
	for (result = NuCommand::NoFunction; result < NuCommand::nFunctions; result++) if (strcmp(data[result].keyword,s) == 0) break;
	return (NuCommand::Function) result;
}

// Constructor
NuCommand::NuCommand()
{
	// Create pointer list
	initPointers();
	// Create dummyCommandList complete with a single dummy command
// 	dummyCommandList_ = new NuCommandList;
// 	dummyCommandNode_ = new NuCommandNode;
// 	dummyCommandNode_->setParent(dummyCommandList_);
}

// Constructor
NuCommand::~NuCommand()
{
// 	delete dummyCommandNode_;
// 	delete dummyCommandList_;
}

// Return whether command accepts any arguments
bool NuCommandData::hasArguments()
{
	return (!(arguments[0] == '\0'));
}

// Execute command
int NuCommand::call(NuCommand::Function cf, NuCommandNode *c, NuReturnValue &rv)
{
// 	return CALL_COMMAND(commands,pointers_[cf])(c, aten.current);
	return (this->pointers_[cf])(c, aten.current, rv);
}

