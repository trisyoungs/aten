# Forcefield output suitable for DL_POLY (FIELD files).
# Last modified: 05/08/08
# ChangeLog:
#	05/08/08 - Quoting adjusted to follow new Parser rules in r550.

exportfield
	name "DL_POLY Forcefield Specification"
	nickname dlpoly
	extension FIELD
	glob *FIELD*
	exact "FIELD"

	# Variable declaration
	double epsilon, sigma
	pattern p
	atom i
	bound ffb
	ffatom at1, at2
	integer nvdw, n

	# First, write header consisting of title, energy units, and number of molecule types
	writeline "$model.name"
	if $prefs.energyunit = kj
		writeline "units  kj"
	elseif $prefs.energyunit = kcal
		writeline "units  kcal"
	elseif $prefs.energyunit = ev
		writeline "units  ev"
	else
		error "Current energy unit is not compatible with DL_POLY FIELD output"
	end
	writeline "molecules  $model.npatterns"

	# Loop over patterns (molecule types)
	for $p
		# Write pattern name and number of molecules
		writeline "$p.name"
		writeline "nummols  $p.nmols"
		# Write atoms - just loop over those in the first molecule of the pattern
		writeline "atoms  $p.nmolatoms"
		for $i $p 1
			writeline "$i.type%-8   $i.mass%10.5  $i.charge%9.6   1   0   1"
		end
		# Bonds in pattern
		writeline "bonds  $p.nbonds"
		for $n,1,$p.nbonds
			# Grab ffbound pointer
			$ffb = $p.bonds[$n]
			# Convert functional form to be recognised by DL_POLY
			if $ffb.form = harmonic
				writeline "harm     $ffb.id[1]%5 $ffb.id[2]%5 $ffb.param[1]%10.4 $ffb.param[2]%10.4"
			elseif $ffb.form = morse
				writeline "morse    $ffb.id[1]%5 $ffb.id[2]%5 $ffb.param[3]%10.4 $ffb.param[2]%10.4 $ffb.param[1]%10.4"
			else
			print $ffb.form
				warn "Functional form of bond term ($b.form) not accounted for in export filter."
				writeline "X$ffb.form $ffb.id[1]%5 $ffb.id[2]%5 $ffb.param[1]%10.4 $ffb.param[2]%10.4 $ffb.param[3]%10.4 $ffb.param[4]%10.4" 
			end
		end
		# Angles in pattern
		writeline "angles  $p.nangles"
		for $n,1,$p.nangles
			# Grab ffbound pointer
			$ffb = $p.angles[$n]
			# Convert functional form to be recognised by DL_POLY
			if $a.form = harmonic
				writeline "harm     $a.id[1]%5 $a.id[2]%5 $a.id[3]%5 $a.param[1]%10.4 $a.param[2]%10.4"
			elseif $a.form = cos
				writeline "cos      $a.id[1]%5 $a.id[2]%5 $a.id[3]%5 $a.param[1]%10.4 $a.param[3]%10.4 $a.param[2]%10.4"
			elseif $a.form = harmcos
				writeline "hcos     $a.id[1]%5 $a.id[2]%5 $a.id[3]%5 $a.param[1]%10.4 $a.param[2]%10.4"
			else
				warn "Functional form of angle term ($a.form) not accounted for in export filter."
				writeline "X$a.form     $a.id[1]%5 $a.id[2]%5 $a.id[3]%5 $a.param[1]%10.4 $a.param[2]%10.4 $a.param[3]%10.4 $a.param[4]%10.4 $a.param[5]%10.4 $a.param_f%10.4"
			end
		end
		# Torsions in pattern
		writeline "dihedrals  $p.ntorsions"
		for $n,1,$p.ntorsions
			# Grab ffbound pointer
			$ffb = $p.torsions[$n]
			# Convert functional form to be recognised by DL_POLY
			if $ffb.form = cos
				writeline "cos    $ffb.id[1]%5 $t.id[2]%5 $t.id[3]%5 $t.id[4]%5 $t.param[1]%10.4 $t.param[2]%10.4 $t.param[3]%10.4 $t.escale%10.4 $t.vscale%10.4"
			elseif $ffb.form = cos3
				writeline "cos3   $ffb.id[1]%5 $t.id[2]%5 $t.id[3]%5 $t.id[4]%5 $t.param[1]%10.4 $t.param[2]%10.4 $t.param[3]%10.4 $t.escale%10.4 $t.vscale%10.4"
			else
				warn "Functional form of torsion term ($ffb.form) not accounted for in export filter."
				writeline "X$ffb.form   $t.id[1]%5 $t.id[2]%5 $t.id[3]%5 $t.id[4]%5 $t.param[1]%10.4 $t.param[2]%10.4 $t.param[3]%10.4 $t.param[4]%10.4 $t.escale%10.4 $t.vscale%10.4"
			end
		end
		# Terminating line
		writeline "finish"
	end
	# VDW Specification
	# Get total number of pair terms to write
	let $n = 1
	let $nvdw = 0
	for $at1
		$nvdw = $nvdw+$n
		inc $n
	end 
	writeline "nvdw  $nvdw"
	for $at1
		for $at2 $at1
			# Check functional forms of each atomtype
			if $at1.form <> $at2.form
				warn "Functional forms of atomtypes '$at1.equiv' and '$at2.equiv' differ - raw data written to output..." 
				writeline "$at1.name%-8  $at2.name%-8   $at1.param[1]%12.6  $at1.param[2]%12.6  $at1.param[3]%12.6 $at1.param[4]%12.6 $at1.param[5]%12.6 $at1.param[6]%12.6"
			elseif $at1.form = lj
				# LJ: use Lorentz-Berthelot combination rules
				$sigma = "($at1.param[2] + $at2.param[2]) * 0.5"
				$epsilon = "($at1.param[1] * $at2.param[1]) ^ 0.5"
				writeline "$at1.name%-8  $at2.name%-8  lj  $epsilon%12.6  $sigma%12.6"
			elseif $at1.form = buck
				error "Buckingham potential not included in FIELD file export yet."
			else
				warn "Functional form of VDW term ($at1.form) not accounted for in export filter."
			end
		end
	end
	writeline "close"
end
