// Pattern Definition windonw

using namespace std;
#include <gtk/gtk.h>
#include <string>
#include "gui/funcs.h"
#include "gui/gui.h"
#include "classes/treeview.h"
#include "classes/model.h"
#include "classes/pattern.h"
#include "base/master.h"
#include "icons/icons.h"

// Variables
GtkWidget *win_pattern;
GtkWidget *pattern_entry;
treeview_list pat_list;

void patwin_show(GtkMenuItem *widget, gpointer data)
{
	gtk_widget_show(win_pattern);
}

gint patwin_close(GtkWidget *widget, GdkEvent *event, gpointer data)
{
	// 'Delete Event' handler, called when we try to close the window.
	//return FALSE;	   // FALSE = do NOT destroy window. TRUE = DO destroy window.
	gtk_widget_hide(win_pattern);
}

void patwin_click_okbtn(GtkButton *widget, gpointer data)
{
	gtk_widget_hide(win_pattern);
	master.postredisplay();
}

void patwin_update()
{
	// Model has changed, so must update the pattern string in the editbox
	dbg_begin("patwin_update");
	gtk_entry_set_text(GTK_ENTRY(pattern_entry),master.activemodel->get_pattern());
	dbg_end("patwin_update");
}

void patwin_list_repopulate()
{
	// Clear and repopulate the pattern list with the pattern data in the current model
	dbg_begin("patwin_list_repopulate");
	GtkTreeIter iter;
	int count = 0;
	pat_list.clear();
	pattern *pn = master.activemodel->get_patterns();
	while (pn != NULL)
	{
		count++;
		pat_list.append(&iter);
		pat_list.set(&iter,PL_COL_ITEM,count,PL_COL_STARTATOM,pn->get_startatom(),
			PL_COL_NMOLS,pn->get_nmols(),PL_COL_NATOMS,pn->get_natoms(),
			PL_COL_TOTATOMS,pn->get_totalatoms(),-1);
		if (!pn->is_atomlimit_ok()) pat_list.set(&iter,PL_COL_TESTSIZE,pixbufs.xpm_pat_cross,-1);
		if (!pn->are_elements_ok()) pat_list.set(&iter,PL_COL_TESTELEMENT,pixbufs.xpm_pat_cross,-1);
		//if (!pn->is_bonding_ok()) pat_list.set(&iter,PL_COL_TESTBONDING,pixbufs.pat_cross,-1);
		pn = pn->next;
	}
	dbg_end("patwin_list_repopulate");
}

void patwin_apply_clicked(GtkButton *widget, gpointer data)
{
	// Apply the pattern in the editbox to the model
	dbg_begin("patwin_apply_clicked");
	master.activemodel->set_pattern(gtk_entry_get_text(GTK_ENTRY(pattern_entry)));
	master.activemodel->autocreate_patterns();
	patwin_list_repopulate();
	dbg_end("patwin_apply_clicked");
}

void patwin_pattern_changed(GtkEntry *widget, gpointer data)
{
	master.activemodel->set_pattern(gtk_entry_get_text(widget));
}

void patwin_create()
{
	// Create the Pattern Definition window
	dbg_begin("patwin_create");
	GObject *tobj;
	GtkCellRenderer *rend;
	GtkWidget *w, *frame, *box, *mainbox;
	// Create the window and register some callbacks.
	win_pattern = cs_subwindow("Pattern Definition",500,300,FALSE,patwin_close);

	// Main box for whole window
	mainbox = cs_box_container(CS_VERTICAL,FALSE,2,win_pattern);

	// Pattern entry frame
	frame = cs_frame("Pattern",mainbox,CS_START,FALSE,TRUE,0);
	box = cs_box_container(CS_HORIZONTAL,FALSE,2,frame);

	// Text Entry for pattern definition
	pattern_entry = cs_entry(box,CS_START,TRUE,TRUE,0,patwin_pattern_changed);
	//gtk_entry_set_activates_default(GTK_ENTRY(pattern_entry),TRUE);
	w = cs_button("Apply",box,CS_END,FALSE,TRUE,0,patwin_apply_clicked);

	// Create the pattern list
	cs_treeview(&pat_list,"patternlist","iiiiixxx",mainbox,CS_START,TRUE,TRUE,0,NULL);
        // Add the columns
	rend = cs_column(&pat_list,"Node","text",PL_COL_ITEM);
	rend = cs_column(&pat_list,"Start","text",PL_COL_STARTATOM);
	rend = cs_column(&pat_list,"NMol","text",PL_COL_NMOLS);
	rend = cs_column(&pat_list,"Atoms/Mol","text",PL_COL_NATOMS);
	rend = cs_column(&pat_list,"NAtoms","text",PL_COL_TOTATOMS);
	rend = cs_column(&pat_list,"Size","pixbuf",PL_COL_TESTSIZE);
	rend = cs_column(&pat_list,"El","pixbuf",PL_COL_TESTELEMENT);
	rend = cs_column(&pat_list,"Bond","pixbuf",PL_COL_TESTBONDING);
	pat_list.set_size(200,150);

	// Buttons at foot of window (OK etc.)
	box = cs_box(CS_VERTICAL,FALSE,0,mainbox,CS_END,FALSE,TRUE,2);
	cs_separator(CS_HORIZONTAL,box,CS_START,FALSE,TRUE,0);
	box = cs_box(CS_HORIZONTAL,FALSE,0,box,CS_START,FALSE,TRUE,0);
	w = cs_button("OK",box,CS_END,FALSE,TRUE,0,patwin_click_okbtn);

	gtk_widget_show_all(mainbox);
	dbg_end("patwin_create");
}
