<section id="command.groups.string"><title>String Commands</title>
	
	<para>Manipulation and conversion of variables.</para>
	
	<note><title>See also:</title>
		<itemizedlist mark='opencircle'>
			<listitem>
				<para><link linkend="command.overview.variables">Variables</link> for information on using variables in Aten.</para>
			</listitem>
			<listitem>
				<para><link linkend="command.types">Variable Types</link> for lists of properties available in reference variable types.</para>
			</listitem>
		</itemizedlist>
	</note>
	
	<section id="command.ref.afterstr"><title>afterstr</title>
		<indexterm><primary>commands</primary><secondary>afterstr</secondary></indexterm>
		
		<para><emphasis>Syntax:</emphasis></para>
		<funcsynopsis>
			<funcprototype>
				<funcdef>string <function>afterstr</function></funcdef>
				<paramdef>string <parameter>source</parameter></paramdef>
				<paramdef>string <parameter>search</parameter></paramdef>
				<paramdef>bool <parameter>sourceonfail = FALSE</parameter></paramdef>
			</funcprototype>
		</funcsynopsis>
		<para>Return the part of the <emphasis>source</emphasis> string that comes after the first occurrence of the <emphasis>search</emphasis> string. If <emphasis>source</emphasis> doesn't contain any occurrences of <emphasis>search</emphasis> an empty string is returned, unless the flag 'sourceonfail' is set to TRUE in which case the original source string is returned instead.</para>
		
		<para>For example:</para>
		<synopsis>
string fullname = &quot;BobBobbinson&quot;;
string firstname = afterstr(name, &quot;Bob&quot;);
		</synopsis>
		<para>sets the variable <emphasis>firstname</emphasis> to the value 'Bobbinson'.</para>
		<synopsis>
string text1, text2;
text1 = &quot;No taxes on axes&quot;;
text2 = afterstr(text1, &quot;x&quot;);
		</synopsis>
		<para>results in <emphasis>text2</emphasis> having a value of 'es on axes'.</para>
	
	</section>
	
	<section id="command.ref.atof"><title>atof</title>
		<indexterm><primary>commands</primary><secondary>atof</secondary></indexterm>
		
		<para><emphasis>Syntax:</emphasis></para>
		<funcsynopsis>
			<funcprototype>
				<funcdef>double <function>atof</function></funcdef>
				<paramdef>string <parameter>text</parameter></paramdef>
			</funcprototype>
		</funcsynopsis>
		<para>Converts the supplied <emphasis>text</emphasis> into its floating point (double) representation. Equivalent to the standard C routine 'atof'.</para>
		
		<para>For example:</para>
		<synopsis>
double x = atof(&quot;1.099d&quot;);
		</synopsis>
		<para>would set <emphasis>x</emphasis> to the value '1.099'.</para>
		
	</section>
	
	<section id="command.ref.atoi"><title>atoi</title>
		<indexterm><primary>commands</primary><secondary>atoi</secondary></indexterm>
		
		<para><emphasis>Syntax:</emphasis></para>
		<funcsynopsis>
			<funcprototype>
				<funcdef>int <function>atoi</function></funcdef>
				<paramdef>string <parameter>text</parameter></paramdef>
			</funcprototype>
		</funcsynopsis>
		<para>Converts the supplied <emphasis>text</emphasis> into its integer representation. Equivalent to the standard C routine 'atoi'.</para>
		
		<para>For example:</para>
		<synopsis>
int i = atoi(&quot;000023&quot;);
		</synopsis>
		<para>would set <emphasis>i</emphasis> to the value '23'.</para>
	
	</section>
	
	<section id="command.ref.beforestr"><title>beforestr</title>
		<indexterm><primary>commands</primary><secondary>beforestr</secondary></indexterm>
		
		<para><emphasis>Syntax:</emphasis></para>
		<funcsynopsis>
			<funcprototype>
				<funcdef>string <function>beforestr</function></funcdef>
				<paramdef>string <parameter>source</parameter></paramdef>
				<paramdef>string <parameter>search</parameter></paramdef>
				<paramdef>bool <parameter>sourceonfail = FALSE</parameter></paramdef>
			</funcprototype>
		</funcsynopsis>
		<para>Return the part of the <emphasis>source</emphasis> string that comes before the first occurrence of the <emphasis>search</emphasis> string. If <emphasis>source</emphasis> doesn't contain any occurrences of <emphasis>search</emphasis> an empty string is returned, unless the flag 'sourceonfail' is set to TRUE in which case the original source string is returned instead.</para>
		
		<para>For example:</para>
		<synopsis>
string source, target;
source = &quot;Engelbert&quot;;
target = beforestr(source, &quot;e&quot;);
		</synopsis>
		<para>places the text &quot;Eng&quot; in the variable <emphasis>target</emphasis>.</para>
		<synopsis>
string text1 = &quot;No taxes on axes&quot;, text2;
text2 = beforestr(text1, &quot; ax&quot;);
		</synopsis>
		<para>places the text &quot;No taxes on&quot; in the variable <emphasis>text2</emphasis>.</para>
	
	</section>
	
	<section id="command.ref.contains"><title>contains</title>
		<indexterm><primary>commands</primary><secondary>contains</secondary></indexterm>

		<para><emphasis>Syntax:</emphasis></para>
		<funcsynopsis>
			<funcprototype>
				<funcdef>int <function>contains</function></funcdef>
				<paramdef>string <parameter>source</parameter></paramdef>
				<paramdef>string <parameter>search</parameter></paramdef>
			</funcprototype>
		</funcsynopsis>
		<para>Returns the number of times the <emphasis>search</emphasis> string is found in the <emphasis>source</emphasis> string. The function counts only non-overlapping occurrences of <emphasis>search</emphasis>.</para>
		
		<para>For example:</para>
		<synopsis>
string poem = &quot;six sixes are thirty-six&quot;;
int count = contains(poem, &quot;six&quot;);
		</synopsis>
		<para>sets <emphasis>count</emphasis> to '3'.</para>
	
	</section>
	
	<section id="command.ref.ftoa"><title>ftoa</title>
		<indexterm><primary>commands</primary><secondary>ftoa</secondary></indexterm>
		
		<para><emphasis>Syntax:</emphasis></para>
		<funcsynopsis>
			<funcprototype>
				<funcdef>string <function>ftoa</function></funcdef>
				<paramdef>double <parameter>d</parameter></paramdef>
			</funcprototype>
		</funcsynopsis>
		
		<itemizedlist>
			<listitem>
				<para> string ftoa ( double d )</para>
			</listitem>
		</itemizedlist>
		<para>Converts the supplied double <emphasis>d</emphasis> into a string representation.</para>
		
		<para>For example:</para>
		<synopsis>
string num = ftoa(100.001);
		</synopsis>
		<para>would set <emphasis>num</emphasis> to the value &quot;100.001&quot;.</para>
		
	</section>
	
	<section id="command.ref.itoa"><title>itoa</title>
		<indexterm><primary>commands</primary><secondary>itoa</secondary></indexterm>
		
		<para><emphasis>Syntax:</emphasis></para>
		<funcsynopsis>
			<funcprototype>
				<funcdef>string <function>itoa</function></funcdef>
				<paramdef>int <parameter>i</parameter></paramdef>
			</funcprototype>
		</funcsynopsis>
		<para>Converts the supplied integer <emphasis>i</emphasis> into a string representation.</para>
		
		<para>For example:</para>
		<synopsis>
string num = itoa(54);
		</synopsis>
		<para>would set <emphasis>num</emphasis> to the value &quot;54&quot;.</para>
		
	</section>
	
	<section id="command.ref.replacechars"><title>replacechars</title>
		<indexterm><primary>commands</primary><secondary>replacechars</secondary></indexterm>
		
		<para><emphasis>Syntax:</emphasis></para>
		<funcsynopsis>
			<funcprototype>
				<funcdef>string <function>replacechars</function></funcdef>
				<paramdef>string <parameter>source</parameter></paramdef>
				<paramdef>string <parameter>searchchars</parameter></paramdef>
				<paramdef>string <parameter>replacechar</parameter></paramdef>
			</funcprototype>
		</funcsynopsis>
		<para>Searches through the supplied <emphasis>source</emphasis> string, and replaces all occurrences of the individual characters given in the string <emphasis>searchchars</emphasis> with the character supplied in <emphasis>replacechar</emphasis>, returning the new string.</para>
		
		<para>For example:</para>
		<synopsis>
string newstring = replacechars("Zero 2599 these numbers", "123456789", "0");
		</synopsis>
		<para>replaces any numeric character with a zero.</para>
		
	</section>

	<section id="command.ref.replacestr"><title>replacestr</title>
		<indexterm><primary>commands</primary><secondary>replacestr</secondary></indexterm>
		
		<para><emphasis>Syntax:</emphasis></para>
		<funcsynopsis>
			<funcprototype>
				<funcdef>string <function>replacestr</function></funcdef>
				<paramdef>string <parameter>source</parameter></paramdef>
				<paramdef>string <parameter>searchstr</parameter></paramdef>
				<paramdef>string <parameter>replacestr</parameter></paramdef>
			</funcprototype>
		</funcsynopsis>
		<para>Replaces all occurrences of <emphasis>searchstr</emphasis> with <emphasis>replacestr</emphasis> in the supplied <emphasis>source</emphasis> string, returning the result.</para>
		
		<para>For example:</para>
		<synopsis>
string fruity = replacestr("I don't like apples.", "apples", "oranges");
		</synopsis>
		<para>would change your fondness towards apples.</para>
		
	</section>
	
	<section id="command.ref.removestr"><title>removestr</title>
		<indexterm><primary>commands</primary><secondary>removestr</secondary></indexterm>
		
		<para><emphasis>Syntax:</emphasis></para>
		<funcsynopsis>
			<funcprototype>
				<funcdef>string <function>removestr</function></funcdef>
				<paramdef>string <parameter>source</parameter></paramdef>
				<paramdef>string <parameter>searchstr</parameter></paramdef>
			</funcprototype>
		</funcsynopsis>
		<para>Removes all occurrences of <emphasis>searchstr</emphasis> from the <emphasis>source</emphasis> string, returning the result.</para>
		
		<para>For example:</para>
		<synopsis>
string debt = removestr("I owe you 2 million dollars.", "million ");
		</synopsis>
		<para>would reduce your outgoings considerably.</para>
		
	</section>
	
	<section id="command.ref.sprintf"><title>sprintf</title>
		<indexterm><primary>commands</primary><secondary>sprintf</secondary></indexterm>
		
		<para><emphasis>Syntax:</emphasis></para>
		<funcsynopsis>
			<funcprototype>
				<funcdef>string <function>sprintf</function></funcdef>
				<paramdef>string <parameter>dest</parameter></paramdef>
				<paramdef>string <parameter>format</parameter></paramdef>
				<paramdef><parameter>...</parameter></paramdef>
			</funcprototype>
		</funcsynopsis>
		<para>Prints a formatted string to the supplied variable <emphasis>dest</emphasis>, and is an alias for the <link linkend="command.ref.writevarf">writevarf</link> command.</para>

	</section>
	
	<section id="command.ref.stripchars"><title>stripchars</title>
		<indexterm><primary>commands</primary><secondary>stripchars</secondary></indexterm>
		
		<para><emphasis>Syntax:</emphasis></para>
		<funcsynopsis>
			<funcprototype>
				<funcdef>string <function>stripchars</function></funcdef>
				<paramdef>string <parameter>source</parameter></paramdef>
				<paramdef>string <parameter>charlist</parameter></paramdef>
			</funcprototype>
		</funcsynopsis>
		<para>Strip the supplied character(s) from the <emphasis>source</emphasis> string, returning the result.</para>
		
		<para>For example:</para>
		<synopsis>
string abc = stripchars(&quot;Oodles of noodles&quot;, &quot;o&quot;);
		</synopsis>
		<para>places the text &quot;Odles f ndles&quot; in the variable <emphasis>abc</emphasis>.</para>
		<synopsis>
string abc;
abc = &quot;Oodles of noodles&quot;;
abc = stripchars(abc, &quot;aeiou&quot;);
		</synopsis>
		<para>strips all vowels from the input string, placing the text &quot;Odls f ndls&quot; in the variable <emphasis>abc</emphasis>.</para>

	</section>

	<section id="command.ref.toa"><title>toa</title>
		<indexterm><primary>commands</primary><secondary>toa</secondary></indexterm>
		
		<para><emphasis>Syntax:</emphasis></para>
		<funcsynopsis>
			<funcprototype>
				<funcdef>string <function>toa</function></funcdef>
				<paramdef>string <parameter>format</parameter></paramdef>
				<paramdef><parameter>...</parameter></paramdef>
			</funcprototype>
		</funcsynopsis>
		<para>Returns a string formatted according to the supplied <emphasis>format</emphasis>.</para>
			
	</section>
	
</section>
